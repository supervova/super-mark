<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ru"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://super-mark.ru/feed.xml" rel="self" type="application/atom+xml"/><link href="https://super-mark.ru/" rel="alternate" type="text/html" hreflang="ru"/><updated>2025-09-27T19:07:16+03:00</updated><id>https://super-mark.ru/feed.xml</id><title type="html">SuperMark</title><subtitle>Торговая марка Владимира Никишина. Веб-дизайн, разработка, digital-маркетинг.</subtitle><author><name>@supervova</name></author><entry xml:lang="ru"><title type="html">Vibe-кодинг 101: практические советы</title><link href="https://super-mark.ru/ru/blog/2025/vibe-coding-101" rel="alternate" type="text/html" title="Vibe-кодинг 101: практические советы"/><published>2025-09-16T00:00:00+03:00</published><updated>2025-09-16T00:00:00+03:00</updated><id>https://super-mark.ru/ru/blog/2025/vibe-coding-101</id><content type="html" xml:base="https://super-mark.ru/ru/blog/2025/vibe-coding-101"><![CDATA[<blockquote> <p><strong>PRD (Product Requirements Document)</strong>. Документ с требованиями к продукту: пользовательские сценарии, функционал, ограничения, интеграции. Помогает команде работать в одном контексте, а <code class="language-plaintext highlighter-rouge">solopreneur</code>‘у, типа меня, держаться выбранной цели и корректировать ее, если нужно. PRD – это не ТЗ (техническое задание). PRD описывает, что надо сделать: функциональность и бизнес-цели. А ТЗ – как это сделать, общие инженерные решения.</p> </blockquote> <p><strong>2. Если разработка не no-code</strong>, кодируй в <a href="/ru/blog/2025/gemini-chatgpt-vs-code-copilot">VS Code c Codex или Gemini CLI</a> или в <a href="/ru/blog/2024/cursor">Cursor’е</a>. Подключи <a href="https://eslint.org/">Eslint</a>, <a href="https://stylelint.io/">Stylelint</a> и <a href="https://prettier.io/">Prettier</a>. Правильное форматирование — первое средство от ошибок.</p> <p><strong>3. Разработай инструкции для ассистента</strong> и сохрани их в «корне» проекта: если работаешь с Codex CLI – <code class="language-plaintext highlighter-rouge">AGENTS.md</code>; если с Gemini CLI – <code class="language-plaintext highlighter-rouge">GEMINI.md</code>. Если работаешь с Codex Веб, тогда инструкции сохраняй в папке Github – <code class="language-plaintext highlighter-rouge">./.github/AGENTS.md</code>. Попроси ассистента самому составь требования — он-то лучше их знает. Просто определи разделы документа, общие сведения о проекте, технологический стек – см. мой пример.</p> <pre><code class="language-markdown">
## Роль

Ты – эксперт в разработке веб-приложений. Твой основной стек: **React 19, TS, SCSS, PHP**. Для быстрого прототипирования можешь использовать **Pug**. Ты выдаешь лаконичные, рабочие решения без "воды".

## Проект

- **Название**: CryptoAPI.ai
- **Тип**: веб-приложение SaaS – LLM-консультант для криптотрейдеров
- **Целевая аудитория**: трейдеры криптовалют (новички и опытные)
- **Стадия**: разработка MVP с анализом рынка + простыми торговыми сигналами

### Функциональность

- **Основные фичи**:
  - Анализ рыночных трендов
  - Персонализированные торговые сигналы
  - Портфолио-трекер
- **Интеграции**: Binance API, CoinGecko, OpenAI API
- **Ограничения**: никаких прямых торговых операций

### Технологический стек

| Слой             | Технологии                                                                    |
| ---------------- | ----------------------------------------------------------------------------- |
| **Фронтенд**     | React 19, TypeScript, SCSS                                                    |
| **Бэкенд / API** | PHP 8.4 (PSR-12, strict_types, Composer autoload)                             |
| **Инструменты**  | PHPStan (level 9), ESLint + Prettier, Stylelint, Vite + esbuild               |

### Требования и ограничения

| Категория              | Требования                                    |
| ---------------------- | --------------------------------------------- |
| **UI/UX**              | WCAG AA; Desktop ≥ 1360 px, Tablet ≥ 768 px   |
| **Производительность** | LCP ≤ 2.5 s; CSS ≤ 200 KB; JS ≤ 300 KB (gzip) |

### Структура проекта

```txt
public/
  css/
  js/
  img/
src/
  components/      # React components: TS, Storybook, tests, docs, images
  engine/          # PHP-контроллеры
  hooks/           # React hooks
  pages/           # Page-level components
  store/           # State management
  theme/           # SCSS mixins, functions, variables, doc styles, defaults, helpers
  translate/       # *.po
  types/           # TypeScript types
  utils/           # Utility functions
```

### Текущие задачи

1. Кабинет трейдера с дашбордом, страницами рынков и отдельных активов
2. Система уведомлений о сигналах
3. Интеграция с Binance API для получения данных

## Формат ответа

- Отвечай по-русски, если вопрос задан на русском.
- **Будь лаконичен.** Давай минимум необходимого, без "воды" и пояснений, если их не просили.
- Лучший ответ – **полностью готовый код, который соответствует стайлгайду (включая JSDoc)**, без TODO, заглушек и дополнительных комментариев вне кода.
- **Код давай сразу готовый и полный для текущего шага.** В больших задачах разбивай решение на логические блоки: отправляй один блок, дожидайся подтверждения и переходи к следующему. Не используй TODO или заглушки.
- **Не выдумывай.** Если не уверен в требовании – уточни.
- Следи за форматированием Markdown.
- Если нужно создать файл – укажи bash-команду.

## Стиль и лучшие практики кодирования

### Общие принципы

| Группа                                  | Правило                              |
| --------------------------------------- | ------------------------------------ |
| Отступ                                  | 2 пробела                            |
| Ширина строки                           | ≤ 100 символов                       |
| Один оператор / инструкция в строке     | да                                   |
| Пустая строка между логическими блоками | да                                   |
| Имена (vars, funcs, CSS)                | английский, kebab/camel по контексту |
| Комментарии                             | `// коротко, по делу`, над строкой   |

### HTML

| Группа         | Правило                                                                                                       |
| -------------- | ------------------------------------------------------------------------------------------------------------- |
| Атрибуты       | двойные кавычки                                                                                               |
| Классы         | Модифицированный БЭМ – модификаторы отделльными классами с префиксами `is-` и `has-` (`card__title is-large`) |
| Закрытие тегов | всегда явное ( `<li></li>` )                                                                                  |

### SCSS и CSS

| Группа              | Правило                                                                       |
| ------------------- | ----------------------------------------------------------------------------- |
| Переменные          | ограниченное использование SCSS-переменных, приоритет – CSS properties        |
| Цвета               | только через CSS properties                                                   |
| Вложенность в Sass  | ≤ 3 уровней                                                                   |
| **Порядок свойств** | Сначала `@extend`, затем `@include`, после них – остальные (порядок см. ниже) |
| Кавычки             | одинарные                                                                     |

#### Порядок свойств

- `moz-*`, `-webkit-*` в алфавитном порядке (если по какой-то причине добавлены)
- `all`
- `accent-color`
- `animation`
- `appearance`
- `background` и все настройки `background-*` в алфавитном порядке
- `border` и все свойства `border-*`, включая `border-radius`, в алфавитном порядке
- `box-shadow`
- `box-sizing`
- `contain`
- `color`
- `cursor`
- `display` и все настройки в алфавитном порядке: `align-items`, `flex-shrink`, `justify-content`, `place-itemc` etc
- `filter`
- `font` и любые `font-*` свойства в алфавитном порядке; а также: `letter-spacing`, `line-height`, `text-align`, `text-decoration`, `text-transform`, `white-space`, `word-wrap`
- `margin` и любые `margin-*`
- `padding` и любые `padding-*`
- `opacity`
- `outline`
- `overflow`
- `pointer-events`
- `position` и все настройки: `top`, `right`, `inset` и т.д.
- `rotate`
- `scale`
- `touch-action`
- `transform`
- `transition`
- `translate`
- `user-select`
- `vertical-align`
- `width` и `max`-/`min`-значения
- `height` и `max`-/`min`-значения
- `zindex`

### TypeScript &amp; React

| Группа                          | Правило                                                                                            |
| ------------------------------- | -------------------------------------------------------------------------------------------------- |
| Стиль                           | ESLint (Airbnb) + Prettier (одинарные кавычки, `trailing-comma: es5`, точка с запятой обязательна) |
| Типизация                       | Строгая (`strict: true` в `tsconfig.json`). Избегать `any`.                                        |
| Компоненты                      | Функциональные компоненты с хуками. Именование: `PascalCase.tsx`.                                  |
| Нейминг хуков                   | `useMyHook`                                                                                        |
| `const` &gt; `let`; `var` запрещён | да                                                                                                 |

### PHP 8.4

| Группа            | Правило                                                                                    |
| ----------------- | ------------------------------------------------------------------------------------------ |
| Стандарт          | PSR-12 (классы `CamelCase`, методы `camelCase`, константы `SCREAMING_SNAKE`)               |
| Файл              | `&lt;?php` на первой строке, `declare(strict_types=1);` сразу после                           |
| Тайп-хинты        | обязательны для параметров и `return`                                                      |
| Typed-properties  | `readonly`, union-types, intersection types разрешены                                      |
| **Запрещено**     | property promotion в конструкторе (для ясности)                                            |
| Исключения        | собственные классы от `\RuntimeException`                                                  |
| БД                | PDO + prepared SQL или ORM-query-builder                                                   |
| Контроль качества | `phpstan analyse --level max --no-progress` → `php-cs-fixer fix --dry-run`                   |

## Безопасность

- **Ввод**: всегда валидируй и фильтруй пользовательский ввод на бэкенде. Не доверяй данным из `$_SERVER`, `$_GET`, `$_POST`.
- **Вывод**: предотвращай XSS, используя JSX auto-escaping в React.
- **Формы**: используй CSRF-токены для всех POST-запросов (формы, AJAX).
- **Запросы к БД**: только prepared statements для предотвращения SQL-инъекций.
- **Протокол**: HTTPS only. Заголовки: `Content-Security-Policy: default-src 'self'`, `Strict-Transport-Security: max-age=31536000; includeSubDomains; preload`, `X-Frame-Options: SAMEORIGIN`.
- **Ошибки**: обрабатывай исключения и логируй ошибки, не показывая пользователю технические детали.
</code></pre> <p><strong>4. Делай маленькими шагами</strong>. Реализуй одну фичу за раз, проверяй её тест-кейсовыми промптами. Для багов — отдельные итерации.</p> <blockquote> <p><strong>Тест-кейс (test case)</strong>. Набор условий и шагов для проверки конкретной функции приложения. Помогает убедиться, что код работает как ожидается.</p> </blockquote> <p><strong>5. Выбирайся из «петель Дори»</strong>. Не гоняй один и тот же промпт. Добавляй контекст: логи, скриншоты, описание шагов. После трёх неудач — откатитесь к последнему рабочему коммиту.</p> <blockquote> <p><strong>Петля Дори (Dory loop)</strong>. Ситуация, когда ИИ-ассистент бесконечно повторяет фиксы бага, не решая проблему (по аналогии с рыбкой Дори из «В поисках Немо»).</p> </blockquote> <p><strong>6. Используй GitHub</strong>. Подключай проект сразу – сразу настрой CI. коммить осмысленные изменения. Это страховка от ошибок ИИ.</p> <blockquote> <p><strong>CI (Continuous Integration)</strong>. Непрерывная интеграция — практика регулярного слияния кода в общий репозиторий с автоматическим запуском тестов.</p> </blockquote> <p><strong>7. Для MVP вынеси бизнес-логику в <a href="https://n8n.io/">n8n</a></strong>. Пусть фронтенд остаётся простым, а сложные API-вызовы и обработка идут через визуальные воркфлоу.</p> <p><img src="/assets/img/blog/2025/09-16-n8n.webp" alt="n8n – произносится, как «нейтан»"/></p> <p><strong>Когда НЕ стоит</strong> использовать n8n.</p> <ul> <li><strong>Очень простая логика</strong> — оставь внутри приложения. Например, если нужно просто проверить правильность email или сложить два числа — проще оставить это в коде (JS/TS, Python и т. д.), чем дергать внешний сервис.</li> <li><strong>Критически важные и быстрые операции</strong>. Если логика должна выполняться мгновенно (например, расчёт цен в реальном времени или авторизация пользователей), то вызовы к n8n через вебхуки могут внести лишнюю задержку и стать точкой отказа.</li> <li><strong>Сложная бизнес-логика с высокой нагрузкой</strong>. При тысячах запросов в секунду n8n может стать узким местом. Лучше перенести эту часть в отдельный сервис (микросервис), оптимизированный под нагрузку.</li> <li><strong>Код, требующий строгой безопасности</strong>. Например, работа с секретами, финансовыми транзакциями или персональными данными. В таких случаях лучше использовать проверенные бэкенд-фреймворки и инфраструктуру с audit-логами.</li> </ul> <p><strong>8. Добавляй авторизацию на раннем этапе</strong>. Даже простая заглушка на входе спасёт от будущего рефакторинга.</p> <p><strong>9. Храни ключи в <code class="language-plaintext highlighter-rouge">.env</code></strong> Никогда не хардкодь секреты. Делай мини-аудиты безопасности через LLM.</p>]]></content><author><name>@supervova</name></author><category term="Разработка"/><summary type="html"><![CDATA[1. Планируй заранее. Прежде чем писать код — обсуди идею с LLM, оформи краткий PRD в `requirements.md` и согласуй первый промпт.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://super-mark.ru/img/blog/2025/2025-09-16-paris.jpg"/><media:content medium="image" url="https://super-mark.ru/img/blog/2025/2025-09-16-paris.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ru"><title type="html">Тестирую виджеты для текущего проекта</title><link href="https://super-mark.ru/ru/blog/2025/cryptoapi-widgets" rel="alternate" type="text/html" title="Тестирую виджеты для текущего проекта"/><published>2025-09-01T00:00:00+03:00</published><updated>2025-09-01T00:00:00+03:00</updated><id>https://super-mark.ru/ru/blog/2025/cryptoapi-widgets</id><content type="html" xml:base="https://super-mark.ru/ru/blog/2025/cryptoapi-widgets"><![CDATA[ <iframe src="https://cryptoapi.ai/ru/widgets/signals?theme=dark&amp;PageSpeed=Off&amp;rows=8&amp;widget_bypass=PROD_STUB" title="Crypto signals widget" loading="lazy" referrerpolicy="no-referrer-when-downgrade" sandbox="allow-scripts allow-popups allow-top-navigation-by-user-activation allow-same-origin" style="border:0;border-radius:12px;overflow:hidden;width:100%" width="100%"></iframe> <script>
(function() {
  if (window.cryptoApiWidgetListener) {
    return;
  }
  window.cryptoApiWidgetListener = true;
  window.addEventListener('message', function(e) {
    if (e.origin !== "https://cryptoapi.ai") {
      return;
    }
    if (e.data && e.data.type === 'cryptoapi:height' && e.source) {
      var iframes = document.querySelectorAll('iframe[src*="https://cryptoapi.ai"]');
      for (var i = 0; i < iframes.length; i++) {
        if (iframes[i].contentWindow === e.source) {
          iframes[i].style.height = (e.data.height || 120) + 'px';
          break;
        }
      }
    }
  });
})();
</script> <iframe src="https://cryptoapi.ai/ru/widgets/fgi?theme=light&amp;PageSpeed=Off&amp;widget_bypass=PROD_STUB" title="Crypto fgi widget" loading="lazy" referrerpolicy="no-referrer-when-downgrade" sandbox="allow-scripts allow-popups allow-top-navigation-by-user-activation allow-same-origin" style="border:0;border-radius:12px;overflow:hidden;width:100%" width="100%"></iframe> <script>
(function() {
  if (window.cryptoApiWidgetListener) {
    return;
  }
  window.cryptoApiWidgetListener = true;
  window.addEventListener('message', function(e) {
    if (e.origin !== "https://cryptoapi.ai") {
      return;
    }
    if (e.data && e.data.type === 'cryptoapi:height' && e.source) {
      var iframes = document.querySelectorAll('iframe[src*="https://cryptoapi.ai"]');
      for (var i = 0; i < iframes.length; i++) {
        if (iframes[i].contentWindow === e.source) {
          iframes[i].style.height = (e.data.height || 120) + 'px';
          break;
        }
      }
    }
  });
})();
</script> <iframe src="https://cryptoapi.ai/ru/widgets/btc?theme=dark&amp;PageSpeed=Off&amp;widget_bypass=PROD_STUB" title="Crypto btc widget" loading="lazy" referrerpolicy="no-referrer-when-downgrade" sandbox="allow-scripts allow-popups allow-top-navigation-by-user-activation allow-same-origin" style="border:0;border-radius:12px;overflow:hidden;width:100%" width="100%"></iframe> <script>
(function() {
  if (window.cryptoApiWidgetListener) {
    return;
  }
  window.cryptoApiWidgetListener = true;
  window.addEventListener('message', function(e) {
    if (e.origin !== "https://cryptoapi.ai") {
      return;
    }
    if (e.data && e.data.type === 'cryptoapi:height' && e.source) {
      var iframes = document.querySelectorAll('iframe[src*="https://cryptoapi.ai"]');
      for (var i = 0; i < iframes.length; i++) {
        if (iframes[i].contentWindow === e.source) {
          iframes[i].style.height = (e.data.height || 120) + 'px';
          break;
        }
      }
    }
  });
})();
</script> <iframe src="https://cryptoapi.ai/widgets/trindx?theme=dark&amp;PageSpeed=Off&amp;aff=2266320&amp;widget_bypass=PROD_STUB" title="Crypto trindx widget" loading="lazy" referrerpolicy="no-referrer-when-downgrade" sandbox="allow-scripts allow-popups allow-top-navigation-by-user-activation allow-same-origin" style="border:0;border-radius:12px;overflow:hidden;width:100%" width="100%"></iframe> <script>
(function() {
  if (window.cryptoApiWidgetListener) {
    return;
  }
  window.cryptoApiWidgetListener = true;
  window.addEventListener('message', function(e) {
    if (e.origin !== "https://cryptoapi.ai") {
      return;
    }
    if (e.data && e.data.type === 'cryptoapi:height' && e.source) {
      var iframes = document.querySelectorAll('iframe[src*="https://cryptoapi.ai"]');
      for (var i = 0; i < iframes.length; i++) {
        if (iframes[i].contentWindow === e.source) {
          iframes[i].style.height = (e.data.height || 120) + 'px';
          break;
        }
      }
    }
  });
})();
</script>]]></content><author><name>@supervova</name></author><category term="Разработка"/><summary type="html"><![CDATA[CryptoAPI.ai — приложение с LLM-ассистентом для трейдинга на крипторынках.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://super-mark.ru/img/blog/2025/2025-09-01-cryptoapi.png"/><media:content medium="image" url="https://super-mark.ru/img/blog/2025/2025-09-01-cryptoapi.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ru"><title type="html">Vibe Coding эконом-класса: ChatGPT + Gemini CLI + VS Code Copilot</title><link href="https://super-mark.ru/ru/blog/2025/gemini-chatgpt-vs-code-copilot" rel="alternate" type="text/html" title="Vibe Coding эконом-класса: ChatGPT + Gemini CLI + VS Code Copilot"/><published>2025-07-13T00:00:00+03:00</published><updated>2025-07-13T00:00:00+03:00</updated><id>https://super-mark.ru/ru/blog/2025/gemini-chatgpt-vs-code-copilot</id><content type="html" xml:base="https://super-mark.ru/ru/blog/2025/gemini-chatgpt-vs-code-copilot"><![CDATA[<p>Если вы, как и я, переживаете не самый лучший в финансовом плане период жизни, то вы не можете себе позволить платные подписки. Вам нужно что-то бесплатное, но приличное. Бедненько, но со вкусом. Моя рекомендация: VS Code c Copilot’ом, ChatGPT и Gemini CLI.</p> <h2 id="chatgpt">ChatGPT</h2> <p>Надо признаться, что я использую версию пользователя пакета Team, поэтому для меня доступны папки, облегчающие процесс, – для каждого нового чата не надо по новой рассказывать о продукте, целях и стеке. Но, думаю, и с бесплатной версией можно вполне продуктивно работать, используя хештеги для упрощения поиска и вводные инструкции по проекту в начале каждого чата. Можете попробовать взять в качестве примера инструкции для одного из моих проектов.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gu">## Роль</span>
<span class="p">
-</span> Эксперт по Twig 3 / SCSS / Vanilla JS (ES-2022) / PHP 7.4
<span class="p">-</span> Ответы по-русски, сверхлаконично. Главный формат — готовый рабочий код.

<span class="gu">## Проект</span>
<span class="p">
-</span> SaaS-LLM для криптотрейдеров: тренды, сигналы, портфолио.
<span class="p">-</span> Интеграции: Binance, CoinGecko, OpenAI. <span class="gs">**Без**</span> прямой торговли.

<span class="gu">## Стек</span>
<span class="p">
-</span> <span class="gs">**Frontend**</span> — Twig 3, ES-модули, SCSS
<span class="p">-</span> <span class="gs">**Backend/API**</span> — PHP 7.4 (PSR-12, strict_types)
<span class="p">-</span> <span class="gs">**Dev-tools**</span> — PHPStan 9, ESLint + Prettier, Stylelint, Gulp + BrowserSync + esbuild

<span class="gu">## Требования</span>
<span class="p">
-</span> UI: WCAG AA; ≥1360 px desktop, ≥768 px tablet
<span class="p">-</span> Performance: LCP ≤ 2.5 s, CSS ≤ 200 KB, JS ≤ 300 KB (gzip)

<span class="gu">## Актуальные задачи</span>
<span class="p">
1.</span> Кабинет трейдера (дашборд, рынки, активы)
<span class="p">2.</span> Уведомления о сигналах
<span class="p">3.</span> Подключение данных Binance

<span class="gu">## Формат ответов</span>
<span class="p">
-</span> Минимум текста, код без лишних комментариев.
<span class="p">-</span> На большие задачи — решение частями с подтверждением.
<span class="p">-</span> Не уверен — уточни.
<span class="p">-</span> Новый файл → покажи bash-команду.

<span class="gu">## Кодстайл (сводно)</span>
<span class="p">
-</span> Отступ 2 пробела, ≤ 100 симв./стр.
<span class="p">-</span> Англ. имена: kebab / camel.
<span class="p">-</span> <span class="gs">**JS**</span>: import/export, const &gt; let, стрелки, без <span class="sb">`for…in`</span>.
<span class="p">-</span> <span class="gs">**PHP**</span>: <span class="sb">`&lt;?php`</span>, <span class="sb">`declare(strict_types=1);`</span>, строгие типы, PDO prepared, исключения — <span class="sb">`RuntimeException`</span>.
<span class="p">-</span> <span class="gs">**HTML**</span>: двойные кавычки, закрытые теги, БЭМ-модификаторы <span class="sb">`is-`</span> / <span class="sb">`has-`</span>.
<span class="p">-</span> <span class="gs">**SCSS**</span>: ≤ 3 уровня вложенности, алфавит свойств, цвета через CSS vars.
<span class="p">-</span> <span class="gs">**Twig**</span>: только простые <span class="sb">`if/for`</span>, auto-escape on.
<span class="p">-</span> Чистота кода — PHPStan, php-cs-fixer, ESLint, Stylelint.

<span class="gu">## Безопасность</span>
<span class="p">
-</span> Валидируй ввод, XSS → <span class="err">``</span>, CSRF для POST.
<span class="p">-</span> Только prepared-запросы.
<span class="p">-</span> HTTPS + CSP, HSTS, X-Frame-Options.
<span class="p">-</span> Логи ошибок без утечек деталей.
</code></pre></div></div> <p>А далее в промте описывайте уже конкретную задачу.</p> <h2 id="vs-code-c-copilotом">VS Code c Copilot’ом</h2> <p>Не буду останавливаться на этом прекрасном и хорошо известном инструменте. Только отмечу, что в бесплатной версии есть лимит правок. Я трачу их на исправление ошибок линтера, и экономлю на агентских правках, потому что ими у меня заведует 👇</p> <h2 id="gemini-cli">Gemini CLI</h2> <p>Gemini CLI — это ИИ-помощник для терминала. Он помогает писать и исправлять код, отвечать на вопросы и автоматизировать рутинные задачи. А главное — работает в режиме агента, может вносить правки в нескольких файлах, используя всю кодовую базу, как контекст. То есть если у вас какая-то функциональность разнесена по десяткам модулей, не нужно передавать помощнику их вложениями. Просто используя собаку <code class="language-plaintext highlighter-rouge">@</code> укажите нужные папки, отдельные файлы или просто напишите в промте «проанализируй всю кодовую базу и…».</p> <h3 id="как-установить">Как установить</h3> <p>Потребуется установленные Node.js и npm. Откройте терминал и выполните команду:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">-g</span> @google/gemini-cli
</code></pre></div></div> <h3 id="как-использовать-в-vs-code">Как использовать в VS Code</h3> <ol> <li>Откройте терминал в VS Code с помощью <code class="language-plaintext highlighter-rouge">Ctrl + \</code> (или <code class="language-plaintext highlighter-rouge">Cmd + \</code> на macOS).</li> <li>Запустите Gemini, введя команду <code class="language-plaintext highlighter-rouge">gemini</code> и нажав Enter.</li> <li>Начинайте чат: задавайте вопросы или давайте команды в терминале.</li> </ol> <p>У меня Gemini CLI отвечает за тесты и CI.</p>]]></content><author><name>@supervova</name></author><category term="Разработка"/><summary type="html"><![CDATA[Последние месяца три мой ИИ-стек для вайб-кодинга устаканился. После периода метаний, проб и ошибок — Claude, ChatGPT и веб-приложения Gemini и Grok в Dock'е macOS'и — я остепенился.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://super-mark.ru/img/blog/2025/2025-07-13-chat-gpt-gemini-cli-vs-code-copilot.png"/><media:content medium="image" url="https://super-mark.ru/img/blog/2025/2025-07-13-chat-gpt-gemini-cli-vs-code-copilot.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ru"><title type="html">Как заработать миллион, найти любовь и править миром. Бесплатно, без СМС и регистрации</title><link href="https://super-mark.ru/ru/blog/2025/book-115-self-help-tips" rel="alternate" type="text/html" title="Как заработать миллион, найти любовь и править миром. Бесплатно, без СМС и регистрации"/><published>2025-06-08T00:00:00+03:00</published><updated>2025-06-08T00:00:00+03:00</updated><id>https://super-mark.ru/ru/blog/2025/book-115-self-help-tips</id><content type="html" xml:base="https://super-mark.ru/ru/blog/2025/book-115-self-help-tips"><![CDATA[<p>Собрал и структурировал советы популярной психологии на все случаи жизни. Очистил от метафизики и прочей инфоцыганщины – получилась <a href="https://www.litres.ru/book/vladimir-nikishin-18565332/115-sovetov-po-zhizni-72060589/">тоненькая книжка</a>.</p>]]></content><author><name>@supervova</name></author><category term="Проекты и мечты"/><summary type="html"><![CDATA[Опубликовал на Литрес «115 советов по жизни. От стоиков до современных психологов» – https://vk.cc/cMFgOK.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://super-mark.ru/img/blog/2025/2025-06-08-book-cover@2x.png"/><media:content medium="image" url="https://super-mark.ru/img/blog/2025/2025-06-08-book-cover@2x.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ru"><title type="html">Моя «ласточка»</title><link href="https://super-mark.ru/ru/blog/2025/pixelmator" rel="alternate" type="text/html" title="Моя «ласточка»"/><published>2025-06-07T00:00:00+03:00</published><updated>2025-06-07T00:00:00+03:00</updated><id>https://super-mark.ru/ru/blog/2025/pixelmator</id><content type="html" xml:base="https://super-mark.ru/ru/blog/2025/pixelmator"><![CDATA[<p>Женские персонажи в моей истории: скучная, надоевшая Photoshop’иха и соблазнительная незнакомка Pixelmator.</p>]]></content><author><name>@supervova</name></author><category term="Дизайн"/><summary type="html"><![CDATA[Я – тот чувак из мема, идущий под ручку с девушкой и оборачивающийся на проходящую мимо.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://super-mark.ru/img/blog/2025/2025-06-07-pixelmator.png"/><media:content medium="image" url="https://super-mark.ru/img/blog/2025/2025-06-07-pixelmator.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ru"><title type="html">Кому – бесславие, а кому – Echo Immortal</title><link href="https://super-mark.ru/ru/blog/2025/behance" rel="alternate" type="text/html" title="Кому – бесславие, а кому – Echo Immortal"/><published>2025-05-12T00:00:00+03:00</published><updated>2025-05-12T00:00:00+03:00</updated><id>https://super-mark.ru/ru/blog/2025/behance</id><content type="html" xml:base="https://super-mark.ru/ru/blog/2025/behance"><![CDATA[<p><a href="https://www.behance.net/gallery/225665651/Designing-AI-Avatars-for-Digital-Immortality">См. на Behance</a>: процесс от исследований до «выката на прод».</p>]]></content><author><name>@supervova</name></author><category term="Дизайн"/><summary type="html"><![CDATA[Годами не доходили руки. Но всё-таки я это сделал: добавил первый проект на Behance – пусть будет, раз люди просят. Веб-приложение по созданию цифровых личностей, Echo Immortal.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://super-mark.ru/img/blog/2025/2025-05-12-behance.png"/><media:content medium="image" url="https://super-mark.ru/img/blog/2025/2025-05-12-behance.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ru"><title type="html">Vibe Coding: у нас с Claude.ai на двоих IQ под миллион</title><link href="https://super-mark.ru/ru/blog/2025/vibe-coding" rel="alternate" type="text/html" title="Vibe Coding: у нас с Claude.ai на двоих IQ под миллион"/><published>2025-03-28T00:00:00+03:00</published><updated>2025-03-28T00:00:00+03:00</updated><id>https://super-mark.ru/ru/blog/2025/vibe-coding</id><content type="html" xml:base="https://super-mark.ru/ru/blog/2025/vibe-coding"><![CDATA[<p>Vibe Coding представляет собой инновационный подход к разработке программного обеспечения, основанный на использовании искусственного интеллекта в качестве партнера в процессе создания кода. Ключевыми аспектами успешного применения Vibe Coding являются правильный выбор AI-модели, эффективное планирование проектов, грамотная интеграция с инструментами разработки и понимание особенностей взаимодействия с искусственным интеллектом в процессе создания программных решений.</p> <h2 id="выбор-оптимальной-ai-модели">Выбор оптимальной AI-модели</h2> <p>При выборе модели для Vibe Coding необходимо учитывать несколько критически важных факторов.</p> <ul> <li><a href="https://vcc.community/ru/education/hub/benchmarks/">Размер контекстного окна</a> определяет объем текста, который модель может “удерживать в памяти” при генерации ответа, что позволяет понимать сложные кодовые базы, генерировать связанный код для нескольких файлов и сохранять последовательность в длительных сессиях разработки.</li> <li><a href="https://vcc.community/ru/education/hub/benchmarks/">Качество генерируемого кода</a> включает синтаксическую и семантическую корректность, следование лучшим практикам, оптимизацию, а также читаемость и поддерживаемость.</li> <li>Понимание специфических языков и фреймворков особенно важно, поскольку различные модели демонстрируют <a href="https://vcc.community/ru/education/hub/benchmarks/">разный уровень компетенции в конкретных технологиях программирования</a>.</li> <li><a href="https://vcc.community/ru/education/hub/benchmarks/">Скорость и латентность</a> существенно влияют на плавность рабочего процесса и общий пользовательский опыт.</li> <li>Также необходимо учитывать <a href="https://vcc.community/ru/education/hub/benchmarks/">стоимость и доступность моделей</a>, а также их мультимодальные возможности, которые позволяют работать не только с текстом, но и с изображениями (например, генерировать код на основе скриншотов или диаграмм).</li> </ul> <p>Выбор конкретной модели должен основываться на специфике проекта и потребностях разработчика. Для начинающих в Vibe Coding рекомендуется выбирать модели, обеспечивающие баланс между качеством кода и удобством использования, такие как GPT-4o через <a href="https://vcc.community/ru/education/hub/benchmarks/">Claude 3 Sonnet, ChatGPT Plus или Gemini Pro (доступен бесплатно)</a>.</p> <p>Для профессиональной разработки оптимальным выбором будут GPT-4o через API, Claude 3 Opus (идеален для проектов с большой кодовой базой) или <a href="https://vcc.community/ru/education/hub/benchmarks/">DeepSeek Coder как более доступная альтернатива</a>.</p> <p>В проектах с высокими требованиями к конфиденциальности следует обратить внимание на Llama 3 70B, CodeLlama 34B для локального запуска на мощном оборудовании или Mixtral 8x7B для менее мощного оборудования.</p> <h3 id="в-частности">В частности</h3> <p><strong>Gemini (Google)</strong> предлагает отличное понимание технической документации и API, хорошую интеграцию с экосистемой Google и <a href="https://vcc.community/ru/education/hub/benchmarks/">сильные мультимодальные возможности</a>. Однако модель имеет меньшее контекстное окно по сравнению с некоторыми конкурентами и может уступать <a href="https://vcc.community/ru/education/hub/benchmarks/">в сложных задачах программирования</a>.</p> <p><strong>Llama 3 (Meta)</strong> представляет собой мощную открытую модель с возможностью локального запуска без передачи данных третьим сторонам, открытым исходным кодом и хорошим соотношением производительности и ресурсоемкости<a href="https://vcc.community/ru/education/hub/benchmarks/">1</a>. Среди недостатков - уступающее проприетарным моделям качество кода и меньшее контекстное окно<a href="https://vcc.community/ru/education/hub/benchmarks/">1</a>.</p> <h3 id="от-себя">От себя</h3> <p>Мой топ-3: <a href="https://claude.ai/">Claude</a>, <a href="https://grok.com/">Grok</a> и <a href="https://chatgpt.com/">ChatGPT</a>.</p> <h2 id="планирование-и-подготовка-к-разработке">Планирование и подготовка к разработке</h2> <p>Эффективное планирование является критически важным элементом успешного Vibe Coding, позволяющим избежать многих проблем на последующих этапах разработки.</p> <h3 id="vibe-pming-планирование-с-помощью-ai">Vibe PMing: планирование с помощью AI</h3> <p>Одной из лучших практик является так называемый “Vibe PMing” - подход к планированию проекта с помощью AI. При старте нового проекта рекомендуется попросить AI создать readme-файл, который будет включать <a href="https://substack.com/home/post/p-159039821">требования, технический стек и основные этапы проекта (до 5 milestones)</a>.</p> <p>Этот подход эффективен тем, что AI берет на себя работу по составлению спецификации, а разработчик лишь вносит корректировки и предоставляет обратную связь. Например, можно попросить AI написать readme для симулятора самолета с пятью этапами разработки, где первый этап будет просто отображение 3D-модели самолета на экране.</p> <p>Интересно отметить, что по опыту некоторых пользователей, Grok может быть более эффективен для планирования, <a href="https://substack.com/home/post/p-159039821">чем Claude 3 Sonnet</a>. Поэтому может быть полезно составить readme с помощью Grok, а затем скопировать его <a href="https://substack.com/home/post/p-159039821">в Cursor или другую среду разработки</a>.</p> <h3 id="поддержание-простоты-технического-стека">Поддержание простоты технического стека</h3> <p>Одно из важнейших правил Vibe Coding - поддержание <a href="https://substack.com/home/post/p-159039821">максимально простого технического стека</a>. Чем проще технический стек, тем меньше вероятность того, что AI нарушит работу приложения.</p> <p>Избыточно сложные технические решения могут создавать трудности для AI при генерации кода, что приведет к увеличению количества ошибок и проблем. Простота стека обеспечивает более предсказуемые результаты и облегчает процесс устранения возможных неполадок.</p> <h2 id="интеграция-с-инструментами-разработки">Интеграция с инструментами разработки</h2> <p>Выбор инструментов разработки и их интеграция с AI-моделями является важным фактором успешного Vibe Coding.</p> <h3 id="популярные-инструменты-для-vibe-coding">Популярные инструменты для Vibe Coding</h3> <p><strong>GitHub Copilot</strong> использует модели OpenAI, оптимизированные для генерации кода, что обеспечивает высокое качество предложений, но имеет ограниченное контекстное окно (<q>VS Code с Copilot’ом – стал моим основным инструментом кодирования<q> – Вл.Н.).</q></q></p> <p><strong>Cursor</strong> поддерживает несколько моделей, включая GPT-4 и GPT-3.5 через интеграцию с OpenAI, Claude через интеграцию с Anthropic, а также предоставляет возможность <a href="https://vcc.community/ru/education/hub/benchmarks/">подключения пользовательских моделей через API</a>.</p> <p><strong>WindSurf</strong> предлагает интеграцию с GPT-4 и GPT-3.5, Claude, а также с локальными моделями <a href="https://vcc.community/ru/education/hub/benchmarks/">через API</a>.</p> <p><strong>JetBrains AI Assistant</strong> поддерживает GPT-4 через интеграцию с OpenAI, собственные модели JetBrains и предоставляет <a href="https://vcc.community/ru/education/hub/benchmarks/">возможность подключения пользовательских моделей</a>.</p> <p>Для пользователей, предпочитающих локальные решения, существуют такие инструменты как <strong>Ollama</strong> и <strong>LM Studio</strong>, которые позволяют запускать различные модели локально, включая <a href="https://vcc.community/ru/education/hub/benchmarks/">Llama 3, CodeLlama, Mixtral, Mistral, DeepSeek Coder и другие открытые модели</a>.</p> <h3 id="выбор-инструмента-в-зависимости-от-проекта-и-модели">Выбор инструмента в зависимости от проекта и модели</h3> <p>При выборе инструмента для Vibe Coding необходимо учитывать особенности проекта, предпочитаемую модель AI и требования к конфиденциальности:</p> <ul> <li>Для проектов, требующих максимального качества генерации кода без особых требований к конфиденциальности, оптимальным выбором будут инструменты с поддержкой моделей OpenAI или Claude.</li> <li>Для проектов с высокими требованиями к конфиденциальности рекомендуется использовать локальные решения, позволяющие запускать модели без передачи данных внешним сервисам.</li> <li>Для образовательных проектов и быстрого прототипирования можно выбирать инструменты с поддержкой более доступных моделей, таких как Gemini Pro или Claude 3 Haiku<a href="https://vcc.community/ru/education/hub/benchmarks/">1</a>.</li> </ul> <h2 id="практические-рекомендации-по-использованию-vibe-coding">Практические рекомендации по использованию Vibe Coding</h2> <h3 id="работа-с-контекстом-и-инструкциями-для-ai">Работа с контекстом и инструкциями для AI</h3> <p>Качество генерируемого кода напрямую зависит от качества предоставляемого контекста и инструкций. Рекомендуется:</p> <ul> <li>Детально описывать требуемую функциональность и ожидаемое поведение кода.</li> <li>Предоставлять примеры существующего кода проекта для сохранения стилистической последовательности.</li> <li>Разбивать сложные задачи на более простые подзадачи, что позволяет AI лучше понимать контекст.</li> <li>Указывать предпочитаемые библиотеки, фреймворки и паттерны проектирования.</li> </ul> <h3 id="проверка-и-тестирование-сгенерированного-кода">Проверка и тестирование сгенерированного кода</h3> <p>Важно помнить, что Vibe Coding является инструментом, дополняющим навыки разработчика, а не заменяющим их. Критическое мышление, проверка и тестирование сгенерированного кода остаются <a href="https://vcc.community/ru/education/hub/benchmarks/">важными аспектами процесса разработки</a>.</p> <p>Рекомендуется:</p> <ul> <li>Всегда проверять сгенерированный код на синтаксические и логические ошибки.</li> <li>Тестировать функциональность кода на различных сценариях использования.</li> <li>Анализировать производительность и оптимизацию сгенерированного кода.</li> <li>Оценивать соответствие кода лучшим практикам и стандартам проекта.</li> </ul> <h2 id="заключение">Заключение</h2> <p>Vibe Coding представляет собой мощный подход к разработке программного обеспечения, позволяющий существенно повысить эффективность и скорость создания кода. Для достижения максимальных результатов важно следить за новыми разработками и регулярно оценивать, соответствует ли текущий <a href="https://vcc.community/ru/education/hub/benchmarks/">выбор модели потребностям проекта</a>. Экспериментирование с разными моделями и комбинирование их для разных задач может привести к оптимальному <a href="https://vcc.community/ru/education/hub/benchmarks/">рабочему процессу Vibe Coding</a>.</p> <p>Независимо от выбранной модели и инструментов, критическое мышление, проверка и тестирование сгенерированного кода остаются важнейшими аспектами процесса разработки, обеспечивающими высокое качество конечного продукта.</p> <h3 id="от-себя-1">От себя</h3> <p>Всегда нужно изучать документацию технологий, используемых на текущем этапе проекта.</p> <ul> <li>Разрабатываете файловый менеджер на Tauri – почитайте статью о плагине и API <code class="language-plaintext highlighter-rouge">fs</code>.</li> <li>Переделываете скрипты, написанные на jQuery и Bootstrap – попросите ChatGPT подобрать темы, а затем по одной объяснить их простыми словами: основы работы с DOM, событиями, AJAX и CSS.</li> </ul> <p>Досконально изучать не нужно – всё равно не получится. Но хотя бы, чтобы в общих чертах понимать проблематику. Обязательно ведите конспекты и собирайте личную базу знаний. Я лично сохраняю конспекты в формате markdown в папку <code class="language-plaintext highlighter-rouge">notes</code> в домашней директории <code class="language-plaintext highlighter-rouge">macOS</code>. Структурирую с помощью хештегов и вложенных папок. Редактирую и связываю файлы ссылками в редакторе Obsidian.</p> <p>Кроме того, я считаю, что без знаний основ программирования и используемых технологий, вайб-кодинг вам не поможет. Всё равно нужно немножко подучиться.</p>]]></content><author><name>@supervova</name></author><category term="Разработка"/><summary type="html"><![CDATA[Мне кажется, что блоги, контент-маркетинг и пр. диджитал первых двух десятилетий третьего тысячелетия растеряли почти весь смысл. Трафик не привлечешь, экспертизу не выдашь. Единственное, что эти штуки ещё могут сделать, так это быть признаком жизни для «малотиражек» фрилансеров и агентств. Поэтому стараться не буду, попрошу лучше Perplexity подготовить deep research по теме, которая меня сейчас интересует, – vibe coding.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://super-mark.ru/img/blog/2025/2024-03-28-vibe-coding.jpg"/><media:content medium="image" url="https://super-mark.ru/img/blog/2025/2024-03-28-vibe-coding.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ru"><title type="html">AI-расширения VS Code: nothing compares to C…</title><link href="https://super-mark.ru/ru/blog/2024/ai-vs-code-extensions" rel="alternate" type="text/html" title="AI-расширения VS Code: nothing compares to C…"/><published>2024-12-28T00:00:00+03:00</published><updated>2024-12-28T00:00:00+03:00</updated><id>https://super-mark.ru/ru/blog/2024/ai-vs-code-extensions</id><content type="html" xml:base="https://super-mark.ru/ru/blog/2024/ai-vs-code-extensions"><![CDATA[<p>Из расширений порадовал только Copilot. Codeium оказался полезен только для правки ошибок Eslint / Stylelint и экономии токенов бесплатной версии Copilot’а. Остальные мало в чем помогают и проигрывают, как Cursor’у, так и самостоятельным приложениям ChatGPT и Claude.</p> <p>Ну, и <a href="/ru/blog/2024/windsurf">про Windsurf (есть 2-недельный «пробник») я уже писал</a> – хорошо, дешевле, но не Cursor.</p> <h2 id="copilot">Copilot</h2> <p>Встроенный ИИ-помощник VS Code – единственная, на мой взгляд, реальная бесплатная альтернатива Cursor’у. Удобный интерфейс; «под капотом» в бесплатной версии – ChatGPT и Claude.</p> <h3 id="возможности-бесплатной-версии">Возможности бесплатной версии</h3> <ul> <li><strong>Автодополнение кода:</strong> до 2000 автодополнений в месяц (примерно 80 в день).</li> <li><strong>Чат:</strong> до 50 запросов в чате в месяц.</li> <li><strong>Доступ к моделям:</strong> включает модели GPT-4o от OpenAI и Claude 3.5 Sonnet от Anthropic.</li> </ul> <p><img src="https://i.imgur.com/Q5hBsmx.png" alt="Выбор модели в Copilot"/></p> <h3 id="установка-и-активация">Установка и активация</h3> <ol> <li>Установите расширение GitHub Copilot в Visual Studio Code.</li> <li>Авторизуйтесь через учетную запись GitHub, имеющую активную подписку Copilot.</li> <li> <p>Проверьте настройки <code class="language-plaintext highlighter-rouge">github.copilot.advanced</code> в <code class="language-plaintext highlighter-rouge">settings.json</code> для тонкой настройки поведения:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"github.copilot.advanced"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"inlineSuggest.enable"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"autoComplete.enable"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"suggestions.showOnDemand"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div> </div> </li> </ol> <h3 id="основные-функции">Основные функции</h3> <ul> <li> <p><strong>Генерация кода в панели Copilot Edits</strong>. Откройте редактор Copilot’а: macOS – <code class="language-plaintext highlighter-rouge">⇧⌘I</code>; Windows – <code class="language-plaintext highlighter-rouge">Shift</code> + <code class="language-plaintext highlighter-rouge">Ctrl</code> + <code class="language-plaintext highlighter-rouge">I</code>. Добавьте, если нужно, кнопкой-плюсиком файлы для редактирования/контекста. Опишите задачу. Если сможете, проверьте предложенный код. Примите его или откажитесь.</p> <p><img src="https://i.imgur.com/LQpZv8u.png" alt="Copilot Edits"/></p> </li> <li> <p><strong>Генерация кода на основе комментариев</strong>. Напишите комментарий с описанием задачи. Пример:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// Функция для вычисления факториала числа</span>
</code></pre></div> </div> <p>Copilot предложит соответствующую реализацию.</p> </li> <li> <p><strong>Автодополнение</strong>. Начните писать код, и Copilot будет предлагать продолжение. Пример:</p> <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">fetchData</span> <span class="o">=</span> <span class="k">async </span><span class="p">(</span><span class="nx">url</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</code></pre></div> </div> <p>Copilot автоматически добавит шаблон асинхронной функции с обработкой ответа.</p> </li> <li> <p><strong>Оптимизация и пояснение существующего кода</strong>. Выделите фрагмент кода, щелкните правой кнопкой мыши и выберите:</p> <ul> <li>“Explain code”</li> <li>“Refactor code”</li> </ul> </li> </ul> <h3 id="советы">Советы</h3> <ol> <li><strong>Используйте контекст проекта</strong>. Откройте все связанные файлы, чтобы Copilot мог анализировать больше данных.</li> <li><strong>Анализ требований</strong>. Убедитесь, что Copilot понимает контекст. Предоставьте точные и понятные комментарии.</li> <li><strong>Генерация псевдокода</strong>. Напишите шаги на естественном языке или в псевдокоде, чтобы Copilot мог предложить наиболее точное решение.</li> <li><strong>Подтверждение предложений</strong>. Пересматривайте предложения Copilot и принимайте их с помощью <code class="language-plaintext highlighter-rouge">Tab</code>, либо изменяйте вручную для соответствия требованиям.</li> </ol> <h2 id="нативные-приложения-chatgpt-и-claude">«Нативные» приложения ChatGPT и Claude</h2> <p>Когда вы израсходуете месячный лимит бесплатной версии Copilot’а, до окончания расчетного периода можно пользоваться «родными» приложениями ChatGPT и Claude. Не так удобно, потому что контент придется ограничить четырьмя открытыми панелями или добавлять загрузкой последних версий файлов либо «копипастой»… Но, с другой стороны, модели всё те же – что и в Copilot’е, что и в Cursor’е.</p> <p><a href="https://claude.ai/download">Десктопные версии Claude</a> – по сути, обёртка для веб-приложения самой умной модели для программирования. Интерфейс, к сожалению, столь же сырой, как и в браузере.</p> <p><a href="https://help.openai.com/en/articles/10119604-work-with-apps-on-macos">ChatGPT</a> удобнее, но, насколько понимаю, выпущен пока только под macOS. Далее следует его «прямая речь».</p> <blockquote> <p>Для помощи в кодировании убедитесь, что приложение запущено, затем в строке чата ChatGPT нажмите кнопку «Work With Apps» и выберите совместимое приложение (см. ниже). При отправке сообщения ChatGPT будет учитывать содержимое выбранных приложений, улучшая качество ответов.</p> <p>Функция поддерживает текстовые редакторы (Apple Notes, Notion, TextEdit, Quip), кодовые редакторы (Xcode, VS Code, Jetbrains и другие) и терминалы (Terminal, iTerm, Warp, Prompt). При подготовке ответа ChatGPT учитывает полный контент открытых окон редакторов или последние 200 строк терминала, с учетом выделенного текста для более точного контекста.</p> <p>Для вызова модального окна с мини-приложением в VS Code надо нажать <code class="language-plaintext highlighter-rouge">⌥⇧1</code>. Выделите фрагмент кода и затем вводите промт. Чтобы работать с несколькими файлами одновременно, открывайте их в разделенных редакторах.</p> <p>Для работы с большинством приложений требуется разрешение на доступ к API доступности macOS, которое можно настроить в системных настройках. Для VS Code необходимо установить специальное расширение. Вы можете управлять совместимыми приложениями и их настройками в разделе ChatGPT: Settings &gt; Work with Apps &gt; Manage Apps.</p> </blockquote> <p>Чтобы добавить в контекст ChatGPT до 4 файлов, откройте их в разделенных редакторах.</p> <p><img src="https://i.imgur.com/WLOIzQG.png" alt="Контекст из разделенных редакторов"/></p> <h2 id="codeium">Codeium</h2> <p><strong>2 млн</strong> скачиваний; 1403 оценки; средняя – <strong>5</strong>.</p> <p>Базовая функциональность бесплатна. Неплох для исправления ошибок Eslint, Stylelint, а также для написания JDoc’ов. Автозаполнение неудачное.</p> <p>В бесплатной версии доступна только переделанная Llama (Codeium называет ее Basic Model). Подключить ChatGPT или Claude с помощью API-ключей нельзя – они поставляются только «вшитыми» в платную версию.</p> <h2 id="codegpt">CodeGPT</h2> <p><strong>1,5 млн</strong> скачиваний; 227 оценок; средняя – <strong>4</strong>.</p> <p>Может работать на Ollam’е и на ChatGPT (надо ввести API-ключ) но количество обращений ограничено 8 в день.</p> <ul> <li>После установки введите ваш API-ключ OpenAI в настройках расширения.</li> <li>Используйте командную панель для доступа к функциям CodeGPT.</li> <li>Выделите код и выберите соответствующую команду для получения помощи от AI.</li> </ul> <h2 id="cline">Cline</h2> <p><strong>208 тыс.</strong> скачиваний; 84 оценки; средняя – <strong>5</strong>.</p> <p>Лучше всего работает с Claude, о чем постоянно напоминает. Но Claude платный – для использования надо закупать токены по схеме Pay-as-you-go.</p> <p>Однако можно использовать бесплатную Ollam’у. Которая, впрочем, с большими задачами – типа, «перепиши боковую панель @index.pug на React, используй компоненты @src» – не справляется.</p> <h3 id="инструкции-подготовленные-chatgpt">Инструкции, подготовленные ChatGPT</h3> <ol> <li> <p><strong>Установите Ollama:</strong></p> <p>Скачайте и установите Ollama, инструмент для локального запуска крупных языковых моделей (LLM), с <a href="https://ollama.com/">официального сайта</a>.</p> </li> <li> <p><strong>Установите расширение Cline:</strong></p> <ul> <li>Откройте Visual Studio Code.</li> <li>Перейдите в раздел расширений, нажав на значок Extensions в боковой панели.</li> <li>В строке поиска введите “Cline” и установите соответствующее расширение.</li> </ul> </li> <li> <p><strong>Настройте Cline для использования Ollama:</strong></p> <ul> <li>После установки расширения Cline перейдите в его настройки.</li> <li>В разделе настроек выберите Ollama в качестве провайдера API.</li> <li>Укажите модель, которую вы хотите использовать, например, <code class="language-plaintext highlighter-rouge">llama3.2</code>.</li> <li>Сохраните изменения, нажав кнопку “Done”.</li> </ul> <p>Выбор модели.</p> <ul> <li><strong>CodeLlama</strong> – для кодирования. Если ваша основная задача связана с программированием, будет лучшим выбором благодаря своей специализации на коде.</li> <li><strong>Llama 3.1</strong> – для сложных аналитических задач. Если вам нужно обрабатывать большие объемы данных или выполнять сложные вычисления.</li> <li><strong>Llama 3.2</strong> – для мультимодальных приложений. Если вы планируете использовать текстовые и визуальные данные одновременно или работать на мобильных устройствах, то будет наиболее подходящей моделью.</li> </ul> </li> <li> <p><strong>Загрузите выбранную модель в Ollama:</strong></p> <ul> <li>Откройте терминал на вашем компьютере.</li> <li>Введите команду для загрузки модели, например:</li> </ul> <p>```sh ollama pull llama3.2</p> </li> </ol> <ul> <li>Дождитесь завершения загрузки модели.</li> </ul> <ol> <li> <p><strong>Запустите Ollama:</strong></p> <p>Убедитесь, что Ollama запущен и работает в фоновом режиме. Даже если у вас установлено приложение Ollama с графическим интерфейсом, рекомендуется запускать серверную часть Ollama через терминал для обеспечения стабильного соединения.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ollama serve
</code></pre></div> </div> <p>☝️🧐 <strong>Команда <code class="language-plaintext highlighter-rouge">ollama run &lt;model_name&gt;</code> для работы с Cline не подходит.</strong> А то, что при запуске сервере непонятно, какая модель используется сейчас неважно. Модель выбирается динамически согласно настройкам в Cline. В примере – это самая подходящая для кодирования модель Codellama.</p> <p><img src="https://i.imgur.com/Up25dIL.png" alt="Настройки Cline"/></p> </li> <li> <p><strong>Используйте Cline с моделью Ollama:</strong></p> <p>Теперь вы можете вводить запросы в Cline, и они будут обрабатываться с использованием выбранной модели Ollama.</p> </li> </ol> <h2 id="continuedev">Continue.dev</h2> <p><strong>505 тыс.</strong> скачиваний; 65 оценки; средняя – <strong>4,5</strong>.</p> <h3 id="инструкции-подготовленные-chatgpt-1">Инструкции, подготовленные ChatGPT</h3> <ol> <li> <p><strong>Ollama</strong>. Скачайте и установите <a href="https://ollama.com">Ollama</a>, который позволяет запускать модели ИИ локально.</p> </li> <li> <p><strong>Модель ИИ</strong>. Выберите модель ИИ, соответствующую вашим потребностям, например, <strong>Llama 3</strong> или <strong>Code Llama</strong>. Вы можете загрузить эти модели с помощью Ollama, используя следующие команды:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ollama pull codellama
ollama pull starcoder2:3b
</code></pre></div> </div> </li> <li> <p>Получите API ключ. <a href="https://console.mistral.ai/codestral">На сайте Mistral AI, в разделе Codestral</a> создайте API ключ.</p> </li> <li> <p><strong>Установите расширение Continue</strong>.</p> <ul> <li>Откройте VS Code.</li> <li>Перейдите в раздел расширений, нажав на иконку расширений в боковой панели или нажав <code class="language-plaintext highlighter-rouge">Ctrl+Shift+X</code>.</li> <li>Найдите “Continue” и нажмите кнопку <code class="language-plaintext highlighter-rouge">Установить</code> для расширения Continue .</li> </ul> </li> <li> <p><strong>Настройте Continue.dev</strong>.</p> <ul> <li>После установки в боковой панели появится иконка Continue. Нажмите на нее, чтобы открыть интерфейс Continue.</li> <li>Откройте настройки, нажав на значок шестеренки в правом нижнем углу окна Continue.</li> <li> <p>Добавьте конфигурацию вашей модели ИИ в файл <code class="language-plaintext highlighter-rouge">~/.continue/config.json</code>. Вот пример конфигурации для использования Code Llama:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"models"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"CodeLlama"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"provider"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ollama"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"model"</span><span class="p">:</span><span class="w"> </span><span class="s2">"codellama"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"apiBase"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:11434/"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">],</span><span class="w">
  </span><span class="nl">"tabAutocompleteModel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Codestral"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"provider"</span><span class="p">:</span><span class="w"> </span><span class="s2">"mistral"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"model"</span><span class="p">:</span><span class="w"> </span><span class="s2">"codestral-latest"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"apiKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"[API-KEY]"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div> </div> </li> </ul> <p>И для Codestral / Mistral API:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">   </span><span class="nl">"tabAutocompleteModel"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
     </span><span class="nl">"title"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Starcoder2 3b"</span><span class="p">,</span><span class="w">
     </span><span class="nl">"provider"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ollama"</span><span class="p">,</span><span class="w">
     </span><span class="nl">"model"</span><span class="p">:</span><span class="w"> </span><span class="s2">"starcoder2:3b"</span><span class="p">,</span><span class="w">
     </span><span class="nl">"apiBase"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:11434/"</span><span class="w">
   </span><span class="p">}</span><span class="w">
</span></code></pre></div> </div> </li> <li> <p><strong>Запустите ваши модели*</strong>. Убедитесь, что Ollama запущен и выбранные вами модели активны. Возможно, вам потребуется запустить сервер для ваших моделей, если это необходимо.</p> </li> <li> <p><strong>Использование Continue.dev</strong>.</p> <ul> <li>Как только все настроено, вы можете начать кодировать! Используйте функции автозаполнения, объяснения кода и рефакторинга прямо в VS Code.</li> <li>Выделяйте участки кода и используйте сочетания клавиш для взаимодействия с возможностями ИИ Continue.</li> </ul> </li> </ol>]]></content><author><name>@supervova</name></author><category term="Разработка"/><summary type="html"><![CDATA[Ради исследовательского интереса попробовал бесплатные альтернативы Cursor.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://super-mark.ru/img/blog/2024/12-28/vscode.png"/><media:content medium="image" url="https://super-mark.ru/img/blog/2024/12-28/vscode.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry xml:lang="ru"><title type="html">Adobe Illustrator для веб-дизайнера 13) Печать</title><link href="https://super-mark.ru/ru/blog/2024/illustrator-printing" rel="alternate" type="text/html" title="Adobe Illustrator для веб-дизайнера 13) Печать"/><published>2024-12-27T00:00:00+03:00</published><updated>2024-12-27T00:00:00+03:00</updated><id>https://super-mark.ru/ru/blog/2024/illustrator-printing</id><content type="html" xml:base="https://super-mark.ru/ru/blog/2024/illustrator-printing"><![CDATA[<details class="accordion is-stand-alone"> <summary>Содержание серии</summary> <div> <p class="petit">Материалы цикла представляют собой мои личные конспекты. Нет времени превращать их в полноценные обучающие статьи, и поэтому свободное отношение к слову может расстроить граммар-наци. Также не исключено, что использование каких-то картинок нарушит авторские права. Это нехорошо, но давно не помню, где и что брал... Я предупредил.</p> <ol class="list is-nested-ol"> <li> <a href="/ru/blog/2019/illustrator-web-design">Введение</a> <ol class="list is-nested-ol"> <li> <a href="/ru/blog/2020/illustrator-files-artboards">💾 Файлы, монтажные области</a> </li> <li> <a href="/ru/blog/2020/illustrator-layers">🗓 Cлои</a> </li> </ol> </li> <li> <a href="/ru/blog/2020/illustrator-transformation">🗜 Трансформация объектов</a> <ol class="list is-nested-ol"> <li> <a href="/ru/blog/2020/illustrator-transformation-moving-aligning-distributing">Перемещение, выравнивание и распределение объектов</a> </li> </ol> </li> <li> <a href="/ru/blog/2020/lines-and-grids">🎼 Линии и сетки</a> </li> <li> <a href="/ru/blog/2020/edit-paths">➰ Контуры</a> <ol class="list is-nested-ol"> <li> <a href="/ru/blog/2020/pen-curvature">🖋 Перо и инструмент «Кривизна» (Curvature)</a> </li> <li> <a href="/ru/blog/2020/beautiful-lines">👱‍♀️ Правила красивых контуров</a> </li> </ol> </li> <li> <a href="/ru/blog/2020/illustrator-stroke">✍️ Обводка</a> </li> <li> <a href="/ru/blog/2020/illustrator-fill">🎨 Цвет, заливка</a> </li> <li> <a href="/ru/blog/2020/illustrator-shapes">🔶 Фигуры</a> </li> <li> <a href="/ru/blog/2021/illustrator-text">🔠 Текст</a> </li> <li> <a href="/ru/blog/2021/illustrator-graphics">🏰 Векторная графика: техники рисунка</a> <ol class="list is-nested-ol"> <li> <a href="/ru/blog/2021/illustrator-shape-builder">💪 Shape Builder Tool (Создание фигур) – ⇧M</a> </li> <li> <a href="/ru/blog/2021/illustrator-live-paint">✏️ Рисование фигур линиями и инструментом быстрой заливки</a> </li> <li> <a href="/ru/blog/2021/illustrator-appearance">❤️ «Оформление» (Appearance) – палитра и раздел палитры «Свойства»</a> </li> <li> <a href="/ru/blog/2021/illustrator-guides-and-rulers">📐 Направляющие и линейки</a> </li> <li> <a href="/ru/blog/2022/illustrator-blend">🚶🏻‍♂️ Переходы (Blend)</a> </li> <li> <a href="/ru/blog/2023/perspective">🎁 Перспектива</a> </li> <li> <a href="/ru/blog/2023/illustrator-graphic-styles">🎩 Cтили графики</a> </li> <li> <a href="/ru/blog/2023/illustrator-symbols">🔣 Символы</a> </li> <li> <a href="/ru/blog/2024/illustrator-meshes">🏀 Сетчатые объекты (meshes)</a> </li> <li> <a href="/ru/blog/2024/illustrator-eyelashes-eyebrows-hair">👩 Ресницы, брови, волосы</a> </li> <li> <a href="/ru/blog/2024/illustrator-brushes-and-eraser">🖌 Кисти и ластик</a> </li> <li> <a href="/ru/blog/2024/illustrator-circular-distribution">☀️ Распределение объектов по кругу</a> </li> </ol> </li> <li> <a href="/ru/blog/2021/illustrator-tips-and-tricks">🦊 Советы и хитрости</a> </li> <li> <a href="/ru/blog/2024/illustrator-tools">🛠 Инструменты+</a> </li> <li> <a href="/ru/blog/2024/illustrator-hotkeys">⌨️ Горячие клавиши</a> </li> <li> <a href="/ru/blog/2024/illustrator-printing">🖨 Печать</a> </li> </ol> </div> </details> <h2 id="цветовые-модели-и-их-конвертация">Цветовые модели и их конвертация</h2> <p><img src="/assets/img/blog/2024/12-28/document-color-models.png" alt="Цветовые модели"/></p> <p>Переключение режима между RGB и CMYK доступно через <strong>File ➜ Document Color Mode ➜ RGB/CMYK</strong>.</p> <p>⚠️ <strong>Важно.</strong> Цветовая гамма CMYK более ограничена, и цвета будут выглядеть тусклее по сравнению с RGB.</p> <p>Рекомендуется разрабатывать дизайн в RGB и переводить в CMYK перед финальной печатью. При конвертации вручную округляйте значения с десятичными дробями до целых процентов.</p> <p><img src="https://i.imgur.com/w5FGBbB.png" alt="Swatch Options"/></p> <h2 id="плашечные-и-триадные-цвета-для-цветной-печати">Плашечные и триадные цвета для цветной печати</h2> <p>См. <a href="https://helpx.adobe.com/ru/indesign/using/spot-process-colors.html">официальную справку Adobe</a>.</p> <ul> <li><strong>Триадные цвета (process colors):</strong> Используют CMYK (голубой, пурпурный, желтый, черный). Применяются для полноцветной печати.</li> <li><strong>Плашечные цвета (spot colors):</strong> Заранее смешанные краски, точные по цветопередаче. Используются для специфических цветов, которые сложно воспроизвести в CMYK, например, Pantone.</li> </ul> <p>⚠️ <strong>Совет:</strong> Задавайте плашечные цвета из поддерживаемой типографией системы соответствия, например Pantone.</p> <p><strong>Pantone в Illustrator:</strong> <code class="language-plaintext highlighter-rouge">Swatch Libraries ➜ Color Books ➜ PANTONE…</code></p> <p><img src="https://i.imgur.com/4KHL0vk.png" alt="Color Books"/></p> <h2 id="подбор-плашечного-цвета-для-замены-триадному">Подбор плашечного цвета для замены триадному</h2> <ul> <li>Выберите объект и откройте <strong>Edit ➜ Edit Colors ➜ Recolor Artwork</strong>.</li> <li> <p>Перейдите в библиотеку цветов Pantone.</p> <p><img src="https://i.imgur.com/FpzhJHH.png" alt="Recolor Artwork"/></p> </li> <li>Для работы с прозрачностью: <ul> <li>Сначала переведите смешанные цвета в обычные.</li> <li> <p>Создайте мозаичное изображение (<strong>Object ➜ Rasterize ➜ Create Object Mosaic</strong>).</p> <p><img src="https://i.imgur.com/ZrRJURd.png" alt="Количество столбцов и строк в мозаике"/></p> </li> </ul> </li> <li>Сформируйте новую палитру оттенков из созданной мозаики, удалив ненужные цвета.</li> <li> <p>Раскрасьте объект через <strong>Live Paint Bucket</strong> и назначьте палитру.</p> <p><img src="https://i.imgur.com/KmoVZXD.png" alt="Live Paint Bucket"/></p> </li> <li>Выберите палитру и каталог Pantone для финальной работы.</li> </ul> <h2 id="подготовка-иллюстраций-к-цветоделению">Подготовка иллюстраций к цветоделению</h2> <ul> <li>Убедитесь, что документ в CMYK.</li> <li>Переведите маски в составные контуры, чтобы избежать артефактов.</li> <li>Включите <strong>Window ➜ Separations Preview</strong>. Отключите ненужные цвета.</li> </ul> <p>👉 <strong>Подробнее:</strong> <a href="https://helpx.adobe.com/ru/illustrator/using/printing-color-separations.html">Подготовка к цветоделению в Illustrator</a>.</p> <h2 id="выпуск-за-обрез-bleed-и-типографские-метки">Выпуск за обрез (bleed) и типографские метки</h2> <ul> <li> <p>Настройте выпуск через <strong>Document Setup</strong>:</p> <p><img src="https://i.imgur.com/STQOEIw.png" alt="Document Setup"/></p> <ul> <li>Укажите значение выпуска: стандартно 5 мм (3 мм для простых макетов).</li> <li> <p>Выровняйте фон по границам выпуска.</p> <p><img src="https://i.imgur.com/SEnS13Y.png" alt="Выравнивание по границам выпуска"/></p> </li> </ul> </li> <li> <p>Для печати в PDF или PostScript:</p> <ul> <li>Настройте размер через вкладку <strong>Media Size</strong>.</li> <li>Увеличьте ширину/высоту на 70–100 пунктов для меток.</li> <li> <p>Включите <strong>All Printer’s Marks</strong> и настройте <strong>Offset</strong> (20–60 пунктов).</p> <p><img src="https://i.imgur.com/NP2d1rh.png" alt="Увеличить Offset"/></p> </li> </ul> </li> </ul>]]></content><author><name>@supervova</name></author><category term="Illustrator"/><summary type="html"><![CDATA[Предпечатная подготовка в Adobe Illustrator – ключевой этап создания печатных материалов: работа с цветами, настройка выпусков за обрез и использование типографских меток.]]></summary></entry><entry xml:lang="ru"><title type="html">Adobe Illustrator для веб-дизайнера 12) Горячие клавиши</title><link href="https://super-mark.ru/ru/blog/2024/illustrator-hotkeys" rel="alternate" type="text/html" title="Adobe Illustrator для веб-дизайнера 12) Горячие клавиши"/><published>2024-12-26T00:00:00+03:00</published><updated>2024-12-26T00:00:00+03:00</updated><id>https://super-mark.ru/ru/blog/2024/illustrator-hotkeys</id><content type="html" xml:base="https://super-mark.ru/ru/blog/2024/illustrator-hotkeys"><![CDATA[<details class="accordion is-stand-alone"> <summary>Содержание серии</summary> <div> <p class="petit">Материалы цикла представляют собой мои личные конспекты. Нет времени превращать их в полноценные обучающие статьи, и поэтому свободное отношение к слову может расстроить граммар-наци. Также не исключено, что использование каких-то картинок нарушит авторские права. Это нехорошо, но давно не помню, где и что брал... Я предупредил.</p> <ol class="list is-nested-ol"> <li> <a href="/ru/blog/2019/illustrator-web-design">Введение</a> <ol class="list is-nested-ol"> <li> <a href="/ru/blog/2020/illustrator-files-artboards">💾 Файлы, монтажные области</a> </li> <li> <a href="/ru/blog/2020/illustrator-layers">🗓 Cлои</a> </li> </ol> </li> <li> <a href="/ru/blog/2020/illustrator-transformation">🗜 Трансформация объектов</a> <ol class="list is-nested-ol"> <li> <a href="/ru/blog/2020/illustrator-transformation-moving-aligning-distributing">Перемещение, выравнивание и распределение объектов</a> </li> </ol> </li> <li> <a href="/ru/blog/2020/lines-and-grids">🎼 Линии и сетки</a> </li> <li> <a href="/ru/blog/2020/edit-paths">➰ Контуры</a> <ol class="list is-nested-ol"> <li> <a href="/ru/blog/2020/pen-curvature">🖋 Перо и инструмент «Кривизна» (Curvature)</a> </li> <li> <a href="/ru/blog/2020/beautiful-lines">👱‍♀️ Правила красивых контуров</a> </li> </ol> </li> <li> <a href="/ru/blog/2020/illustrator-stroke">✍️ Обводка</a> </li> <li> <a href="/ru/blog/2020/illustrator-fill">🎨 Цвет, заливка</a> </li> <li> <a href="/ru/blog/2020/illustrator-shapes">🔶 Фигуры</a> </li> <li> <a href="/ru/blog/2021/illustrator-text">🔠 Текст</a> </li> <li> <a href="/ru/blog/2021/illustrator-graphics">🏰 Векторная графика: техники рисунка</a> <ol class="list is-nested-ol"> <li> <a href="/ru/blog/2021/illustrator-shape-builder">💪 Shape Builder Tool (Создание фигур) – ⇧M</a> </li> <li> <a href="/ru/blog/2021/illustrator-live-paint">✏️ Рисование фигур линиями и инструментом быстрой заливки</a> </li> <li> <a href="/ru/blog/2021/illustrator-appearance">❤️ «Оформление» (Appearance) – палитра и раздел палитры «Свойства»</a> </li> <li> <a href="/ru/blog/2021/illustrator-guides-and-rulers">📐 Направляющие и линейки</a> </li> <li> <a href="/ru/blog/2022/illustrator-blend">🚶🏻‍♂️ Переходы (Blend)</a> </li> <li> <a href="/ru/blog/2023/perspective">🎁 Перспектива</a> </li> <li> <a href="/ru/blog/2023/illustrator-graphic-styles">🎩 Cтили графики</a> </li> <li> <a href="/ru/blog/2023/illustrator-symbols">🔣 Символы</a> </li> <li> <a href="/ru/blog/2024/illustrator-meshes">🏀 Сетчатые объекты (meshes)</a> </li> <li> <a href="/ru/blog/2024/illustrator-eyelashes-eyebrows-hair">👩 Ресницы, брови, волосы</a> </li> <li> <a href="/ru/blog/2024/illustrator-brushes-and-eraser">🖌 Кисти и ластик</a> </li> <li> <a href="/ru/blog/2024/illustrator-circular-distribution">☀️ Распределение объектов по кругу</a> </li> </ol> </li> <li> <a href="/ru/blog/2021/illustrator-tips-and-tricks">🦊 Советы и хитрости</a> </li> <li> <a href="/ru/blog/2024/illustrator-tools">🛠 Инструменты+</a> </li> <li> <a href="/ru/blog/2024/illustrator-hotkeys">⌨️ Горячие клавиши</a> </li> <li> <a href="/ru/blog/2024/illustrator-printing">🖨 Печать</a> </li> </ol> </div> </details> <ul> <li><code class="language-plaintext highlighter-rouge">E</code> – <strong>Free Transform</strong> (Свободная трансформация)</li> <li><code class="language-plaintext highlighter-rouge">I</code> – <strong>Пипетка</strong> (Eyedropper)</li> <li><code class="language-plaintext highlighter-rouge">⇧M</code> – <strong>Shape Builder</strong> (Создание фигур)</li> <li><code class="language-plaintext highlighter-rouge">W</code> – Черная стрелка (Selection Tool)</li> <li><code class="language-plaintext highlighter-rouge">A</code> – Белая стрелка (Direct Selection Tool)</li> <li><code class="language-plaintext highlighter-rouge">P</code> – Перо (Pen Tool)</li> <li><code class="language-plaintext highlighter-rouge">R</code> – Прямоугольник (Rectangle Tool)</li> <li><code class="language-plaintext highlighter-rouge">O</code> – Овал (Ellipse Tool)</li> <li><code class="language-plaintext highlighter-rouge">L</code> – Линия (Line Segment Tool)</li> <li><code class="language-plaintext highlighter-rouge">⌘Y</code> – Переключение между контурным и обычным режимом просмотра (Preview/Outline)</li> <li><code class="language-plaintext highlighter-rouge">⌥⌘Y</code> – Просмотр в режиме пикселей (Pixel Preview)</li> <li><code class="language-plaintext highlighter-rouge">⌘'</code> – Показать/скрыть сетку (Show/Hide Grid)</li> <li><code class="language-plaintext highlighter-rouge">⌘;</code> – Показать/скрыть направляющие (Show/Hide Guides)</li> <li><code class="language-plaintext highlighter-rouge">⌥⌘;</code> – Заблокировать/разблокировать направляющие (Lock/Unlock Guides)</li> <li><code class="language-plaintext highlighter-rouge">⌘H</code> – Показать/скрыть границы (Show/Hide Edges)</li> <li><code class="language-plaintext highlighter-rouge">Tab</code> – Переключение между нормальным и полноэкранным режимом</li> <li><code class="language-plaintext highlighter-rouge">⇧X</code> – Переключение между заливкой и обводкой</li> <li><code class="language-plaintext highlighter-rouge">⇧⌘B</code> – Показать/скрыть область масштабирования</li> <li><code class="language-plaintext highlighter-rouge">⌘</code> – Временное переключение на предыдущий инструмент</li> <li><code class="language-plaintext highlighter-rouge">⌘F</code> – Вставить перед (Paste in Front)</li> <li><code class="language-plaintext highlighter-rouge">⌘B</code> – Вставить позади (Paste in Back)</li> <li><code class="language-plaintext highlighter-rouge">⇧⌘[</code> – Переместить фигуру в самый низ стопки объектов слоя (Send to Back)</li> <li><code class="language-plaintext highlighter-rouge">⇧⌘]</code> – Переместить фигуру на самый верх стопки объектов слоя (Bring to Front)</li> <li><code class="language-plaintext highlighter-rouge">⌘0</code> – Подогнать монтажную область по размеру окна</li> <li><code class="language-plaintext highlighter-rouge">⌘1</code> – Отобразить реальный размер (Actual Size)</li> <li><code class="language-plaintext highlighter-rouge">⌘2</code> – Закрепить объект (Lock Selection)</li> <li><code class="language-plaintext highlighter-rouge">⌥⌘2</code> – Разблокировать все закрепленные объекты (Unlock All)</li> <li><code class="language-plaintext highlighter-rouge">⌘3</code> – Скрыть объект (Hide Selection)</li> <li><code class="language-plaintext highlighter-rouge">⌘5</code> – Преобразовать в направляющие (Make Guides)</li> <li><code class="language-plaintext highlighter-rouge">⌘7</code> – Создать обтравочную маску (Clipping Mask)</li> <li><code class="language-plaintext highlighter-rouge">⇧⌘P</code> – Импортировать файл (Place)</li> <li><code class="language-plaintext highlighter-rouge">⇧⌘A</code> – Снять выделение с объекта</li> <li><code class="language-plaintext highlighter-rouge">⌥</code> + перетаскивание – Дублирование объекта</li> <li><code class="language-plaintext highlighter-rouge">⌘D</code> – Повторить последнее действие</li> <li> <p><code class="language-plaintext highlighter-rouge">Enter</code> – Открывает диалоговое окно перемещения (Move). Позволяет задать точное расстояние и угол перемещения объекта.</p> <p>В диалоговом окне <strong>Move</strong> можно использовать <code class="language-plaintext highlighter-rouge">Copy</code> для создания дубликата. Клавиши стрелок с <code class="language-plaintext highlighter-rouge">Shift</code> изменяют расстояние на 10 пунктов.</p> <p><img src="/assets/img/blog/2024/12-28/illustrator-move-02.png" alt="Диалоговое окно Move"/></p> </li> <li><code class="language-plaintext highlighter-rouge">⌘K</code> – Открыть настройки (Preferences)</li> </ul> <p><a href="https://shortcuts.design/toolspage-adobeillustrator.html">Полный список</a></p>]]></content><author><name>@supervova</name></author><category term="Illustrator"/><summary type="html"><![CDATA[Я работаю в macOS, но отличие от Windows у нас минимальные: обычно, они сводятся к тому, что вместо клавиши Command (⌘) там используют клавишу Ctrl.]]></summary></entry></feed>