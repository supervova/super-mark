/* #region */
:root {
  --black-transparent:                  hsla(0, 0%, 0%, .54);
  --black-transparent-2:                hsla(0, 0%, 0%, .38);
  --black-transparent-3:                hsla(0, 0%, 0%, .28);
  --black-transparent-most:             hsla(0, 0%, 0%, .12);
  --white-max:                          hsl(0, 0%, 100%);
  --grey-l92:                           hsl(214, 17%, 92%);
  --grey-l94:                           hsl(214, 17%, 94%);
  --grey-l96:                           hsl(214, 17%, 96%);
  --grey-l98:                           hsl(214, 17%, 98%); }

:root {
  --color-background-primary:           $grey-l92;
  --color-ink-hint:                     var(--black-transparent-2);
  --color-ink-icon:                     var(--black-transparent-3);
  --color-ink-border:                   var(--black-transparent-most);
  --color-ink-light-normal:             var(--white-max);
  --color-brand-facebook:               rgb(24, 119, 242); }

/* #endregion */
/* #region */
:root {
  --size-1: .8rem;
  --size-2: 1.6rem;
  --size-3: 2.4rem;
  --size-4: 3.2rem;
  --size-5: 4rem;
  --size-6: 4.8rem;
  --size-7: 5.6rem;
  --size-8: 6.4rem;
  --size-line: var(--size-3); }

/* #endregion */
/* #region */
/* #endregion */
/* #region */
/* box-shadow-xl: */
/* #endregion */
/* #region */
/* #endregion */
/* #region */
/* #endregion */
@media (min-width: 992px) {
  .project-gallery.is-oldie-games {
    grid-template-rows: repeat(15, 18.4rem); } }

.project-gallery__item {
  background: #f5f8fc; }

@media (min-width: 992px) {
  .project-gallery__item.is-cubis {
    grid-column-start: 1;
    grid-column-end: 7;
    grid-row-start: 1;
    grid-row-end: 4; } }

@media (min-width: 992px) {
  .project-gallery__item.is-rubiks-cube {
    grid-column-start: 7;
    grid-column-end: 13;
    grid-row-start: 1;
    grid-row-end: 4; } }

@media (min-width: 992px) {
  .project-gallery__item.is-electronics {
    grid-column-start: 1;
    grid-column-end: 7;
    grid-row-start: 4;
    grid-row-end: 7; } }

@media (min-width: 992px) {
  .project-gallery__item.is-mig {
    grid-column-start: 7;
    grid-column-end: 13;
    grid-row-start: 4;
    grid-row-end: 7; } }

@media (min-width: 992px) {
  .project-gallery__item.is-15-puzzle {
    grid-column-start: 1;
    grid-column-end: 4;
    grid-row-start: 7;
    grid-row-end: 10; } }

@media (min-width: 992px) {
  .project-gallery__item.is-bejeweled {
    grid-column-start: 4;
    grid-column-end: 13;
    grid-row-start: 7;
    grid-row-end: 10; } }

@media (min-width: 992px) {
  .project-gallery__item.is-arkanoid {
    grid-column-start: 1;
    grid-column-end: 7;
    grid-row-start: 10;
    grid-row-end: 13; } }

@media (min-width: 992px) {
  .project-gallery__item.is-tetris {
    grid-column-start: 7;
    grid-column-end: 13;
    grid-row-start: 10;
    grid-row-end: 13; } }

@media (min-width: 992px) {
  .project-gallery__item.is-solitaires {
    grid-column-start: 2;
    grid-column-end: 12;
    grid-row-start: 13;
    grid-row-end: 16; } }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
