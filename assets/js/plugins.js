!function(e,t,n){"function"==typeof define&&define.amd?define(["jquery"],function(e){return n(e,0,t),e.mobile}):n(e.jQuery,0,t)}(this,document,function(e,t,n,i){var r,o,c,s,a,u,l,d,f,h,p;function m(e,t,n,i){var r=n.type;n.type=t,i?c.event.trigger(n,a,e):c.event.dispatch.call(e,n),n.type=r}!function(f,e,h){var l,t,r="virtualMouseBindings",c="virtualTouchID",n="vmouseover vmousedown vmousemove vmouseup vclick vmouseout vmousecancel".split(" "),p="clientX clientY pageX pageY screenX screenY".split(" "),i=f.event.mouseHooks?f.event.mouseHooks.props:[],m=f.event.props.concat(i),o={},s=0,a=0,u=0,d=!1,g=[],v=!1,_=!1,b="addEventListener"in e,y=f(e),w=1,E=0;function D(e){for(;e&&void 0!==e.originalEvent;)e=e.originalEvent;return e}function O(e){for(var t,n,i={};e;){for(n in t=f.data(e,r))t[n]&&(i[n]=i.hasVirtualBinding=!0);e=e.parentNode}return i}function S(){_=!0}function T(){_=!1}function C(){I(),s=setTimeout(function(){E=s=0,g.length=0,v=!1,S()},f.vmouse.resetTimerDuration)}function I(){s&&(clearTimeout(s),s=0)}function A(e,t,n){var i;return(n&&n[e]||!n&&function(e,t){for(var n;e;){if((n=f.data(e,r))&&(!t||n[t]))return e;e=e.parentNode}}(t.target,e))&&(i=function(e,t){var n,i,r,o,s,a,l,c,u,d=e.type;if((e=f.Event(e)).type=t,n=e.originalEvent,i=f.event.props,-1<d.search(/^(mouse|click)/)&&(i=m),n)for(l=i.length;l;)e[o=i[--l]]=n[o];if(-1<d.search(/mouse(down|up)|click/)&&!e.which&&(e.which=1),-1!==d.search(/^touch/)&&(d=(r=D(n)).touches,s=r.changedTouches,a=d&&d.length?d[0]:s&&s.length?s[0]:h))for(c=0,u=p.length;c<u;c++)e[o=p[c]]=a[o];return e}(t,e),f(t.target).trigger(i)),i}function P(e){var t,n=f.data(e.target,c);v||E&&E===n||(t=A("v"+e.type,e))&&(t.isDefaultPrevented()&&e.preventDefault(),t.isPropagationStopped()&&e.stopPropagation(),t.isImmediatePropagationStopped()&&e.stopImmediatePropagation())}function N(e){var t,n,i,r=D(e).touches;r&&1===r.length&&(n=O(t=e.target)).hasVirtualBinding&&(E=w++,f.data(t,c,E),I(),T(),d=!1,i=D(e).touches[0],a=i.pageX,u=i.pageY,A("vmouseover",e,n),A("vmousedown",e,n))}function j(e){_||(d||A("vmousecancel",e,O(e.target)),d=!0,C())}function k(e){var t,n,i,r;_||(t=D(e).touches[0],n=d,i=f.vmouse.moveDistanceThreshold,r=O(e.target),(d=d||Math.abs(t.pageX-a)>i||Math.abs(t.pageY-u)>i)&&!n&&A("vmousecancel",e,r),A("vmousemove",e,r),C())}function x(e){var t,n,i;_||(S(),A("vmouseup",e,t=O(e.target)),d||(n=A("vclick",e,t))&&n.isDefaultPrevented()&&(i=D(e).changedTouches[0],g.push({touchID:E,x:i.clientX,y:i.clientY}),v=!0),A("vmouseout",e,t),d=!1,C())}function L(e){var t,n=f.data(e,r);if(n)for(t in n)if(n[t])return 1}function q(){}for(f.vmouse={moveDistanceThreshold:10,clickDistanceThreshold:10,resetTimerDuration:1500},t=0;t<n.length;t++)f.event.special[n[t]]=function(n){var i=n.substr(1);return{setup:function(){L(this)||f.data(this,r,{}),f.data(this,r)[n]=!0,o[n]=(o[n]||0)+1,1===o[n]&&y.bind(i,P),f(this).bind(i,q),b&&(o.touchstart=(o.touchstart||0)+1,1===o.touchstart&&y.bind("touchstart",N).bind("touchend",x).bind("touchmove",k).bind("scroll",j))},teardown:function(){--o[n],o[n]||y.unbind(i,P),b&&(--o.touchstart,o.touchstart||y.unbind("touchstart",N).unbind("touchmove",k).unbind("touchend",x).unbind("scroll",j));var e=f(this),t=f.data(this,r);t&&(t[n]=!1),e.unbind(i,q),L(this)||e.removeData(r)}}}(n[t]);b&&e.addEventListener("click",function(e){var t,n,i,r,o,s=g.length,a=e.target;if(s)for(t=e.clientX,n=e.clientY,l=f.vmouse.clickDistanceThreshold,i=a;i;){for(r=0;r<s;r++)if(o=g[r],i===a&&Math.abs(o.x-t)<l&&Math.abs(o.y-n)<l||f.data(i,c)===o.touchID)return e.preventDefault(),void e.stopPropagation();i=i.parentNode}},!0)}(e,n),e.mobile={},o={touch:"ontouchend"in n},(r=e).mobile.support=r.mobile.support||{},r.extend(r.support,o),r.extend(r.mobile.support,o),s=this,u=(c=e)(n),l=c.mobile.support.touch,d="touchmove scroll",f=l?"touchstart":"mousedown",h=l?"touchend":"mouseup",p=l?"touchmove":"mousemove",c.each("touchstart touchmove touchend tap taphold swipe swipeleft swiperight scrollstart scrollstop".split(" "),function(e,t){c.fn[t]=function(e){return e?this.bind(t,e):this.trigger(t)},c.attrFn&&(c.attrFn[t]=!0)}),c.event.special.scrollstart={enabled:!0,setup:function(){var n,t,i=this;function r(e,t){m(i,(n=t)?"scrollstart":"scrollstop",e)}c(i).bind(d,function(e){c.event.special.scrollstart.enabled&&(n||r(e,!0),clearTimeout(t),t=setTimeout(function(){r(e,!1)},50))})},teardown:function(){c(this).unbind(d)}},c.event.special.tap={tapholdThreshold:750,emitTapOnTaphold:!0,setup:function(){var s=this,a=c(s),l=!1;a.bind("vmousedown",function(e){if(l=!1,e.which&&1!==e.which)return!1;var t,n=e.target;function i(){clearTimeout(t)}function r(){i(),a.unbind("vclick",o).unbind("vmouseup",i),u.unbind("vmousecancel",r)}function o(e){r(),l||n!==e.target?l&&e.preventDefault():m(s,"tap",e)}a.bind("vmouseup",i).bind("vclick",o),u.bind("vmousecancel",r),t=setTimeout(function(){c.event.special.tap.emitTapOnTaphold||(l=!0),m(s,"taphold",c.Event("taphold",{target:n}))},c.event.special.tap.tapholdThreshold)})},teardown:function(){c(this).unbind("vmousedown").unbind("vclick").unbind("vmouseup"),u.unbind("vmousecancel")}},c.event.special.swipe={scrollSupressionThreshold:30,durationThreshold:1e3,horizontalDistanceThreshold:30,verticalDistanceThreshold:30,getLocation:function(e){var t=s.pageXOffset,n=s.pageYOffset,i=e.clientX,r=e.clientY;return 0===e.pageY&&Math.floor(r)>Math.floor(e.pageY)||0===e.pageX&&Math.floor(i)>Math.floor(e.pageX)?(i-=t,r-=n):(r<e.pageY-n||i<e.pageX-t)&&(i=e.pageX-t,r=e.pageY-n),{x:i,y:r}},start:function(e){var t=e.originalEvent.touches?e.originalEvent.touches[0]:e,n=c.event.special.swipe.getLocation(t);return{time:(new Date).getTime(),coords:[n.x,n.y],origin:c(e.target)}},stop:function(e){var t=e.originalEvent.touches?e.originalEvent.touches[0]:e,n=c.event.special.swipe.getLocation(t);return{time:(new Date).getTime(),coords:[n.x,n.y]}},handleSwipe:function(e,t,n,i){if(t.time-e.time<c.event.special.swipe.durationThreshold&&Math.abs(e.coords[0]-t.coords[0])>c.event.special.swipe.horizontalDistanceThreshold&&Math.abs(e.coords[1]-t.coords[1])<c.event.special.swipe.verticalDistanceThreshold){var r=e.coords[0]>t.coords[0]?"swipeleft":"swiperight";return m(n,"swipe",c.Event("swipe",{target:i,swipestart:e,swipestop:t}),!0),m(n,r,c.Event(r,{target:i,swipestart:e,swipestop:t}),!0),!0}return!1},eventInProgress:!1,setup:function(){var o=this,e=c(o),s={},t=c.data(this,"mobile-events");t||(t={length:0},c.data(this,"mobile-events",t)),t.length++,(t.swipe=s).start=function(e){var t,n,i,r;c.event.special.swipe.eventInProgress||(c.event.special.swipe.eventInProgress=!0,n=c.event.special.swipe.start(e),i=e.target,r=!1,s.move=function(e){n&&!e.isDefaultPrevented()&&(t=c.event.special.swipe.stop(e),r||(r=c.event.special.swipe.handleSwipe(n,t,o,i))&&(c.event.special.swipe.eventInProgress=!1),Math.abs(n.coords[0]-t.coords[0])>c.event.special.swipe.scrollSupressionThreshold&&e.preventDefault())},s.stop=function(){r=!0,c.event.special.swipe.eventInProgress=!1,u.off(p,s.move),s.move=null},u.on(p,s.move).one(h,s.stop))},e.on(f,s.start)},teardown:function(){var e,t=c.data(this,"mobile-events");t&&(e=t.swipe,delete t.swipe,t.length--,0===t.length&&c.removeData(this,"mobile-events")),e&&(e.start&&c(this).off(f,e.start),e.move&&u.off(p,e.move),e.stop&&u.off(h,e.stop))}},c.each({scrollstop:"scrollstart",taphold:"tap",swipeleft:"swipe.left",swiperight:"swipe.right"},function(e,t){c.event.special[e]={setup:function(){c(this).bind(t,c.noop)},teardown:function(){c(this).unbind(t)}}})}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.Popper=t()}(this,function(){"use strict";var n="undefined"!=typeof window&&"undefined"!=typeof document&&"undefined"!=typeof navigator,i=function(){for(var e=["Edge","Trident","Firefox"],t=0;t<e.length;t+=1)if(n&&0<=navigator.userAgent.indexOf(e[t]))return 1;return 0}();var o=n&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then(function(){t=!1,e()}))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},i))}};function s(e){return e&&"[object Function]"==={}.toString.call(e)}function y(e,t){if(1!==e.nodeType)return[];var n=e.ownerDocument.defaultView.getComputedStyle(e,null);return t?n[t]:n}function p(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function m(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=y(e),n=t.overflow,i=t.overflowX,r=t.overflowY;return/(auto|scroll|overlay)/.test(n+r+i)?e:m(p(e))}function g(e){return e&&e.referenceNode?e.referenceNode:e}var t=n&&!(!window.MSInputMethodContext||!document.documentMode),r=n&&/MSIE 10/.test(navigator.userAgent);function v(e){return 11===e?t:10!==e&&t||r}function b(e){if(!e)return document.documentElement;for(var t=v(10)?document.body:null,n=e.offsetParent||null;n===t&&e.nextElementSibling;)n=(e=e.nextElementSibling).offsetParent;var i=n&&n.nodeName;return i&&"BODY"!==i&&"HTML"!==i?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===y(n,"position")?b(n):n:e?e.ownerDocument.documentElement:document.documentElement}function u(e){return null!==e.parentNode?u(e.parentNode):e}function _(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,i=n?e:t,r=n?t:e,o=document.createRange();o.setStart(i,0),o.setEnd(r,0);var s,a,l=o.commonAncestorContainer;if(e!==l&&t!==l||i.contains(r))return"BODY"===(a=(s=l).nodeName)||"HTML"!==a&&b(s.firstElementChild)!==s?b(l):l;var c=u(e);return c.host?_(c.host,t):_(e,u(t).host)}function w(e,t){var n="top"===(1<arguments.length&&void 0!==t?t:"top")?"scrollTop":"scrollLeft",i=e.nodeName;if("BODY"!==i&&"HTML"!==i)return e[n];var r=e.ownerDocument.documentElement;return(e.ownerDocument.scrollingElement||r)[n]}function d(e,t){var n="x"===t?"Left":"Top",i="Left"==n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"],10)+parseFloat(e["border"+i+"Width"],10)}function a(e,t,n,i){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],v(10)?parseInt(n["offset"+e])+parseInt(i["margin"+("Height"===e?"Top":"Left")])+parseInt(i["margin"+("Height"===e?"Bottom":"Right")]):0)}function E(e){var t=e.body,n=e.documentElement,i=v(10)&&getComputedStyle(n);return{height:a("Height",t,n,i),width:a("Width",t,n,i)}}var l=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},e=function(e,t,n){return t&&c(e.prototype,t),n&&c(e,n),e};function c(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function D(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var O=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e};function S(e){return O({},e,{right:e.left+e.width,bottom:e.top+e.height})}function T(e){var t,n,i={};try{v(10)?(i=e.getBoundingClientRect(),t=w(e,"top"),n=w(e,"left"),i.top+=t,i.left+=n,i.bottom+=t,i.right+=n):i=e.getBoundingClientRect()}catch(e){}var r,o={left:i.left,top:i.top,width:i.right-i.left,height:i.bottom-i.top},s="HTML"===e.nodeName?E(e.ownerDocument):{},a=s.width||e.clientWidth||o.width,l=s.height||e.clientHeight||o.height,c=e.offsetWidth-a,u=e.offsetHeight-l;return(c||u)&&(c-=d(r=y(e),"x"),u-=d(r,"y"),o.width-=c,o.height-=u),S(o)}function C(e,t,n){var i=2<arguments.length&&void 0!==n&&n,r=v(10),o="HTML"===t.nodeName,s=T(e),a=T(t),l=m(e),c=y(t),u=parseFloat(c.borderTopWidth,10),d=parseFloat(c.borderLeftWidth,10);i&&o&&(a.top=Math.max(a.top,0),a.left=Math.max(a.left,0));var f,h,p=S({top:s.top-a.top-u,left:s.left-a.left-d,width:s.width,height:s.height});return p.marginTop=0,p.marginLeft=0,!r&&o&&(f=parseFloat(c.marginTop,10),h=parseFloat(c.marginLeft,10),p.top-=u-f,p.bottom-=u-f,p.left-=d-h,p.right-=d-h,p.marginTop=f,p.marginLeft=h),(r&&!i?t.contains(l):t===l&&"BODY"!==l.nodeName)&&(p=function(e,t,n){var i=2<arguments.length&&void 0!==n&&n,r=w(t,"top"),o=w(t,"left"),s=i?-1:1;return e.top+=r*s,e.bottom+=r*s,e.left+=o*s,e.right+=o*s,e}(p,t)),p}function I(e){if(!e||!e.parentElement||v())return document.documentElement;for(var t=e.parentElement;t&&"none"===y(t,"transform");)t=t.parentElement;return t||document.documentElement}function h(e,t,n,i,r){var o,s,a,l,c,u=4<arguments.length&&void 0!==r&&r,d={top:0,left:0},f=u?I(e):_(e,g(t));"viewport"===i?d=function(e,t){var n=1<arguments.length&&void 0!==t&&t,i=e.ownerDocument.documentElement,r=C(e,i),o=Math.max(i.clientWidth,window.innerWidth||0),s=Math.max(i.clientHeight,window.innerHeight||0),a=n?0:w(i),l=n?0:w(i,"left");return S({top:a-r.top+r.marginTop,left:l-r.left+r.marginLeft,width:o,height:s})}(f,u):(o=void 0,"scrollParent"===i?"BODY"===(o=m(p(t))).nodeName&&(o=e.ownerDocument.documentElement):o="window"===i?e.ownerDocument.documentElement:i,s=C(o,f,u),"HTML"!==o.nodeName||function e(t){var n=t.nodeName;if("BODY"===n||"HTML"===n)return!1;if("fixed"===y(t,"position"))return!0;var i=p(t);return!!i&&e(i)}(f)?d=s:(l=(a=E(e.ownerDocument)).height,c=a.width,d.top+=s.top-s.marginTop,d.bottom=l+s.top,d.left+=s.left-s.marginLeft,d.right=c+s.left));var h="number"==typeof(n=n||0);return d.left+=h?n:n.left||0,d.top+=h?n:n.top||0,d.right-=h?n:n.right||0,d.bottom-=h?n:n.bottom||0,d}function f(e,t,i,n,r,o){var s=5<arguments.length&&void 0!==o?o:0;if(-1===e.indexOf("auto"))return e;var a=h(i,n,s,r),l={top:{width:a.width,height:t.top-a.top},right:{width:a.right-t.right,height:a.height},bottom:{width:a.width,height:a.bottom-t.bottom},left:{width:t.left-a.left,height:a.height}},c=Object.keys(l).map(function(e){return O({key:e},l[e],{area:(t=l[e]).width*t.height});var t}).sort(function(e,t){return t.area-e.area}),u=c.filter(function(e){var t=e.width,n=e.height;return t>=i.clientWidth&&n>=i.clientHeight}),d=0<u.length?u[0].key:c[0].key,f=e.split("-")[1];return d+(f?"-"+f:"")}function A(e,t,n,i){var r=3<arguments.length&&void 0!==i?i:null;return C(n,r?I(t):_(t,g(n)),r)}function P(e){var t=e.ownerDocument.defaultView.getComputedStyle(e),n=parseFloat(t.marginTop||0)+parseFloat(t.marginBottom||0),i=parseFloat(t.marginLeft||0)+parseFloat(t.marginRight||0);return{width:e.offsetWidth+i,height:e.offsetHeight+n}}function N(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function j(e,t,n){n=n.split("-")[0];var i=P(e),r={width:i.width,height:i.height},o=-1!==["right","left"].indexOf(n),s=o?"top":"left",a=o?"left":"top",l=o?"height":"width",c=o?"width":"height";return r[s]=t[s]+t[l]/2-i[l]/2,r[a]=n===a?t[a]-i[c]:t[N(a)],r}function k(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function x(e,n,t){return(void 0===t?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===n});var i=k(e,function(e){return e[t]===n});return e.indexOf(i)}(e,"name",t))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var t=e.function||e.fn;e.enabled&&s(t)&&(n.offsets.popper=S(n.offsets.popper),n.offsets.reference=S(n.offsets.reference),n=t(n,e))}),n}function L(e,n){return e.some(function(e){var t=e.name;return e.enabled&&t===n})}function q(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),i=0;i<t.length;i++){var r=t[i],o=r?""+r+n:e;if(void 0!==document.body.style[o])return o}return null}function M(e){var t=e.ownerDocument;return t?t.defaultView:window}function H(e,t,n,i){n.updateBound=i,M(e).addEventListener("resize",n.updateBound,{passive:!0});var r=m(e);return function e(t,n,i,r){var o="BODY"===t.nodeName,s=o?t.ownerDocument.defaultView:t;s.addEventListener(n,i,{passive:!0}),o||e(m(s.parentNode),n,i,r),r.push(s)}(r,"scroll",n.updateBound,n.scrollParents),n.scrollElement=r,n.eventsEnabled=!0,n}function F(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,M(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}function R(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function W(n,i){Object.keys(i).forEach(function(e){var t="";-1!==["width","height","top","right","bottom","left"].indexOf(e)&&R(i[e])&&(t="px"),n.style[e]=i[e]+t})}function B(e,t){function n(e){return e}var i=e.offsets,r=i.popper,o=i.reference,s=Math.round,a=Math.floor,l=s(o.width),c=s(r.width),u=-1!==["left","right"].indexOf(e.placement),d=-1!==e.placement.indexOf("-"),f=t?u||d||l%2==c%2?s:a:n,h=t?s:n;return{left:f(l%2==1&&c%2==1&&!d&&t?r.left-1:r.left),top:h(r.top),bottom:h(r.bottom),right:f(r.right)}}var U=n&&/Firefox/i.test(navigator.userAgent);function Q(e,t,n){var i,r,o=k(e,function(e){return e.name===t}),s=!!o&&e.some(function(e){return e.name===n&&e.enabled&&e.order<o.order});return s||(i="`"+t+"`",r="`"+n+"`",console.warn(r+" modifier is required by "+i+" modifier in order to work, be sure to include it before "+i+"!")),s}var K=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],Y=K.slice(3);function X(e,t){var n=1<arguments.length&&void 0!==t&&t,i=Y.indexOf(e),r=Y.slice(i+1).concat(Y.slice(0,i));return n?r.reverse():r}var V="flip",z="clockwise",G="counterclockwise";function J(e,r,o,t){var s=[0,0],a=-1!==["right","left"].indexOf(t),n=e.split(/(\+|\-)/).map(function(e){return e.trim()}),i=n.indexOf(k(n,function(e){return-1!==e.search(/,|\s/)}));n[i]&&-1===n[i].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/;return(-1!==i?[n.slice(0,i).concat([n[i].split(l)[0]]),[n[i].split(l)[1]].concat(n.slice(i+1))]:[n]).map(function(e,t){var n=(1===t?!a:a)?"height":"width",i=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,i=!0,e):i?(e[e.length-1]+=t,i=!1,e):e.concat(t)},[]).map(function(e){return function(e,t,n,i){var r=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+r[1],s=r[2];if(!o)return e;if(0!==s.indexOf("%"))return"vh"!==s&&"vw"!==s?o:("vh"===s?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o;var a=void 0;switch(s){case"%p":a=n;break;case"%":case"%r":default:a=i}return S(a)[t]/100*o}(e,n,r,o)})}).forEach(function(n,i){n.forEach(function(e,t){R(e)&&(s[i]+=e*("-"===n[t-1]?-1:1))})}),s}var Z={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t,n,i,r,o,s,a,l=e.placement,c=l.split("-")[0],u=l.split("-")[1];return u&&(n=(t=e.offsets).reference,i=t.popper,s=(r=-1!==["bottom","top"].indexOf(c))?"width":"height",a={start:D({},o=r?"left":"top",n[o]),end:D({},o,n[o]+n[s]-i[s])},e.offsets.popper=O({},i,a[u])),e}},offset:{order:200,enabled:!0,fn:function(e,t){var n=t.offset,i=e.placement,r=e.offsets,o=r.popper,s=r.reference,a=i.split("-")[0],l=void 0,l=R(+n)?[+n,0]:J(n,o,s,a);return"left"===a?(o.top+=l[0],o.left-=l[1]):"right"===a?(o.top+=l[0],o.left+=l[1]):"top"===a?(o.left+=l[0],o.top-=l[1]):"bottom"===a&&(o.left+=l[0],o.top+=l[1]),e.popper=o,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,i){var t=i.boundariesElement||b(e.instance.popper);e.instance.reference===t&&(t=b(t));var n=q("transform"),r=e.instance.popper.style,o=r.top,s=r.left,a=r[n];r.top="",r.left="",r[n]="";var l=h(e.instance.popper,e.instance.reference,i.padding,t,e.positionFixed);r.top=o,r.left=s,r[n]=a,i.boundaries=l;var c=i.priority,u=e.offsets.popper,d={primary:function(e){var t=u[e];return u[e]<l[e]&&!i.escapeWithReference&&(t=Math.max(u[e],l[e])),D({},e,t)},secondary:function(e){var t="right"===e?"left":"top",n=u[t];return u[e]>l[e]&&!i.escapeWithReference&&(n=Math.min(u[t],l[e]-("right"===e?u.width:u.height))),D({},t,n)}};return c.forEach(function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";u=O({},u,d[t](e))}),e.offsets.popper=u,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,i=t.reference,r=e.placement.split("-")[0],o=Math.floor,s=-1!==["top","bottom"].indexOf(r),a=s?"right":"bottom",l=s?"left":"top",c=s?"width":"height";return n[a]<o(i[l])&&(e.offsets.popper[l]=o(i[l])-n[c]),n[l]>o(i[a])&&(e.offsets.popper[l]=o(i[a])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var n;if(!Q(e.instance.modifiers,"arrow","keepTogether"))return e;var i=t.element;if("string"==typeof i){if(!(i=e.instance.popper.querySelector(i)))return e}else if(!e.instance.popper.contains(i))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var r=e.placement.split("-")[0],o=e.offsets,s=o.popper,a=o.reference,l=-1!==["left","right"].indexOf(r),c=l?"height":"width",u=l?"Top":"Left",d=u.toLowerCase(),f=l?"left":"top",h=l?"bottom":"right",p=P(i)[c];a[h]-p<s[d]&&(e.offsets.popper[d]-=s[d]-(a[h]-p)),a[d]+p>s[h]&&(e.offsets.popper[d]+=a[d]+p-s[h]),e.offsets.popper=S(e.offsets.popper);var m=a[d]+a[c]/2-p/2,g=y(e.instance.popper),v=parseFloat(g["margin"+u],10),_=parseFloat(g["border"+u+"Width"],10),b=m-e.offsets.popper[d]-v-_,b=Math.max(Math.min(s[c]-p,b),0);return e.arrowElement=i,e.offsets.arrow=(D(n={},d,Math.round(b)),D(n,f,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(g,v){if(L(g.instance.modifiers,"inner"))return g;if(g.flipped&&g.placement===g.originalPlacement)return g;var _=h(g.instance.popper,g.instance.reference,v.padding,v.boundariesElement,g.positionFixed),b=g.placement.split("-")[0],y=N(b),w=g.placement.split("-")[1]||"",E=[];switch(v.behavior){case V:E=[b,y];break;case z:E=X(b);break;case G:E=X(b,!0);break;default:E=v.behavior}return E.forEach(function(e,t){if(b!==e||E.length===t+1)return g;b=g.placement.split("-")[0],y=N(b);var n,i=g.offsets.popper,r=g.offsets.reference,o=Math.floor,s="left"===b&&o(i.right)>o(r.left)||"right"===b&&o(i.left)<o(r.right)||"top"===b&&o(i.bottom)>o(r.top)||"bottom"===b&&o(i.top)<o(r.bottom),a=o(i.left)<o(_.left),l=o(i.right)>o(_.right),c=o(i.top)<o(_.top),u=o(i.bottom)>o(_.bottom),d="left"===b&&a||"right"===b&&l||"top"===b&&c||"bottom"===b&&u,f=-1!==["top","bottom"].indexOf(b),h=!!v.flipVariations&&(f&&"start"===w&&a||f&&"end"===w&&l||!f&&"start"===w&&c||!f&&"end"===w&&u),p=!!v.flipVariationsByContent&&(f&&"start"===w&&l||f&&"end"===w&&a||!f&&"start"===w&&u||!f&&"end"===w&&c),m=h||p;(s||d||m)&&(g.flipped=!0,(s||d)&&(b=E[t+1]),m&&(w="end"===(n=w)?"start":"start"===n?"end":n),g.placement=b+(w?"-"+w:""),g.offsets.popper=O({},g.offsets.popper,j(g.instance.popper,g.offsets.reference,g.placement)),g=x(g.instance.modifiers,g,"flip"))}),g},behavior:"flip",padding:5,boundariesElement:"viewport",flipVariations:!1,flipVariationsByContent:!1},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],i=e.offsets,r=i.popper,o=i.reference,s=-1!==["left","right"].indexOf(n),a=-1===["top","left"].indexOf(n);return r[s?"left":"top"]=o[n]-(a?r[s?"width":"height"]:0),e.placement=N(t),e.offsets.popper=S(r),e}},hide:{order:800,enabled:!0,fn:function(e){if(!Q(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=k(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,i=t.y,r=e.offsets.popper,o=k(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var s,a,l=void 0!==o?o:t.gpuAcceleration,c=b(e.instance.popper),u=T(c),d={position:r.position},f=B(e,window.devicePixelRatio<2||!U),h="bottom"===n?"top":"bottom",p="right"===i?"left":"right",m=q("transform"),g=void 0,v=void 0,v="bottom"==h?"HTML"===c.nodeName?-c.clientHeight+f.bottom:-u.height+f.bottom:f.top,g="right"==p?"HTML"===c.nodeName?-c.clientWidth+f.right:-u.width+f.right:f.left;l&&m?(d[m]="translate3d("+g+"px, "+v+"px, 0)",d[h]=0,d[p]=0,d.willChange="transform"):(s="bottom"==h?-1:1,a="right"==p?-1:1,d[h]=v*s,d[p]=g*a,d.willChange=h+", "+p);var _={"x-placement":e.placement};return e.attributes=O({},_,e.attributes),e.styles=O({},d,e.styles),e.arrowStyles=O({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var t,n;return W(e.instance.popper,e.styles),t=e.instance.popper,n=e.attributes,Object.keys(n).forEach(function(e){!1!==n[e]?t.setAttribute(e,n[e]):t.removeAttribute(e)}),e.arrowElement&&Object.keys(e.arrowStyles).length&&W(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,i,r){var o=A(r,t,e,n.positionFixed),s=f(n.placement,o,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",s),W(t,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},$=(e(ee,[{key:"update",value:function(){return function(){var e;this.state.isDestroyed||((e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}}).offsets.reference=A(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=f(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=j(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=x(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e)))}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,L(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[q("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=H(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return F.call(this)}}]),ee);function ee(e,t){var n=this,i=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};l(this,ee),this.scheduleUpdate=function(){return requestAnimationFrame(n.update)},this.update=o(this.update.bind(this)),this.options=O({},ee.Defaults,i),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=e&&e.jquery?e[0]:e,this.popper=t&&t.jquery?t[0]:t,this.options.modifiers={},Object.keys(O({},ee.Defaults.modifiers,i.modifiers)).forEach(function(e){n.options.modifiers[e]=O({},ee.Defaults.modifiers[e]||{},i.modifiers?i.modifiers[e]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return O({name:e},n.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&s(e.onLoad)&&e.onLoad(n.reference,n.popper,n.options,e,n.state)}),this.update();var r=this.options.eventsEnabled;r&&this.enableEventListeners(),this.state.eventsEnabled=r}return $.Utils=("undefined"!=typeof window?window:global).PopperUtils,$.placements=K,$.Defaults=Z,$}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery")):"function"==typeof define&&define.amd?define(["jquery"],t):(e=e||self).Util=t(e.jQuery)}(this,function(o){"use strict";o=o&&o.hasOwnProperty("default")?o.default:o;var t="transitionend";function e(e){var t=this,n=!1;return o(this).one(l.TRANSITION_END,function(){n=!0}),setTimeout(function(){n||l.triggerTransitionEnd(t)},e),this}var l={TRANSITION_END:"bsTransitionEnd",getUID:function(e){for(;e+=~~(1e6*Math.random()),document.getElementById(e););return e},getSelectorFromElement:function(e){var t,n=e.getAttribute("data-target");n&&"#"!==n||(n=(t=e.getAttribute("href"))&&"#"!==t?t.trim():"");try{return document.querySelector(n)?n:null}catch(e){return null}},getTransitionDurationFromElement:function(e){if(!e)return 0;var t=o(e).css("transition-duration"),n=o(e).css("transition-delay"),i=parseFloat(t),r=parseFloat(n);return i||r?(t=t.split(",")[0],n=n.split(",")[0],1e3*(parseFloat(t)+parseFloat(n))):0},reflow:function(e){return e.offsetHeight},triggerTransitionEnd:function(e){o(e).trigger(t)},supportsTransitionEnd:function(){return Boolean(t)},isElement:function(e){return(e[0]||e).nodeType},typeCheckConfig:function(e,t,n){for(var i in n)if(Object.prototype.hasOwnProperty.call(n,i)){var r=n[i],o=t[i],s=o&&l.isElement(o)?"element":(a=o,{}.toString.call(a).match(/\s([a-z]+)/i)[1].toLowerCase());if(!new RegExp(r).test(s))throw new Error(e.toUpperCase()+': Option "'+i+'" provided type "'+s+'" but expected type "'+r+'".')}var a},findShadowRoot:function(e){if(!document.documentElement.attachShadow)return null;if("function"!=typeof e.getRootNode)return e instanceof ShadowRoot?e:e.parentNode?l.findShadowRoot(e.parentNode):null;var t=e.getRootNode();return t instanceof ShadowRoot?t:null},jQueryDetection:function(){if(void 0===o)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var e=o.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1===e[0]&&9===e[1]&&e[2]<1||4<=e[0])throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}};return l.jQueryDetection(),o.fn.emulateTransitionEnd=e,o.event.special[l.TRANSITION_END]={bindType:t,delegateType:t,handle:function(e){if(o(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}},l}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","./util.js"],t):(e=e||self).Alert=t(e.jQuery,e.Util)}(this,function(o,s){"use strict";function a(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}o=o&&o.hasOwnProperty("default")?o.default:o,s=s&&s.hasOwnProperty("default")?s.default:s;var e="alert",l="bs.alert",t="."+l,n=o.fn[e],c={CLOSE:"close"+t,CLOSED:"closed"+t,CLICK_DATA_API:"click"+t+".data-api"},u="alert",d="fade",f="show",i=function(){function i(e){this._element=e}var e,t,n,r=i.prototype;return r.close=function(e){var t=this._element;e&&(t=this._getRootElement(e)),this._triggerCloseEvent(t).isDefaultPrevented()||this._removeElement(t)},r.dispose=function(){o.removeData(this._element,l),this._element=null},r._getRootElement=function(e){var t=s.getSelectorFromElement(e),n=!1;return t&&(n=document.querySelector(t)),n=n||o(e).closest("."+u)[0]},r._triggerCloseEvent=function(e){var t=o.Event(c.CLOSE);return o(e).trigger(t),t},r._removeElement=function(t){var e,n=this;o(t).removeClass(f),o(t).hasClass(d)?(e=s.getTransitionDurationFromElement(t),o(t).one(s.TRANSITION_END,function(e){return n._destroyElement(t,e)}).emulateTransitionEnd(e)):this._destroyElement(t)},r._destroyElement=function(e){o(e).detach().trigger(c.CLOSED).remove()},i._jQueryInterface=function(n){return this.each(function(){var e=o(this),t=e.data(l);t||(t=new i(this),e.data(l,t)),"close"===n&&t[n](this)})},i._handleDismiss=function(t){return function(e){e&&e.preventDefault(),t.close(this)}},e=i,n=[{key:"VERSION",get:function(){return"4.4.1"}}],(t=null)&&a(e.prototype,t),n&&a(e,n),i}();return o(document).on(c.CLICK_DATA_API,'[data-dismiss="alert"]',i._handleDismiss(new i)),o.fn[e]=i._jQueryInterface,o.fn[e].Constructor=i,o.fn[e].noConflict=function(){return o.fn[e]=n,i._jQueryInterface},i}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery")):"function"==typeof define&&define.amd?define(["jquery"],t):(e=e||self).Button=t(e.jQuery)}(this,function(o){"use strict";function s(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}o=o&&o.hasOwnProperty("default")?o.default:o;var e="button",a="bs.button",t="."+a,n=".data-api",i=o.fn[e],l="active",r="btn",c="focus",u='[data-toggle^="button"]',d='[data-toggle="buttons"]',f='[data-toggle="button"]',h='[data-toggle="buttons"] .btn',p='input:not([type="hidden"])',m=".active",g=".btn",v={CLICK_DATA_API:"click"+t+n,FOCUS_BLUR_DATA_API:"focus"+t+n+" blur"+t+n,LOAD_DATA_API:"load"+t+n},_=function(){function n(e){this._element=e}var e,t,i,r=n.prototype;return r.toggle=function(){var e,t,n=!0,i=!0,r=o(this._element).closest(d)[0];!r||(e=this._element.querySelector(p))&&("radio"===e.type?e.checked&&this._element.classList.contains(l)?n=!1:(t=r.querySelector(m))&&o(t).removeClass(l):("checkbox"!==e.type||"LABEL"===this._element.tagName&&e.checked===this._element.classList.contains(l))&&(n=!1),n&&(e.checked=!this._element.classList.contains(l),o(e).trigger("change")),e.focus(),i=!1),this._element.hasAttribute("disabled")||this._element.classList.contains("disabled")||(i&&this._element.setAttribute("aria-pressed",!this._element.classList.contains(l)),n&&o(this._element).toggleClass(l))},r.dispose=function(){o.removeData(this._element,a),this._element=null},n._jQueryInterface=function(t){return this.each(function(){var e=o(this).data(a);e||(e=new n(this),o(this).data(a,e)),"toggle"===t&&e[t]()})},e=n,i=[{key:"VERSION",get:function(){return"4.4.1"}}],(t=null)&&s(e.prototype,t),i&&s(e,i),n}();return o(document).on(v.CLICK_DATA_API,u,function(e){var t=e.target;if(o(t).hasClass(r)||(t=o(t).closest(g)[0]),!t||t.hasAttribute("disabled")||t.classList.contains("disabled"))e.preventDefault();else{var n=t.querySelector(p);if(n&&(n.hasAttribute("disabled")||n.classList.contains("disabled")))return void e.preventDefault();_._jQueryInterface.call(o(t),"toggle")}}).on(v.FOCUS_BLUR_DATA_API,u,function(e){var t=o(e.target).closest(g)[0];o(t).toggleClass(c,/^focus(in)?$/.test(e.type))}),o(window).on(v.LOAD_DATA_API,function(){for(var e=[].slice.call(document.querySelectorAll(h)),t=0,n=e.length;t<n;t++){var i=e[t],r=i.querySelector(p);r.checked||r.hasAttribute("checked")?i.classList.add(l):i.classList.remove(l)}for(var o=0,s=(e=[].slice.call(document.querySelectorAll(f))).length;o<s;o++){var a=e[o];"true"===a.getAttribute("aria-pressed")?a.classList.add(l):a.classList.remove(l)}}),o.fn[e]=_._jQueryInterface,o.fn[e].Constructor=_,o.fn[e].noConflict=function(){return o.fn[e]=i,_._jQueryInterface},_}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","./util.js"],t):(e=e||self).Carousel=t(e.jQuery,e.Util)}(this,function(p,m){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function t(t,e){var n,i=Object.keys(t);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(t),e&&(n=n.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),i.push.apply(i,n)),i}function s(r){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?t(Object(o),!0).forEach(function(e){var t,n,i;t=r,i=o[n=e],n in t?Object.defineProperty(t,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[n]=i}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):t(Object(o)).forEach(function(e){Object.defineProperty(r,e,Object.getOwnPropertyDescriptor(o,e))})}return r}p=p&&p.hasOwnProperty("default")?p.default:p,m=m&&m.hasOwnProperty("default")?m.default:m;var a="carousel",l="bs.carousel",c="."+l,e=".data-api",n=p.fn[a],u={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},d={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},g="next",f="prev",v="left",_="right",b={SLIDE:"slide"+c,SLID:"slid"+c,KEYDOWN:"keydown"+c,MOUSEENTER:"mouseenter"+c,MOUSELEAVE:"mouseleave"+c,TOUCHSTART:"touchstart"+c,TOUCHMOVE:"touchmove"+c,TOUCHEND:"touchend"+c,POINTERDOWN:"pointerdown"+c,POINTERUP:"pointerup"+c,DRAG_START:"dragstart"+c,LOAD_DATA_API:"load"+c+e,CLICK_DATA_API:"click"+c+e},h="carousel",y="active",w="slide",E="carousel-item-right",D="carousel-item-left",O="carousel-item-next",S="carousel-item-prev",T="pointer-event",C=".active",I=".active.carousel-item",A=".carousel-item",P=".carousel-item img",N=".carousel-item-next, .carousel-item-prev",j=".carousel-indicators",i="[data-slide], [data-slide-to]",o='[data-ride="carousel"]',k={TOUCH:"touch",PEN:"pen"},x=function(){function o(e,t){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(t),this._element=e,this._indicatorsElement=this._element.querySelector(j),this._touchSupported="ontouchstart"in document.documentElement||0<navigator.maxTouchPoints,this._pointerEvent=Boolean(window.PointerEvent||window.MSPointerEvent),this._addEventListeners()}var e,t,n,i=o.prototype;return i.next=function(){this._isSliding||this._slide(g)},i.nextWhenVisible=function(){!document.hidden&&p(this._element).is(":visible")&&"hidden"!==p(this._element).css("visibility")&&this.next()},i.prev=function(){this._isSliding||this._slide(f)},i.pause=function(e){e||(this._isPaused=!0),this._element.querySelector(N)&&(m.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},i.cycle=function(e){e||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},i.to=function(e){var t=this;this._activeElement=this._element.querySelector(I);var n=this._getItemIndex(this._activeElement);if(!(e>this._items.length-1||e<0))if(this._isSliding)p(this._element).one(b.SLID,function(){return t.to(e)});else{if(n===e)return this.pause(),void this.cycle();var i=n<e?g:f;this._slide(i,this._items[e])}},i.dispose=function(){p(this._element).off(c),p.removeData(this._element,l),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},i._getConfig=function(e){return e=s({},u,{},e),m.typeCheckConfig(a,e,d),e},i._handleSwipe=function(){var e,t=Math.abs(this.touchDeltaX);t<=40||(e=t/this.touchDeltaX,(this.touchDeltaX=0)<e&&this.prev(),e<0&&this.next())},i._addEventListeners=function(){var t=this;this._config.keyboard&&p(this._element).on(b.KEYDOWN,function(e){return t._keydown(e)}),"hover"===this._config.pause&&p(this._element).on(b.MOUSEENTER,function(e){return t.pause(e)}).on(b.MOUSELEAVE,function(e){return t.cycle(e)}),this._config.touch&&this._addTouchEventListeners()},i._addTouchEventListeners=function(){var e,t,n=this;this._touchSupported&&(e=function(e){n._pointerEvent&&k[e.originalEvent.pointerType.toUpperCase()]?n.touchStartX=e.originalEvent.clientX:n._pointerEvent||(n.touchStartX=e.originalEvent.touches[0].clientX)},t=function(e){n._pointerEvent&&k[e.originalEvent.pointerType.toUpperCase()]&&(n.touchDeltaX=e.originalEvent.clientX-n.touchStartX),n._handleSwipe(),"hover"===n._config.pause&&(n.pause(),n.touchTimeout&&clearTimeout(n.touchTimeout),n.touchTimeout=setTimeout(function(e){return n.cycle(e)},500+n._config.interval))},p(this._element.querySelectorAll(P)).on(b.DRAG_START,function(e){return e.preventDefault()}),this._pointerEvent?(p(this._element).on(b.POINTERDOWN,e),p(this._element).on(b.POINTERUP,t),this._element.classList.add(T)):(p(this._element).on(b.TOUCHSTART,e),p(this._element).on(b.TOUCHMOVE,function(e){var t;(t=e).originalEvent.touches&&1<t.originalEvent.touches.length?n.touchDeltaX=0:n.touchDeltaX=t.originalEvent.touches[0].clientX-n.touchStartX}),p(this._element).on(b.TOUCHEND,t)))},i._keydown=function(e){if(!/input|textarea/i.test(e.target.tagName))switch(e.which){case 37:e.preventDefault(),this.prev();break;case 39:e.preventDefault(),this.next()}},i._getItemIndex=function(e){return this._items=e&&e.parentNode?[].slice.call(e.parentNode.querySelectorAll(A)):[],this._items.indexOf(e)},i._getItemByDirection=function(e,t){var n=e===g,i=e===f,r=this._getItemIndex(t),o=this._items.length-1;if((i&&0===r||n&&r===o)&&!this._config.wrap)return t;var s=(r+(e===f?-1:1))%this._items.length;return-1==s?this._items[this._items.length-1]:this._items[s]},i._triggerSlideEvent=function(e,t){var n=this._getItemIndex(e),i=this._getItemIndex(this._element.querySelector(I)),r=p.Event(b.SLIDE,{relatedTarget:e,direction:t,from:i,to:n});return p(this._element).trigger(r),r},i._setActiveIndicatorElement=function(e){var t,n;this._indicatorsElement&&(t=[].slice.call(this._indicatorsElement.querySelectorAll(C)),p(t).removeClass(y),(n=this._indicatorsElement.children[this._getItemIndex(e)])&&p(n).addClass(y))},i._slide=function(e,t){var n,i,r,o,s,a=this,l=this._element.querySelector(I),c=this._getItemIndex(l),u=t||l&&this._getItemByDirection(e,l),d=this._getItemIndex(u),f=Boolean(this._interval),h=e===g?(n=D,i=O,v):(n=E,i=S,_);u&&p(u).hasClass(y)?this._isSliding=!1:this._triggerSlideEvent(u,h).isDefaultPrevented()||l&&u&&(this._isSliding=!0,f&&this.pause(),this._setActiveIndicatorElement(u),r=p.Event(b.SLID,{relatedTarget:u,direction:h,from:c,to:d}),p(this._element).hasClass(w)?(p(u).addClass(i),m.reflow(u),p(l).addClass(n),p(u).addClass(n),(o=parseInt(u.getAttribute("data-interval"),10))?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=o):this._config.interval=this._config.defaultInterval||this._config.interval,s=m.getTransitionDurationFromElement(l),p(l).one(m.TRANSITION_END,function(){p(u).removeClass(n+" "+i).addClass(y),p(l).removeClass(y+" "+i+" "+n),a._isSliding=!1,setTimeout(function(){return p(a._element).trigger(r)},0)}).emulateTransitionEnd(s)):(p(l).removeClass(y),p(u).addClass(y),this._isSliding=!1,p(this._element).trigger(r)),f&&this.cycle())},o._jQueryInterface=function(i){return this.each(function(){var e=p(this).data(l),t=s({},u,{},p(this).data());"object"==typeof i&&(t=s({},t,{},i));var n="string"==typeof i?i:t.slide;if(e||(e=new o(this,t),p(this).data(l,e)),"number"==typeof i)e.to(i);else if("string"==typeof n){if(void 0===e[n])throw new TypeError('No method named "'+n+'"');e[n]()}else t.interval&&t.ride&&(e.pause(),e.cycle())})},o._dataApiClickHandler=function(e){var t,n,i,r=m.getSelectorFromElement(this);!r||(t=p(r)[0])&&p(t).hasClass(h)&&(n=s({},p(t).data(),{},p(this).data()),(i=this.getAttribute("data-slide-to"))&&(n.interval=!1),o._jQueryInterface.call(p(t),n),i&&p(t).data(l).to(i),e.preventDefault())},e=o,n=[{key:"VERSION",get:function(){return"4.4.1"}},{key:"Default",get:function(){return u}}],(t=null)&&r(e.prototype,t),n&&r(e,n),o}();return p(document).on(b.CLICK_DATA_API,i,x._dataApiClickHandler),p(window).on(b.LOAD_DATA_API,function(){for(var e=[].slice.call(document.querySelectorAll(o)),t=0,n=e.length;t<n;t++){var i=p(e[t]);x._jQueryInterface.call(i,i.data())}}),p.fn[a]=x._jQueryInterface,p.fn[a].Constructor=x,p.fn[a].noConflict=function(){return p.fn[a]=n,x._jQueryInterface},x}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","./util.js"],t):(e=e||self).Collapse=t(e.jQuery,e.Util)}(this,function(l,c){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function t(t,e){var n,i=Object.keys(t);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(t),e&&(n=n.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),i.push.apply(i,n)),i}function o(r){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?t(Object(o),!0).forEach(function(e){var t,n,i;t=r,i=o[n=e],n in t?Object.defineProperty(t,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[n]=i}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):t(Object(o)).forEach(function(e){Object.defineProperty(r,e,Object.getOwnPropertyDescriptor(o,e))})}return r}l=l&&l.hasOwnProperty("default")?l.default:l,c=c&&c.hasOwnProperty("default")?c.default:c;var s="collapse",u="bs.collapse",e="."+u,n=l.fn[s],d={toggle:!0,parent:""},f={toggle:"boolean",parent:"(string|element)"},h={SHOW:"show"+e,SHOWN:"shown"+e,HIDE:"hide"+e,HIDDEN:"hidden"+e,CLICK_DATA_API:"click"+e+".data-api"},p="show",m="collapse",g="collapsing",v="collapsed",_="width",b="height",y=".show, .collapsing",w='[data-toggle="collapse"]',a=function(){function a(t,e){this._isTransitioning=!1,this._element=t,this._config=this._getConfig(e),this._triggerArray=[].slice.call(document.querySelectorAll('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'));for(var n=[].slice.call(document.querySelectorAll(w)),i=0,r=n.length;i<r;i++){var o=n[i],s=c.getSelectorFromElement(o),a=[].slice.call(document.querySelectorAll(s)).filter(function(e){return e===t});null!==s&&0<a.length&&(this._selector=s,this._triggerArray.push(o))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var e,t,n,i=a.prototype;return i.toggle=function(){l(this._element).hasClass(p)?this.hide():this.show()},i.show=function(){var e,t,n,i,r,o,s=this;this._isTransitioning||l(this._element).hasClass(p)||(this._parent&&0===(e=[].slice.call(this._parent.querySelectorAll(y)).filter(function(e){return"string"==typeof s._config.parent?e.getAttribute("data-parent")===s._config.parent:e.classList.contains(m)})).length&&(e=null),e&&(t=l(e).not(this._selector).data(u))&&t._isTransitioning||(n=l.Event(h.SHOW),l(this._element).trigger(n),n.isDefaultPrevented()||(e&&(a._jQueryInterface.call(l(e).not(this._selector),"hide"),t||l(e).data(u,null)),i=this._getDimension(),l(this._element).removeClass(m).addClass(g),this._element.style[i]=0,this._triggerArray.length&&l(this._triggerArray).removeClass(v).attr("aria-expanded",!0),this.setTransitioning(!0),r="scroll"+(i[0].toUpperCase()+i.slice(1)),o=c.getTransitionDurationFromElement(this._element),l(this._element).one(c.TRANSITION_END,function(){l(s._element).removeClass(g).addClass(m).addClass(p),s._element.style[i]="",s.setTransitioning(!1),l(s._element).trigger(h.SHOWN)}).emulateTransitionEnd(o),this._element.style[i]=this._element[r]+"px")))},i.hide=function(){var e=this;if(!this._isTransitioning&&l(this._element).hasClass(p)){var t=l.Event(h.HIDE);if(l(this._element).trigger(t),!t.isDefaultPrevented()){var n=this._getDimension();this._element.style[n]=this._element.getBoundingClientRect()[n]+"px",c.reflow(this._element),l(this._element).addClass(g).removeClass(m).removeClass(p);var i=this._triggerArray.length;if(0<i)for(var r=0;r<i;r++){var o=this._triggerArray[r],s=c.getSelectorFromElement(o);null!==s&&(l([].slice.call(document.querySelectorAll(s))).hasClass(p)||l(o).addClass(v).attr("aria-expanded",!1))}this.setTransitioning(!0);this._element.style[n]="";var a=c.getTransitionDurationFromElement(this._element);l(this._element).one(c.TRANSITION_END,function(){e.setTransitioning(!1),l(e._element).removeClass(g).addClass(m).trigger(h.HIDDEN)}).emulateTransitionEnd(a)}}},i.setTransitioning=function(e){this._isTransitioning=e},i.dispose=function(){l.removeData(this._element,u),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},i._getConfig=function(e){return(e=o({},d,{},e)).toggle=Boolean(e.toggle),c.typeCheckConfig(s,e,f),e},i._getDimension=function(){return l(this._element).hasClass(_)?_:b},i._getParent=function(){var e,n=this;c.isElement(this._config.parent)?(e=this._config.parent,void 0!==this._config.parent.jquery&&(e=this._config.parent[0])):e=document.querySelector(this._config.parent);var t='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]',i=[].slice.call(e.querySelectorAll(t));return l(i).each(function(e,t){n._addAriaAndCollapsedClass(a._getTargetFromElement(t),[t])}),e},i._addAriaAndCollapsedClass=function(e,t){var n=l(e).hasClass(p);t.length&&l(t).toggleClass(v,!n).attr("aria-expanded",n)},a._getTargetFromElement=function(e){var t=c.getSelectorFromElement(e);return t?document.querySelector(t):null},a._jQueryInterface=function(i){return this.each(function(){var e=l(this),t=e.data(u),n=o({},d,{},e.data(),{},"object"==typeof i&&i?i:{});if(!t&&n.toggle&&/show|hide/.test(i)&&(n.toggle=!1),t||(t=new a(this,n),e.data(u,t)),"string"==typeof i){if(void 0===t[i])throw new TypeError('No method named "'+i+'"');t[i]()}})},e=a,n=[{key:"VERSION",get:function(){return"4.4.1"}},{key:"Default",get:function(){return d}}],(t=null)&&r(e.prototype,t),n&&r(e,n),a}();return l(document).on(h.CLICK_DATA_API,w,function(e){"A"===e.currentTarget.tagName&&e.preventDefault();var n=l(this),t=c.getSelectorFromElement(this),i=[].slice.call(document.querySelectorAll(t));l(i).each(function(){var e=l(this),t=e.data(u)?"toggle":n.data();a._jQueryInterface.call(e,t)})}),l.fn[s]=a._jQueryInterface,l.fn[s].Constructor=a,l.fn[s].noConflict=function(){return l.fn[s]=n,a._jQueryInterface},a}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery"),require("popper.js"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","popper.js","./util.js"],t):(e=e||self).Dropdown=t(e.jQuery,e.Popper,e.Util)}(this,function(u,o,s){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function t(t,e){var n,i=Object.keys(t);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(t),e&&(n=n.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),i.push.apply(i,n)),i}function a(r){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?t(Object(o),!0).forEach(function(e){var t,n,i;t=r,i=o[n=e],n in t?Object.defineProperty(t,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[n]=i}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):t(Object(o)).forEach(function(e){Object.defineProperty(r,e,Object.getOwnPropertyDescriptor(o,e))})}return r}u=u&&u.hasOwnProperty("default")?u.default:u,o=o&&o.hasOwnProperty("default")?o.default:o,s=s&&s.hasOwnProperty("default")?s.default:s;var l="dropdown",d="bs.dropdown",f="."+d,e=".data-api",n=u.fn[l],h=new RegExp("38|40|27"),p={HIDE:"hide"+f,HIDDEN:"hidden"+f,SHOW:"show"+f,SHOWN:"shown"+f,CLICK:"click"+f,CLICK_DATA_API:"click"+f+e,KEYDOWN_DATA_API:"keydown"+f+e,KEYUP_DATA_API:"keyup"+f+e},m="disabled",g="show",v="dropup",_="dropright",b="dropleft",y="dropdown-menu-right",w="position-static",E='[data-toggle="dropdown"]',i=".dropdown form",D=".dropdown-menu",O=".navbar-nav",S=".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",T="top-start",C="top-end",I="bottom-start",A="bottom-end",P="right-start",N="left-start",j={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic",popperConfig:null},k={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string",popperConfig:"(null|object)"},c=function(){function c(e,t){this._element=e,this._popper=null,this._config=this._getConfig(t),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var e,t,n,i=c.prototype;return i.toggle=function(){var e;this._element.disabled||u(this._element).hasClass(m)||(e=u(this._menu).hasClass(g),c._clearMenus(),e||this.show(!0))},i.show=function(e){if(void 0===e&&(e=!1),!(this._element.disabled||u(this._element).hasClass(m)||u(this._menu).hasClass(g))){var t={relatedTarget:this._element},n=u.Event(p.SHOW,t),i=c._getParentFromElement(this._element);if(u(i).trigger(n),!n.isDefaultPrevented()){if(!this._inNavbar&&e){if(void 0===o)throw new TypeError("Bootstrap's dropdowns require Popper.js (https://popper.js.org/)");var r=this._element;"parent"===this._config.reference?r=i:s.isElement(this._config.reference)&&(r=this._config.reference,void 0!==this._config.reference.jquery&&(r=this._config.reference[0])),"scrollParent"!==this._config.boundary&&u(i).addClass(w),this._popper=new o(r,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===u(i).closest(O).length&&u(document.body).children().on("mouseover",null,u.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),u(this._menu).toggleClass(g),u(i).toggleClass(g).trigger(u.Event(p.SHOWN,t))}}},i.hide=function(){var e,t,n;this._element.disabled||u(this._element).hasClass(m)||!u(this._menu).hasClass(g)||(e={relatedTarget:this._element},t=u.Event(p.HIDE,e),n=c._getParentFromElement(this._element),u(n).trigger(t),t.isDefaultPrevented()||(this._popper&&this._popper.destroy(),u(this._menu).toggleClass(g),u(n).toggleClass(g).trigger(u.Event(p.HIDDEN,e))))},i.dispose=function(){u.removeData(this._element,d),u(this._element).off(f),this._element=null,(this._menu=null)!==this._popper&&(this._popper.destroy(),this._popper=null)},i.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},i._addEventListeners=function(){var t=this;u(this._element).on(p.CLICK,function(e){e.preventDefault(),e.stopPropagation(),t.toggle()})},i._getConfig=function(e){return e=a({},this.constructor.Default,{},u(this._element).data(),{},e),s.typeCheckConfig(l,e,this.constructor.DefaultType),e},i._getMenuElement=function(){var e;return this._menu||(e=c._getParentFromElement(this._element))&&(this._menu=e.querySelector(D)),this._menu},i._getPlacement=function(){var e=u(this._element.parentNode),t=I;return e.hasClass(v)?(t=T,u(this._menu).hasClass(y)&&(t=C)):e.hasClass(_)?t=P:e.hasClass(b)?t=N:u(this._menu).hasClass(y)&&(t=A),t},i._detectNavbar=function(){return 0<u(this._element).closest(".navbar").length},i._getOffset=function(){var t=this,e={};return"function"==typeof this._config.offset?e.fn=function(e){return e.offsets=a({},e.offsets,{},t._config.offset(e.offsets,t._element)||{}),e}:e.offset=this._config.offset,e},i._getPopperConfig=function(){var e={placement:this._getPlacement(),modifiers:{offset:this._getOffset(),flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(e.modifiers.applyStyle={enabled:!1}),a({},e,{},this._config.popperConfig)},c._jQueryInterface=function(t){return this.each(function(){var e=u(this).data(d);if(e||(e=new c(this,"object"==typeof t?t:null),u(this).data(d,e)),"string"==typeof t){if(void 0===e[t])throw new TypeError('No method named "'+t+'"');e[t]()}})},c._clearMenus=function(e){if(!e||3!==e.which&&("keyup"!==e.type||9===e.which))for(var t=[].slice.call(document.querySelectorAll(E)),n=0,i=t.length;n<i;n++){var r,o,s=c._getParentFromElement(t[n]),a=u(t[n]).data(d),l={relatedTarget:t[n]};e&&"click"===e.type&&(l.clickEvent=e),a&&(r=a._menu,u(s).hasClass(g)&&(e&&("click"===e.type&&/input|textarea/i.test(e.target.tagName)||"keyup"===e.type&&9===e.which)&&u.contains(s,e.target)||(o=u.Event(p.HIDE,l),u(s).trigger(o),o.isDefaultPrevented()||("ontouchstart"in document.documentElement&&u(document.body).children().off("mouseover",null,u.noop),t[n].setAttribute("aria-expanded","false"),a._popper&&a._popper.destroy(),u(r).removeClass(g),u(s).removeClass(g).trigger(u.Event(p.HIDDEN,l))))))}},c._getParentFromElement=function(e){var t,n=s.getSelectorFromElement(e);return n&&(t=document.querySelector(n)),t||e.parentNode},c._dataApiKeydownHandler=function(e){if((/input|textarea/i.test(e.target.tagName)?!(32===e.which||27!==e.which&&(40!==e.which&&38!==e.which||u(e.target).closest(D).length)):h.test(e.which))&&(e.preventDefault(),e.stopPropagation(),!this.disabled&&!u(this).hasClass(m))){var t,n=c._getParentFromElement(this),i=u(n).hasClass(g);if(i||27!==e.which){if(!i||i&&(27===e.which||32===e.which))return 27===e.which&&(t=n.querySelector(E),u(t).trigger("focus")),void u(this).trigger("click");var r,o=[].slice.call(n.querySelectorAll(S)).filter(function(e){return u(e).is(":visible")});0!==o.length&&(r=o.indexOf(e.target),38===e.which&&0<r&&r--,40===e.which&&r<o.length-1&&r++,r<0&&(r=0),o[r].focus())}}},e=c,n=[{key:"VERSION",get:function(){return"4.4.1"}},{key:"Default",get:function(){return j}},{key:"DefaultType",get:function(){return k}}],(t=null)&&r(e.prototype,t),n&&r(e,n),c}();return u(document).on(p.KEYDOWN_DATA_API,E,c._dataApiKeydownHandler).on(p.KEYDOWN_DATA_API,D,c._dataApiKeydownHandler).on(p.CLICK_DATA_API+" "+p.KEYUP_DATA_API,c._clearMenus).on(p.CLICK_DATA_API,E,function(e){e.preventDefault(),e.stopPropagation(),c._jQueryInterface.call(u(this),"toggle")}).on(p.CLICK_DATA_API,i,function(e){e.stopPropagation()}),u.fn[l]=c._jQueryInterface,u.fn[l].Constructor=c,u.fn[l].noConflict=function(){return u.fn[l]=n,c._jQueryInterface},c}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","./util.js"],t):(e=e||self).Modal=t(e.jQuery,e.Util)}(this,function(a,l){"use strict";function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function t(t,e){var n,i=Object.keys(t);return Object.getOwnPropertySymbols&&(n=Object.getOwnPropertySymbols(t),e&&(n=n.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),i.push.apply(i,n)),i}function s(r){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?t(Object(o),!0).forEach(function(e){var t,n,i;t=r,i=o[n=e],n in t?Object.defineProperty(t,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[n]=i}):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(o)):t(Object(o)).forEach(function(e){Object.defineProperty(r,e,Object.getOwnPropertyDescriptor(o,e))})}return r}a=a&&a.hasOwnProperty("default")?a.default:a,l=l&&l.hasOwnProperty("default")?l.default:l;var c="modal",u="bs.modal",d="."+u,e=a.fn[c],f={backdrop:!0,keyboard:!0,focus:!0,show:!0},h={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},p={HIDE:"hide"+d,HIDE_PREVENTED:"hidePrevented"+d,HIDDEN:"hidden"+d,SHOW:"show"+d,SHOWN:"shown"+d,FOCUSIN:"focusin"+d,RESIZE:"resize"+d,CLICK_DISMISS:"click.dismiss"+d,KEYDOWN_DISMISS:"keydown.dismiss"+d,MOUSEUP_DISMISS:"mouseup.dismiss"+d,MOUSEDOWN_DISMISS:"mousedown.dismiss"+d,CLICK_DATA_API:"click"+d+".data-api"},m="modal-dialog-scrollable",g="modal-scrollbar-measure",v="modal-backdrop",_="modal-open",b="fade",y="show",w="modal-static",E=".modal-dialog",D=".modal-body",n='[data-toggle="modal"]',O='[data-dismiss="modal"]',S=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",T=".sticky-top",C=function(){function r(e,t){this._config=this._getConfig(t),this._element=e,this._dialog=e.querySelector(E),this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollbarWidth=0}var e,t,n,i=r.prototype;return i.toggle=function(e){return this._isShown?this.hide():this.show(e)},i.show=function(e){var t,n=this;this._isShown||this._isTransitioning||(a(this._element).hasClass(b)&&(this._isTransitioning=!0),t=a.Event(p.SHOW,{relatedTarget:e}),a(this._element).trigger(t),this._isShown||t.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),a(this._element).on(p.CLICK_DISMISS,O,function(e){return n.hide(e)}),a(this._dialog).on(p.MOUSEDOWN_DISMISS,function(){a(n._element).one(p.MOUSEUP_DISMISS,function(e){a(e.target).is(n._element)&&(n._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return n._showElement(e)})))},i.hide=function(e){var t,n,i,r=this;e&&e.preventDefault(),this._isShown&&!this._isTransitioning&&(t=a.Event(p.HIDE),a(this._element).trigger(t),this._isShown&&!t.isDefaultPrevented()&&(this._isShown=!1,(n=a(this._element).hasClass(b))&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),a(document).off(p.FOCUSIN),a(this._element).removeClass(y),a(this._element).off(p.CLICK_DISMISS),a(this._dialog).off(p.MOUSEDOWN_DISMISS),n?(i=l.getTransitionDurationFromElement(this._element),a(this._element).one(l.TRANSITION_END,function(e){return r._hideModal(e)}).emulateTransitionEnd(i)):this._hideModal()))},i.dispose=function(){[window,this._element,this._dialog].forEach(function(e){return a(e).off(d)}),a(document).off(p.FOCUSIN),a.removeData(this._element,u),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._isTransitioning=null,this._scrollbarWidth=null},i.handleUpdate=function(){this._adjustDialog()},i._getConfig=function(e){return e=s({},f,{},e),l.typeCheckConfig(c,e,h),e},i._triggerBackdropTransition=function(){var e=this;if("static"===this._config.backdrop){var t=a.Event(p.HIDE_PREVENTED);if(a(this._element).trigger(t),t.defaultPrevented)return;this._element.classList.add(w);var n=l.getTransitionDurationFromElement(this._element);a(this._element).one(l.TRANSITION_END,function(){e._element.classList.remove(w)}).emulateTransitionEnd(n),this._element.focus()}else this.hide()},i._showElement=function(e){var t=this,n=a(this._element).hasClass(b),i=this._dialog?this._dialog.querySelector(D):null;this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),a(this._dialog).hasClass(m)&&i?i.scrollTop=0:this._element.scrollTop=0,n&&l.reflow(this._element),a(this._element).addClass(y),this._config.focus&&this._enforceFocus();function r(){t._config.focus&&t._element.focus(),t._isTransitioning=!1,a(t._element).trigger(s)}var o,s=a.Event(p.SHOWN,{relatedTarget:e});n?(o=l.getTransitionDurationFromElement(this._dialog),a(this._dialog).one(l.TRANSITION_END,r).emulateTransitionEnd(o)):r()},i._enforceFocus=function(){var t=this;a(document).off(p.FOCUSIN).on(p.FOCUSIN,function(e){document!==e.target&&t._element!==e.target&&0===a(t._element).has(e.target).length&&t._element.focus()})},i._setEscapeEvent=function(){var t=this;this._isShown&&this._config.keyboard?a(this._element).on(p.KEYDOWN_DISMISS,function(e){27===e.which&&t._triggerBackdropTransition()}):this._isShown||a(this._element).off(p.KEYDOWN_DISMISS)},i._setResizeEvent=function(){var t=this;this._isShown?a(window).on(p.RESIZE,function(e){return t.handleUpdate(e)}):a(window).off(p.RESIZE)},i._hideModal=function(){var e=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._isTransitioning=!1,this._showBackdrop(function(){a(document.body).removeClass(_),e._resetAdjustments(),e._resetScrollbar(),a(e._element).trigger(p.HIDDEN)})},i._removeBackdrop=function(){this._backdrop&&(a(this._backdrop).remove(),this._backdrop=null)},i._showBackdrop=function(e){var t,n,i=this,r=a(this._element).hasClass(b)?b:"";if(this._isShown&&this._config.backdrop){if(this._backdrop=document.createElement("div"),this._backdrop.className=v,r&&this._backdrop.classList.add(r),a(this._backdrop).appendTo(document.body),a(this._element).on(p.CLICK_DISMISS,function(e){i._ignoreBackdropClick?i._ignoreBackdropClick=!1:e.target===e.currentTarget&&i._triggerBackdropTransition()}),r&&l.reflow(this._backdrop),a(this._backdrop).addClass(y),!e)return;if(!r)return void e();var o=l.getTransitionDurationFromElement(this._backdrop);a(this._backdrop).one(l.TRANSITION_END,e).emulateTransitionEnd(o)}else{!this._isShown&&this._backdrop?(a(this._backdrop).removeClass(y),t=function(){i._removeBackdrop(),e&&e()},a(this._element).hasClass(b)?(n=l.getTransitionDurationFromElement(this._backdrop),a(this._backdrop).one(l.TRANSITION_END,t).emulateTransitionEnd(n)):t()):e&&e()}},i._adjustDialog=function(){var e=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&e&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!e&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},i._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},i._checkScrollbar=function(){var e=document.body.getBoundingClientRect();this._isBodyOverflowing=e.left+e.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},i._setScrollbar=function(){var e,t,n,i,r=this;this._isBodyOverflowing&&(e=[].slice.call(document.querySelectorAll(S)),t=[].slice.call(document.querySelectorAll(T)),a(e).each(function(e,t){var n=t.style.paddingRight,i=a(t).css("padding-right");a(t).data("padding-right",n).css("padding-right",parseFloat(i)+r._scrollbarWidth+"px")}),a(t).each(function(e,t){var n=t.style.marginRight,i=a(t).css("margin-right");a(t).data("margin-right",n).css("margin-right",parseFloat(i)-r._scrollbarWidth+"px")}),n=document.body.style.paddingRight,i=a(document.body).css("padding-right"),a(document.body).data("padding-right",n).css("padding-right",parseFloat(i)+this._scrollbarWidth+"px")),a(document.body).addClass(_)},i._resetScrollbar=function(){var e=[].slice.call(document.querySelectorAll(S));a(e).each(function(e,t){var n=a(t).data("padding-right");a(t).removeData("padding-right"),t.style.paddingRight=n||""});var t=[].slice.call(document.querySelectorAll(""+T));a(t).each(function(e,t){var n=a(t).data("margin-right");void 0!==n&&a(t).css("margin-right",n).removeData("margin-right")});var n=a(document.body).data("padding-right");a(document.body).removeData("padding-right"),document.body.style.paddingRight=n||""},i._getScrollbarWidth=function(){var e=document.createElement("div");e.className=g,document.body.appendChild(e);var t=e.getBoundingClientRect().width-e.clientWidth;return document.body.removeChild(e),t},r._jQueryInterface=function(n,i){return this.each(function(){var e=a(this).data(u),t=s({},f,{},a(this).data(),{},"object"==typeof n&&n?n:{});if(e||(e=new r(this,t),a(this).data(u,e)),"string"==typeof n){if(void 0===e[n])throw new TypeError('No method named "'+n+'"');e[n](i)}else t.show&&e.show(i)})},e=r,n=[{key:"VERSION",get:function(){return"4.4.1"}},{key:"Default",get:function(){return f}}],(t=null)&&o(e.prototype,t),n&&o(e,n),r}();return a(document).on(p.CLICK_DATA_API,n,function(e){var t,n=this,i=l.getSelectorFromElement(this);i&&(t=document.querySelector(i));var r=a(t).data(u)?"toggle":s({},a(t).data(),{},a(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||e.preventDefault();var o=a(t).one(p.SHOW,function(e){e.isDefaultPrevented()||o.one(p.HIDDEN,function(){a(n).is(":visible")&&n.focus()})});C._jQueryInterface.call(a(t),r,this)}),a.fn[c]=C._jQueryInterface,a.fn[c].Constructor=C,a.fn[c].noConflict=function(){return a.fn[c]=e,C._jQueryInterface},C}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("jquery"),require("./util.js")):"function"==typeof define&&define.amd?define(["jquery","./util.js"],t):(e=e||self).Tab=t(e.jQuery,e.Util)}(this,function(c,u){"use strict";function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}c=c&&c.hasOwnProperty("default")?c.default:c,u=u&&u.hasOwnProperty("default")?u.default:u;var s="bs.tab",e="."+s,t=c.fn.tab,d={HIDE:"hide"+e,HIDDEN:"hidden"+e,SHOW:"show"+e,SHOWN:"shown"+e,CLICK_DATA_API:"click"+e+".data-api"},a="dropdown-menu",f="active",h="disabled",l="fade",p="show",m=".dropdown",g=".nav, .list-group",v=".active",_="> li > .active",n='[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',b=".dropdown-toggle",y="> .dropdown-menu .active",i=function(){function i(e){this._element=e}var e,t,n,r=i.prototype;return r.show=function(){var e,t,n,i,r,o,s,a,l=this;this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&c(this._element).hasClass(f)||c(this._element).hasClass(h)||(t=c(this._element).closest(g)[0],n=u.getSelectorFromElement(this._element),t&&(i="UL"===t.nodeName||"OL"===t.nodeName?_:v,r=(r=c.makeArray(c(t).find(i)))[r.length-1]),o=c.Event(d.HIDE,{relatedTarget:this._element}),s=c.Event(d.SHOW,{relatedTarget:r}),r&&c(r).trigger(o),c(this._element).trigger(s),s.isDefaultPrevented()||o.isDefaultPrevented()||(n&&(e=document.querySelector(n)),this._activate(this._element,t),a=function(){var e=c.Event(d.HIDDEN,{relatedTarget:l._element}),t=c.Event(d.SHOWN,{relatedTarget:r});c(r).trigger(e),c(l._element).trigger(t)},e?this._activate(e,e.parentNode,a):a()))},r.dispose=function(){c.removeData(this._element,s),this._element=null},r._activate=function(e,t,n){function i(){return o._transitionComplete(e,s,n)}var r,o=this,s=(!t||"UL"!==t.nodeName&&"OL"!==t.nodeName?c(t).children(v):c(t).find(_))[0],a=n&&s&&c(s).hasClass(l);s&&a?(r=u.getTransitionDurationFromElement(s),c(s).removeClass(p).one(u.TRANSITION_END,i).emulateTransitionEnd(r)):i()},r._transitionComplete=function(e,t,n){var i,r,o;t&&(c(t).removeClass(f),(i=c(t.parentNode).find(y)[0])&&c(i).removeClass(f),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!1)),c(e).addClass(f),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!0),u.reflow(e),e.classList.contains(l)&&e.classList.add(p),e.parentNode&&c(e.parentNode).hasClass(a)&&((r=c(e).closest(m)[0])&&(o=[].slice.call(r.querySelectorAll(b)),c(o).addClass(f)),e.setAttribute("aria-expanded",!0)),n&&n()},i._jQueryInterface=function(n){return this.each(function(){var e=c(this),t=e.data(s);if(t||(t=new i(this),e.data(s,t)),"string"==typeof n){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n]()}})},e=i,n=[{key:"VERSION",get:function(){return"4.4.1"}}],(t=null)&&o(e.prototype,t),n&&o(e,n),i}();return c(document).on(d.CLICK_DATA_API,n,function(e){e.preventDefault(),i._jQueryInterface.call(c(this),"show")}),c.fn.tab=i._jQueryInterface,c.fn.tab.Constructor=i,c.fn.tab.noConflict=function(){return c.fn.tab=t,i._jQueryInterface},i});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5tb2JpbGUuY3VzdG9tLmpzIiwicG9wcGVyLmpzIiwidXRpbC5qcyIsImFsZXJ0LmpzIiwiYnV0dG9uLmpzIiwiY2Fyb3VzZWwuanMiLCJjb2xsYXBzZS5qcyIsImRyb3Bkb3duLmpzIiwibW9kYWwuanMiLCJ0YWIuanMiXSwibmFtZXMiOlsicm9vdCIsImRvYyIsImZhY3RvcnkiLCJkZWZpbmUiLCJhbWQiLCIkIiwibW9iaWxlIiwialF1ZXJ5IiwidGhpcyIsImRvY3VtZW50Iiwid2luZG93IiwidW5kZWZpbmVkIiwic3VwcG9ydCIsIiRkb2N1bWVudCIsInN1cHBvcnRUb3VjaCIsInNjcm9sbEV2ZW50IiwidG91Y2hTdGFydEV2ZW50IiwidG91Y2hTdG9wRXZlbnQiLCJ0b3VjaE1vdmVFdmVudCIsInRyaWdnZXJDdXN0b21FdmVudCIsIm9iaiIsImV2ZW50VHlwZSIsImV2ZW50IiwiYnViYmxlIiwib3JpZ2luYWxUeXBlIiwidHlwZSIsInRyaWdnZXIiLCJkaXNwYXRjaCIsImNhbGwiLCJ0aHJlc2hvbGQiLCJpIiwiZGF0YVByb3BlcnR5TmFtZSIsInRvdWNoVGFyZ2V0UHJvcGVydHlOYW1lIiwidmlydHVhbEV2ZW50TmFtZXMiLCJzcGxpdCIsInRvdWNoRXZlbnRQcm9wcyIsIm1vdXNlSG9va1Byb3BzIiwibW91c2VIb29rcyIsInByb3BzIiwibW91c2VFdmVudFByb3BzIiwiY29uY2F0IiwiYWN0aXZlRG9jSGFuZGxlcnMiLCJyZXNldFRpbWVySUQiLCJzdGFydFgiLCJzdGFydFkiLCJkaWRTY3JvbGwiLCJjbGlja0Jsb2NrTGlzdCIsImJsb2NrTW91c2VUcmlnZ2VycyIsImJsb2NrVG91Y2hUcmlnZ2VycyIsImV2ZW50Q2FwdHVyZVN1cHBvcnRlZCIsIm5leHRUb3VjaElEIiwibGFzdFRvdWNoSUQiLCJnZXROYXRpdmVFdmVudCIsIm9yaWdpbmFsRXZlbnQiLCJnZXRWaXJ0dWFsQmluZGluZ0ZsYWdzIiwiZWxlbWVudCIsImIiLCJrIiwiZmxhZ3MiLCJkYXRhIiwiaGFzVmlydHVhbEJpbmRpbmciLCJwYXJlbnROb2RlIiwiZGlzYWJsZVRvdWNoQmluZGluZ3MiLCJkaXNhYmxlTW91c2VCaW5kaW5ncyIsInN0YXJ0UmVzZXRUaW1lciIsImNsZWFyUmVzZXRUaW1lciIsInNldFRpbWVvdXQiLCJsZW5ndGgiLCJ2bW91c2UiLCJyZXNldFRpbWVyRHVyYXRpb24iLCJjbGVhclRpbWVvdXQiLCJ0cmlnZ2VyVmlydHVhbEV2ZW50IiwidmUiLCJnZXRDbG9zZXN0RWxlbWVudFdpdGhWaXJ0dWFsQmluZGluZyIsInRhcmdldCIsIm9lIiwibmUiLCJwcm9wIiwiY3QiLCJ0b3VjaCIsImoiLCJsZW4iLCJ0IiwiRXZlbnQiLCJzZWFyY2giLCJ3aGljaCIsInRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsImNyZWF0ZVZpcnR1YWxFdmVudCIsIm1vdXNlRXZlbnRDYWxsYmFjayIsInRvdWNoSUQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJwcmV2ZW50RGVmYXVsdCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwic3RvcFByb3BhZ2F0aW9uIiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJoYW5kbGVUb3VjaFN0YXJ0IiwicGFnZVgiLCJwYWdlWSIsImhhbmRsZVNjcm9sbCIsImhhbmRsZVRvdWNoTW92ZSIsImRpZENhbmNlbCIsIm1vdmVUaHJlc2hvbGQiLCJtb3ZlRGlzdGFuY2VUaHJlc2hvbGQiLCJNYXRoIiwiYWJzIiwiaGFuZGxlVG91Y2hFbmQiLCJwdXNoIiwieCIsImNsaWVudFgiLCJ5IiwiY2xpZW50WSIsImhhc1ZpcnR1YWxCaW5kaW5ncyIsImVsZSIsImJpbmRpbmdzIiwiZHVtbXlNb3VzZUhhbmRsZXIiLCJjbGlja0Rpc3RhbmNlVGhyZXNob2xkIiwic3BlY2lhbCIsInJlYWxUeXBlIiwic3Vic3RyIiwic2V0dXAiLCJiaW5kIiwidGVhcmRvd24iLCJ1bmJpbmQiLCIkdGhpcyIsInJlbW92ZURhdGEiLCJnZXRTcGVjaWFsRXZlbnRPYmplY3QiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsIm8iLCJjbnQiLCJleHRlbmQiLCJlYWNoIiwibmFtZSIsImZuIiwiYXR0ckZuIiwic2Nyb2xsc3RhcnQiLCJlbmFibGVkIiwic2Nyb2xsaW5nIiwidGltZXIiLCJ0aGlzT2JqZWN0Iiwic3RhdGUiLCJ0YXAiLCJ0YXBob2xkVGhyZXNob2xkIiwiZW1pdFRhcE9uVGFwaG9sZCIsImlzVGFwaG9sZCIsIm9yaWdUYXJnZXQiLCJjbGVhclRhcFRpbWVyIiwiY2xlYXJUYXBIYW5kbGVycyIsImNsaWNrSGFuZGxlciIsInN3aXBlIiwic2Nyb2xsU3VwcmVzc2lvblRocmVzaG9sZCIsImR1cmF0aW9uVGhyZXNob2xkIiwiaG9yaXpvbnRhbERpc3RhbmNlVGhyZXNob2xkIiwidmVydGljYWxEaXN0YW5jZVRocmVzaG9sZCIsImdldExvY2F0aW9uIiwid2luUGFnZVgiLCJwYWdlWE9mZnNldCIsIndpblBhZ2VZIiwicGFnZVlPZmZzZXQiLCJmbG9vciIsInN0YXJ0IiwibG9jYXRpb24iLCJ0aW1lIiwiRGF0ZSIsImdldFRpbWUiLCJjb29yZHMiLCJvcmlnaW4iLCJzdG9wIiwiaGFuZGxlU3dpcGUiLCJkaXJlY3Rpb24iLCJzd2lwZXN0YXJ0Iiwic3dpcGVzdG9wIiwiZXZlbnRJblByb2dyZXNzIiwiY29udGV4dCIsImV2ZW50cyIsImVtaXR0ZWQiLCJtb3ZlIiwib2ZmIiwib24iLCJvbmUiLCJzY3JvbGxzdG9wIiwidGFwaG9sZCIsInN3aXBlbGVmdCIsInN3aXBlcmlnaHQiLCJzb3VyY2VFdmVudCIsIm5vb3AiLCJnbG9iYWwiLCJleHBvcnRzIiwibW9kdWxlIiwiUG9wcGVyIiwiaXNCcm93c2VyIiwibmF2aWdhdG9yIiwidGltZW91dER1cmF0aW9uIiwibG9uZ2VyVGltZW91dEJyb3dzZXJzIiwidXNlckFnZW50IiwiaW5kZXhPZiIsImRlYm91bmNlIiwiUHJvbWlzZSIsImNhbGxlZCIsInJlc29sdmUiLCJ0aGVuIiwic2NoZWR1bGVkIiwiaXNGdW5jdGlvbiIsImZ1bmN0aW9uVG9DaGVjayIsInRvU3RyaW5nIiwiZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5IiwicHJvcGVydHkiLCJub2RlVHlwZSIsImNzcyIsIm93bmVyRG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQYXJlbnROb2RlIiwibm9kZU5hbWUiLCJob3N0IiwiZ2V0U2Nyb2xsUGFyZW50IiwiYm9keSIsIl9nZXRTdHlsZUNvbXB1dGVkUHJvcCIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwidGVzdCIsImdldFJlZmVyZW5jZU5vZGUiLCJyZWZlcmVuY2UiLCJyZWZlcmVuY2VOb2RlIiwiaXNJRTExIiwiTVNJbnB1dE1ldGhvZENvbnRleHQiLCJkb2N1bWVudE1vZGUiLCJpc0lFMTAiLCJpc0lFIiwidmVyc2lvbiIsImdldE9mZnNldFBhcmVudCIsImRvY3VtZW50RWxlbWVudCIsIm5vT2Zmc2V0UGFyZW50Iiwib2Zmc2V0UGFyZW50IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiZ2V0Um9vdCIsIm5vZGUiLCJmaW5kQ29tbW9uT2Zmc2V0UGFyZW50IiwiZWxlbWVudDEiLCJlbGVtZW50MiIsIm9yZGVyIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJOb2RlIiwiRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HIiwiZW5kIiwicmFuZ2UiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0Iiwic2V0RW5kIiwiY29tbW9uQW5jZXN0b3JDb250YWluZXIiLCJjb250YWlucyIsImZpcnN0RWxlbWVudENoaWxkIiwiZWxlbWVudDFyb290IiwiZ2V0U2Nyb2xsIiwidXBwZXJTaWRlIiwiYXJndW1lbnRzIiwiaHRtbCIsInNjcm9sbGluZ0VsZW1lbnQiLCJnZXRCb3JkZXJzU2l6ZSIsInN0eWxlcyIsImF4aXMiLCJzaWRlQSIsInNpZGVCIiwicGFyc2VGbG9hdCIsImdldFNpemUiLCJjb21wdXRlZFN0eWxlIiwibWF4IiwicGFyc2VJbnQiLCJnZXRXaW5kb3dTaXplcyIsImhlaWdodCIsIndpZHRoIiwiY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiY3JlYXRlQ2xhc3MiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwicHJvdG90eXBlIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwidmFsdWUiLCJfZXh0ZW5kcyIsImFzc2lnbiIsInNvdXJjZSIsImhhc093blByb3BlcnR5IiwiZ2V0Q2xpZW50UmVjdCIsIm9mZnNldHMiLCJyaWdodCIsImxlZnQiLCJib3R0b20iLCJ0b3AiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwicmVjdCIsInJlc3VsdCIsInNpemVzIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJob3JpelNjcm9sbGJhciIsIm9mZnNldFdpZHRoIiwidmVydFNjcm9sbGJhciIsIm9mZnNldEhlaWdodCIsImdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZSIsImNoaWxkcmVuIiwicGFyZW50IiwiZml4ZWRQb3NpdGlvbiIsImlzSFRNTCIsImNoaWxkcmVuUmVjdCIsInBhcmVudFJlY3QiLCJzY3JvbGxQYXJlbnQiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckxlZnRXaWR0aCIsIm1hcmdpblRvcCIsIm1hcmdpbkxlZnQiLCJzdWJ0cmFjdCIsIm1vZGlmaWVyIiwiaW5jbHVkZVNjcm9sbCIsImdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQiLCJwYXJlbnRFbGVtZW50IiwiZWwiLCJnZXRCb3VuZGFyaWVzIiwicG9wcGVyIiwicGFkZGluZyIsImJvdW5kYXJpZXNFbGVtZW50IiwiYm91bmRhcmllc05vZGUiLCJfZ2V0V2luZG93U2l6ZXMiLCJib3VuZGFyaWVzIiwiZXhjbHVkZVNjcm9sbCIsInJlbGF0aXZlT2Zmc2V0IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlIiwiaXNGaXhlZCIsImlzUGFkZGluZ051bWJlciIsImNvbXB1dGVBdXRvUGxhY2VtZW50IiwicGxhY2VtZW50IiwicmVmUmVjdCIsInJlY3RzIiwic29ydGVkQXJlYXMiLCJrZXlzIiwibWFwIiwiYXJlYSIsIl9yZWYiLCJzb3J0IiwiYSIsImZpbHRlcmVkQXJlYXMiLCJmaWx0ZXIiLCJfcmVmMiIsImNvbXB1dGVkUGxhY2VtZW50IiwidmFyaWF0aW9uIiwiZ2V0UmVmZXJlbmNlT2Zmc2V0cyIsImdldE91dGVyU2l6ZXMiLCJtYXJnaW5Cb3R0b20iLCJtYXJnaW5SaWdodCIsImdldE9wcG9zaXRlUGxhY2VtZW50IiwiaGFzaCIsInJlcGxhY2UiLCJtYXRjaGVkIiwiZ2V0UG9wcGVyT2Zmc2V0cyIsInJlZmVyZW5jZU9mZnNldHMiLCJwb3BwZXJSZWN0IiwicG9wcGVyT2Zmc2V0cyIsImlzSG9yaXoiLCJtYWluU2lkZSIsInNlY29uZGFyeVNpZGUiLCJtZWFzdXJlbWVudCIsInNlY29uZGFyeU1lYXN1cmVtZW50IiwiZmluZCIsImFyciIsImNoZWNrIiwiQXJyYXkiLCJydW5Nb2RpZmllcnMiLCJtb2RpZmllcnMiLCJlbmRzIiwic2xpY2UiLCJmaW5kSW5kZXgiLCJjdXIiLCJtYXRjaCIsImZvckVhY2giLCJjb25zb2xlIiwid2FybiIsImlzTW9kaWZpZXJFbmFibGVkIiwibW9kaWZpZXJOYW1lIiwic29tZSIsImdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSIsInByZWZpeGVzIiwidXBwZXJQcm9wIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJwcmVmaXgiLCJ0b0NoZWNrIiwic3R5bGUiLCJnZXRXaW5kb3ciLCJzZXR1cEV2ZW50TGlzdGVuZXJzIiwib3B0aW9ucyIsInVwZGF0ZUJvdW5kIiwicGFzc2l2ZSIsInNjcm9sbEVsZW1lbnQiLCJhdHRhY2hUb1Njcm9sbFBhcmVudHMiLCJjYWxsYmFjayIsInNjcm9sbFBhcmVudHMiLCJpc0JvZHkiLCJldmVudHNFbmFibGVkIiwiZGlzYWJsZUV2ZW50TGlzdGVuZXJzIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJzY2hlZHVsZVVwZGF0ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpc051bWVyaWMiLCJuIiwiaXNOYU4iLCJpc0Zpbml0ZSIsInNldFN0eWxlcyIsInVuaXQiLCJnZXRSb3VuZGVkT2Zmc2V0cyIsInNob3VsZFJvdW5kIiwibm9Sb3VuZCIsInYiLCJfZGF0YSRvZmZzZXRzIiwicm91bmQiLCJyZWZlcmVuY2VXaWR0aCIsInBvcHBlcldpZHRoIiwiaXNWZXJ0aWNhbCIsImlzVmFyaWF0aW9uIiwiaG9yaXpvbnRhbFRvSW50ZWdlciIsInZlcnRpY2FsVG9JbnRlZ2VyIiwiaXNGaXJlZm94IiwiaXNNb2RpZmllclJlcXVpcmVkIiwicmVxdWVzdGluZ05hbWUiLCJyZXF1ZXN0ZWROYW1lIiwiX3JlcXVlc3RpbmciLCJyZXF1ZXN0ZWQiLCJyZXF1ZXN0aW5nIiwiaXNSZXF1aXJlZCIsInBsYWNlbWVudHMiLCJ2YWxpZFBsYWNlbWVudHMiLCJjbG9ja3dpc2UiLCJjb3VudGVyIiwiaW5kZXgiLCJyZXZlcnNlIiwiQkVIQVZJT1JTIiwicGFyc2VPZmZzZXQiLCJvZmZzZXQiLCJiYXNlUGxhY2VtZW50IiwidXNlSGVpZ2h0IiwiZnJhZ21lbnRzIiwiZnJhZyIsInRyaW0iLCJkaXZpZGVyIiwic3BsaXRSZWdleCIsIm9wIiwibWVyZ2VXaXRoUHJldmlvdXMiLCJyZWR1Y2UiLCJzdHIiLCJ0b1ZhbHVlIiwiaW5kZXgyIiwiRGVmYXVsdHMiLCJwb3NpdGlvbkZpeGVkIiwicmVtb3ZlT25EZXN0cm95Iiwib25DcmVhdGUiLCJvblVwZGF0ZSIsInNoaWZ0Iiwic2lkZSIsInNoaWZ0T2Zmc2V0cyIsInNoaWZ0dmFyaWF0aW9uIiwicHJldmVudE92ZXJmbG93IiwidHJhbnNmb3JtUHJvcCIsInBvcHBlclN0eWxlcyIsInRyYW5zZm9ybSIsInByaW9yaXR5IiwicHJpbWFyeSIsImVzY2FwZVdpdGhSZWZlcmVuY2UiLCJzZWNvbmRhcnkiLCJtaW4iLCJrZWVwVG9nZXRoZXIiLCJvcFNpZGUiLCJhcnJvdyIsIl9kYXRhJG9mZnNldHMkYXJyb3ciLCJhcnJvd0VsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwic2lkZUNhcGl0YWxpemVkIiwidG9Mb3dlckNhc2UiLCJhbHRTaWRlIiwiYXJyb3dFbGVtZW50U2l6ZSIsImNlbnRlciIsInBvcHBlck1hcmdpblNpZGUiLCJwb3BwZXJCb3JkZXJTaWRlIiwic2lkZVZhbHVlIiwiZmxpcCIsImZsaXBwZWQiLCJvcmlnaW5hbFBsYWNlbWVudCIsInBsYWNlbWVudE9wcG9zaXRlIiwiZmxpcE9yZGVyIiwiYmVoYXZpb3IiLCJzdGVwIiwicmVmT2Zmc2V0cyIsIm92ZXJsYXBzUmVmIiwib3ZlcmZsb3dzTGVmdCIsIm92ZXJmbG93c1JpZ2h0Iiwib3ZlcmZsb3dzVG9wIiwib3ZlcmZsb3dzQm90dG9tIiwib3ZlcmZsb3dzQm91bmRhcmllcyIsImZsaXBwZWRWYXJpYXRpb25CeVJlZiIsImZsaXBWYXJpYXRpb25zIiwiZmxpcHBlZFZhcmlhdGlvbkJ5Q29udGVudCIsImZsaXBWYXJpYXRpb25zQnlDb250ZW50IiwiZmxpcHBlZFZhcmlhdGlvbiIsImlubmVyIiwic3VidHJhY3RMZW5ndGgiLCJoaWRlIiwiYm91bmQiLCJhdHRyaWJ1dGVzIiwiY29tcHV0ZVN0eWxlIiwibGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uIiwiZ3B1QWNjZWxlcmF0aW9uIiwiaW52ZXJ0VG9wIiwiaW52ZXJ0TGVmdCIsIm9mZnNldFBhcmVudFJlY3QiLCJwb3NpdGlvbiIsImRldmljZVBpeGVsUmF0aW8iLCJwcmVmaXhlZFByb3BlcnR5Iiwid2lsbENoYW5nZSIsIngtcGxhY2VtZW50IiwiYXJyb3dTdHlsZXMiLCJhcHBseVN0eWxlIiwic2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwib25Mb2FkIiwibW9kaWZpZXJPcHRpb25zIiwiaXNEZXN0cm95ZWQiLCJpc0NyZWF0ZWQiLCJyZW1vdmVDaGlsZCIsIl90aGlzIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidXBkYXRlIiwianF1ZXJ5IiwiZW5hYmxlRXZlbnRMaXN0ZW5lcnMiLCJVdGlscyIsIlBvcHBlclV0aWxzIiwicmVxdWlyZSIsInNlbGYiLCJVdGlsIiwiVFJBTlNJVElPTl9FTkQiLCJ0cmFuc2l0aW9uRW5kRW11bGF0b3IiLCJkdXJhdGlvbiIsInRyaWdnZXJUcmFuc2l0aW9uRW5kIiwiZ2V0VUlEIiwicmFuZG9tIiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRTZWxlY3RvckZyb21FbGVtZW50IiwiaHJlZkF0dHIiLCJzZWxlY3RvciIsImdldEF0dHJpYnV0ZSIsImVyciIsImdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50IiwidHJhbnNpdGlvbkR1cmF0aW9uIiwidHJhbnNpdGlvbkRlbGF5IiwiZmxvYXRUcmFuc2l0aW9uRHVyYXRpb24iLCJmbG9hdFRyYW5zaXRpb25EZWxheSIsInJlZmxvdyIsInN1cHBvcnRzVHJhbnNpdGlvbkVuZCIsIkJvb2xlYW4iLCJpc0VsZW1lbnQiLCJ0eXBlQ2hlY2tDb25maWciLCJjb21wb25lbnROYW1lIiwiY29uZmlnIiwiY29uZmlnVHlwZXMiLCJleHBlY3RlZFR5cGVzIiwidmFsdWVUeXBlIiwiUmVnRXhwIiwiRXJyb3IiLCJmaW5kU2hhZG93Um9vdCIsImF0dGFjaFNoYWRvdyIsImdldFJvb3ROb2RlIiwiU2hhZG93Um9vdCIsImpRdWVyeURldGVjdGlvbiIsImVtdWxhdGVUcmFuc2l0aW9uRW5kIiwiYmluZFR5cGUiLCJkZWxlZ2F0ZVR5cGUiLCJoYW5kbGUiLCJpcyIsImhhbmRsZU9iaiIsImhhbmRsZXIiLCJhcHBseSIsIkFsZXJ0IiwiX2RlZmluZVByb3BlcnRpZXMiLCJOQU1FIiwiREFUQV9LRVkiLCJFVkVOVF9LRVkiLCJKUVVFUllfTk9fQ09ORkxJQ1QiLCJDTE9TRSIsIkNMT1NFRCIsIkNMSUNLX0RBVEFfQVBJIiwiQ2xhc3NOYW1lIiwiX2VsZW1lbnQiLCJfcHJvdG8iLCJjbG9zZSIsInJvb3RFbGVtZW50IiwiX2dldFJvb3RFbGVtZW50IiwiX3RyaWdnZXJDbG9zZUV2ZW50IiwiX3JlbW92ZUVsZW1lbnQiLCJkaXNwb3NlIiwiY2xvc2VzdCIsImNsb3NlRXZlbnQiLCJyZW1vdmVDbGFzcyIsImhhc0NsYXNzIiwiX2Rlc3Ryb3lFbGVtZW50IiwiZGV0YWNoIiwicmVtb3ZlIiwiX2pRdWVyeUludGVyZmFjZSIsIiRlbGVtZW50IiwiX2hhbmRsZURpc21pc3MiLCJhbGVydEluc3RhbmNlIiwiZ2V0Iiwibm9Db25mbGljdCIsIkJ1dHRvbiIsIkRBVEFfQVBJX0tFWSIsIlNlbGVjdG9yIiwiRk9DVVNfQkxVUl9EQVRBX0FQSSIsIkxPQURfREFUQV9BUEkiLCJ0b2dnbGUiLCJpbnB1dCIsImFjdGl2ZUVsZW1lbnQiLCJ0cmlnZ2VyQ2hhbmdlRXZlbnQiLCJhZGRBcmlhUHJlc3NlZCIsImNoZWNrZWQiLCJjbGFzc0xpc3QiLCJ0YWdOYW1lIiwiZm9jdXMiLCJoYXNBdHRyaWJ1dGUiLCJ0b2dnbGVDbGFzcyIsImJ1dHRvbiIsImlucHV0QnRuIiwiYnV0dG9ucyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJhZGQiLCJfaSIsIl9sZW4iLCJfYnV0dG9uIiwiQ2Fyb3VzZWwiLCJvd25LZXlzIiwib2JqZWN0IiwiZW51bWVyYWJsZU9ubHkiLCJzeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX29iamVjdFNwcmVhZDIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiRGVmYXVsdCIsImludGVydmFsIiwia2V5Ym9hcmQiLCJzbGlkZSIsInBhdXNlIiwid3JhcCIsIkRlZmF1bHRUeXBlIiwiRGlyZWN0aW9uIiwiU0xJREUiLCJTTElEIiwiS0VZRE9XTiIsIk1PVVNFRU5URVIiLCJNT1VTRUxFQVZFIiwiVE9VQ0hTVEFSVCIsIlRPVUNITU9WRSIsIlRPVUNIRU5EIiwiUE9JTlRFUkRPV04iLCJQT0lOVEVSVVAiLCJEUkFHX1NUQVJUIiwiUG9pbnRlclR5cGUiLCJUT1VDSCIsIlBFTiIsIl9pdGVtcyIsIl9pbnRlcnZhbCIsIl9hY3RpdmVFbGVtZW50IiwiX2lzUGF1c2VkIiwiX2lzU2xpZGluZyIsInRvdWNoVGltZW91dCIsInRvdWNoU3RhcnRYIiwidG91Y2hEZWx0YVgiLCJfY29uZmlnIiwiX2dldENvbmZpZyIsIl9pbmRpY2F0b3JzRWxlbWVudCIsIl90b3VjaFN1cHBvcnRlZCIsIm1heFRvdWNoUG9pbnRzIiwiX3BvaW50ZXJFdmVudCIsIlBvaW50ZXJFdmVudCIsIk1TUG9pbnRlckV2ZW50IiwiX2FkZEV2ZW50TGlzdGVuZXJzIiwibmV4dCIsIl9zbGlkZSIsIm5leHRXaGVuVmlzaWJsZSIsImhpZGRlbiIsInByZXYiLCJjeWNsZSIsImNsZWFySW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsInZpc2liaWxpdHlTdGF0ZSIsInRvIiwiYWN0aXZlSW5kZXgiLCJfZ2V0SXRlbUluZGV4IiwiX2hhbmRsZVN3aXBlIiwiYWJzRGVsdGF4IiwiX3RoaXMyIiwiX2tleWRvd24iLCJfYWRkVG91Y2hFdmVudExpc3RlbmVycyIsIl90aGlzMyIsInBvaW50ZXJUeXBlIiwiX2dldEl0ZW1CeURpcmVjdGlvbiIsImlzTmV4dERpcmVjdGlvbiIsImlzUHJldkRpcmVjdGlvbiIsImxhc3RJdGVtSW5kZXgiLCJpdGVtSW5kZXgiLCJfdHJpZ2dlclNsaWRlRXZlbnQiLCJyZWxhdGVkVGFyZ2V0IiwiZXZlbnREaXJlY3Rpb25OYW1lIiwidGFyZ2V0SW5kZXgiLCJmcm9tSW5kZXgiLCJzbGlkZUV2ZW50IiwiZnJvbSIsIl9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50IiwiaW5kaWNhdG9ycyIsIm5leHRJbmRpY2F0b3IiLCJhZGRDbGFzcyIsImRpcmVjdGlvbmFsQ2xhc3NOYW1lIiwib3JkZXJDbGFzc05hbWUiLCJzbGlkRXZlbnQiLCJuZXh0RWxlbWVudEludGVydmFsIiwiX3RoaXM0IiwiYWN0aXZlRWxlbWVudEluZGV4IiwibmV4dEVsZW1lbnQiLCJuZXh0RWxlbWVudEluZGV4IiwiaXNDeWNsaW5nIiwiZGVmYXVsdEludGVydmFsIiwiYWN0aW9uIiwicmlkZSIsIl9kYXRhQXBpQ2xpY2tIYW5kbGVyIiwic2xpZGVJbmRleCIsImNhcm91c2VscyIsIiRjYXJvdXNlbCIsIkNvbGxhcHNlIiwiU0hPVyIsIlNIT1dOIiwiSElERSIsIkhJRERFTiIsIkRpbWVuc2lvbiIsIl9pc1RyYW5zaXRpb25pbmciLCJfdHJpZ2dlckFycmF5IiwiaWQiLCJ0b2dnbGVMaXN0IiwiZWxlbSIsImZpbHRlckVsZW1lbnQiLCJmb3VuZEVsZW0iLCJfc2VsZWN0b3IiLCJfcGFyZW50IiwiX2dldFBhcmVudCIsIl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MiLCJzaG93IiwiYWN0aXZlcyIsImFjdGl2ZXNEYXRhIiwic3RhcnRFdmVudCIsImRpbWVuc2lvbiIsInNjcm9sbFNpemUiLCJub3QiLCJfZ2V0RGltZW5zaW9uIiwiYXR0ciIsInNldFRyYW5zaXRpb25pbmciLCJ0cmlnZ2VyQXJyYXlMZW5ndGgiLCJpc1RyYW5zaXRpb25pbmciLCJfZ2V0VGFyZ2V0RnJvbUVsZW1lbnQiLCJ0cmlnZ2VyQXJyYXkiLCJpc09wZW4iLCJjdXJyZW50VGFyZ2V0IiwiJHRyaWdnZXIiLCJzZWxlY3RvcnMiLCIkdGFyZ2V0IiwiRHJvcGRvd24iLCJSRUdFWFBfS0VZRE9XTiIsIkFSUk9XX1VQX0tFWUNPREUiLCJDTElDSyIsIktFWURPV05fREFUQV9BUEkiLCJLRVlVUF9EQVRBX0FQSSIsIkF0dGFjaG1lbnRNYXAiLCJib3VuZGFyeSIsImRpc3BsYXkiLCJwb3BwZXJDb25maWciLCJfcG9wcGVyIiwiX21lbnUiLCJfZ2V0TWVudUVsZW1lbnQiLCJfaW5OYXZiYXIiLCJfZGV0ZWN0TmF2YmFyIiwiaXNBY3RpdmUiLCJkaXNhYmxlZCIsIl9jbGVhck1lbnVzIiwidXNlUG9wcGVyIiwic2hvd0V2ZW50IiwiX2dldFBhcmVudEZyb21FbGVtZW50IiwicmVmZXJlbmNlRWxlbWVudCIsIl9nZXRQb3BwZXJDb25maWciLCJoaWRlRXZlbnQiLCJkZXN0cm95IiwiY29uc3RydWN0b3IiLCJfZ2V0UGxhY2VtZW50IiwiJHBhcmVudERyb3Bkb3duIiwiX2dldE9mZnNldCIsInRvZ2dsZXMiLCJkcm9wZG93bk1lbnUiLCJjbGlja0V2ZW50IiwiX2RhdGFBcGlLZXlkb3duSGFuZGxlciIsIml0ZW1zIiwiaXRlbSIsIk1vZGFsIiwiYmFja2Ryb3AiLCJISURFX1BSRVZFTlRFRCIsIkZPQ1VTSU4iLCJSRVNJWkUiLCJDTElDS19ESVNNSVNTIiwiS0VZRE9XTl9ESVNNSVNTIiwiTU9VU0VVUF9ESVNNSVNTIiwiTU9VU0VET1dOX0RJU01JU1MiLCJfZGlhbG9nIiwiX2JhY2tkcm9wIiwiX2lzU2hvd24iLCJfaXNCb2R5T3ZlcmZsb3dpbmciLCJfaWdub3JlQmFja2Ryb3BDbGljayIsIl9zY3JvbGxiYXJXaWR0aCIsIl9jaGVja1Njcm9sbGJhciIsIl9zZXRTY3JvbGxiYXIiLCJfYWRqdXN0RGlhbG9nIiwiX3NldEVzY2FwZUV2ZW50IiwiX3NldFJlc2l6ZUV2ZW50IiwiX3Nob3dCYWNrZHJvcCIsIl9zaG93RWxlbWVudCIsInRyYW5zaXRpb24iLCJfaGlkZU1vZGFsIiwiaHRtbEVsZW1lbnQiLCJoYW5kbGVVcGRhdGUiLCJfdHJpZ2dlckJhY2tkcm9wVHJhbnNpdGlvbiIsImhpZGVFdmVudFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJtb2RhbFRyYW5zaXRpb25EdXJhdGlvbiIsIm1vZGFsQm9keSIsIkVMRU1FTlRfTk9ERSIsImFwcGVuZENoaWxkIiwiX2VuZm9yY2VGb2N1cyIsInRyYW5zaXRpb25Db21wbGV0ZSIsInNob3duRXZlbnQiLCJfdGhpczUiLCJoYXMiLCJfdGhpczYiLCJfdGhpczciLCJfdGhpczgiLCJfcmVzZXRBZGp1c3RtZW50cyIsIl9yZXNldFNjcm9sbGJhciIsIl9yZW1vdmVCYWNrZHJvcCIsImNhbGxiYWNrUmVtb3ZlIiwiX2JhY2tkcm9wVHJhbnNpdGlvbkR1cmF0aW9uIiwiX3RoaXM5IiwiYW5pbWF0ZSIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJhcHBlbmRUbyIsImJhY2tkcm9wVHJhbnNpdGlvbkR1cmF0aW9uIiwiaXNNb2RhbE92ZXJmbG93aW5nIiwic2Nyb2xsSGVpZ2h0IiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJfZ2V0U2Nyb2xsYmFyV2lkdGgiLCJmaXhlZENvbnRlbnQiLCJzdGlja3lDb250ZW50IiwiYWN0dWFsUGFkZGluZyIsImNhbGN1bGF0ZWRQYWRkaW5nIiwiX3RoaXMxMCIsImFjdHVhbE1hcmdpbiIsImNhbGN1bGF0ZWRNYXJnaW4iLCJlbGVtZW50cyIsIm1hcmdpbiIsInNjcm9sbERpdiIsInNjcm9sbGJhcldpZHRoIiwiX3RoaXMxMSIsIlRhYiIsImxpc3RFbGVtZW50IiwiaXRlbVNlbGVjdG9yIiwicHJldmlvdXMiLCJjb21wbGV0ZSIsIm1ha2VBcnJheSIsIl9hY3RpdmF0ZSIsImhpZGRlbkV2ZW50IiwiY29udGFpbmVyIiwiX3RyYW5zaXRpb25Db21wbGV0ZSIsImFjdGl2ZSIsImRyb3Bkb3duQ2hpbGQiLCJkcm9wZG93bkVsZW1lbnQiLCJkcm9wZG93blRvZ2dsZUxpc3QiXSwibWFwcGluZ3MiOiJDQVVBLFNBQUFBLEVBQUFDLEVBQUFDLEdBQ0EsbUJBQUFDLFFBQUFBLE9BQUFDLElBRUFELE9BQUEsQ0FBQSxVQUFBLFNBQUFFLEdBRUEsT0FEQUgsRUFBQUcsRUFBQUwsRUFBQUMsR0FDQUksRUFBQUMsU0FJQUosRUFBQUYsRUFBQU8sT0FBQVAsRUFBQUMsR0FUQSxDQVdBTyxLQUFBQyxTQUFBLFNBQUFGLEVBQUFHLEVBQUFELEVBQUFFLEdBMmZBLElBQUFOLEVBQ0FPLEVBVUFQLEVBQUFLLEVBQUFDLEVBQ0FFLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FD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InNvdXJjZXNDb250ZW50IjpbIi8qXG4qIGpRdWVyeSBNb2JpbGUgdjEuNC41XG4qIGh0dHA6Ly9qcXVlcnltb2JpbGUuY29tXG4qXG4qIENvcHlyaWdodCAyMDEwLCAyMDE0IGpRdWVyeSBGb3VuZGF0aW9uLCBJbmMuIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4qXG4qL1xuXG4oZnVuY3Rpb24gKCByb290LCBkb2MsIGZhY3RvcnkgKSB7XG5cdGlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdFx0Ly8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuXHRcdGRlZmluZSggWyBcImpxdWVyeVwiIF0sIGZ1bmN0aW9uICggJCApIHtcblx0XHRcdGZhY3RvcnkoICQsIHJvb3QsIGRvYyApO1xuXHRcdFx0cmV0dXJuICQubW9iaWxlO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdC8vIEJyb3dzZXIgZ2xvYmFsc1xuXHRcdGZhY3RvcnkoIHJvb3QualF1ZXJ5LCByb290LCBkb2MgKTtcblx0fVxufSggdGhpcywgZG9jdW1lbnQsIGZ1bmN0aW9uICggalF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQgKSB7Ly8gVGhpcyBwbHVnaW4gaXMgYW4gZXhwZXJpbWVudCBmb3IgYWJzdHJhY3RpbmcgYXdheSB0aGUgdG91Y2ggYW5kIG1vdXNlXG4vLyBldmVudHMgc28gdGhhdCBkZXZlbG9wZXJzIGRvbid0IGhhdmUgdG8gd29ycnkgYWJvdXQgd2hpY2ggbWV0aG9kIG9mIGlucHV0XG4vLyB0aGUgZGV2aWNlIHRoZWlyIGRvY3VtZW50IGlzIGxvYWRlZCBvbiBzdXBwb3J0cy5cbi8vXG4vLyBUaGUgaWRlYSBoZXJlIGlzIHRvIGFsbG93IHRoZSBkZXZlbG9wZXIgdG8gcmVnaXN0ZXIgbGlzdGVuZXJzIGZvciB0aGVcbi8vIGJhc2ljIG1vdXNlIGV2ZW50cywgc3VjaCBhcyBtb3VzZWRvd24sIG1vdXNlbW92ZSwgbW91c2V1cCwgYW5kIGNsaWNrLFxuLy8gYW5kIHRoZSBwbHVnaW4gd2lsbCB0YWtlIGNhcmUgb2YgcmVnaXN0ZXJpbmcgdGhlIGNvcnJlY3QgbGlzdGVuZXJzXG4vLyBiZWhpbmQgdGhlIHNjZW5lcyB0byBpbnZva2UgdGhlIGxpc3RlbmVyIGF0IHRoZSBmYXN0ZXN0IHBvc3NpYmxlIHRpbWVcbi8vIGZvciB0aGF0IGRldmljZSwgd2hpbGUgc3RpbGwgcmV0YWluaW5nIHRoZSBvcmRlciBvZiBldmVudCBmaXJpbmcgaW5cbi8vIHRoZSB0cmFkaXRpb25hbCBtb3VzZSBlbnZpcm9ubWVudCwgc2hvdWxkIG11bHRpcGxlIGhhbmRsZXJzIGJlIHJlZ2lzdGVyZWRcbi8vIG9uIHRoZSBzYW1lIGVsZW1lbnQgZm9yIGRpZmZlcmVudCBldmVudHMuXG4vL1xuLy8gVGhlIGN1cnJlbnQgdmVyc2lvbiBleHBvc2VzIHRoZSBmb2xsb3dpbmcgdmlydHVhbCBldmVudHMgdG8galF1ZXJ5IGJpbmQgbWV0aG9kczpcbi8vIFwidm1vdXNlb3ZlciB2bW91c2Vkb3duIHZtb3VzZW1vdmUgdm1vdXNldXAgdmNsaWNrIHZtb3VzZW91dCB2bW91c2VjYW5jZWxcIlxuXG4oZnVuY3Rpb24oICQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCApIHtcblxudmFyIGRhdGFQcm9wZXJ0eU5hbWUgPSBcInZpcnR1YWxNb3VzZUJpbmRpbmdzXCIsXG5cdHRvdWNoVGFyZ2V0UHJvcGVydHlOYW1lID0gXCJ2aXJ0dWFsVG91Y2hJRFwiLFxuXHR2aXJ0dWFsRXZlbnROYW1lcyA9IFwidm1vdXNlb3ZlciB2bW91c2Vkb3duIHZtb3VzZW1vdmUgdm1vdXNldXAgdmNsaWNrIHZtb3VzZW91dCB2bW91c2VjYW5jZWxcIi5zcGxpdCggXCIgXCIgKSxcblx0dG91Y2hFdmVudFByb3BzID0gXCJjbGllbnRYIGNsaWVudFkgcGFnZVggcGFnZVkgc2NyZWVuWCBzY3JlZW5ZXCIuc3BsaXQoIFwiIFwiICksXG5cdG1vdXNlSG9va1Byb3BzID0gJC5ldmVudC5tb3VzZUhvb2tzID8gJC5ldmVudC5tb3VzZUhvb2tzLnByb3BzIDogW10sXG5cdG1vdXNlRXZlbnRQcm9wcyA9ICQuZXZlbnQucHJvcHMuY29uY2F0KCBtb3VzZUhvb2tQcm9wcyApLFxuXHRhY3RpdmVEb2NIYW5kbGVycyA9IHt9LFxuXHRyZXNldFRpbWVySUQgPSAwLFxuXHRzdGFydFggPSAwLFxuXHRzdGFydFkgPSAwLFxuXHRkaWRTY3JvbGwgPSBmYWxzZSxcblx0Y2xpY2tCbG9ja0xpc3QgPSBbXSxcblx0YmxvY2tNb3VzZVRyaWdnZXJzID0gZmFsc2UsXG5cdGJsb2NrVG91Y2hUcmlnZ2VycyA9IGZhbHNlLFxuXHRldmVudENhcHR1cmVTdXBwb3J0ZWQgPSBcImFkZEV2ZW50TGlzdGVuZXJcIiBpbiBkb2N1bWVudCxcblx0JGRvY3VtZW50ID0gJCggZG9jdW1lbnQgKSxcblx0bmV4dFRvdWNoSUQgPSAxLFxuXHRsYXN0VG91Y2hJRCA9IDAsIHRocmVzaG9sZCxcblx0aTtcblxuJC52bW91c2UgPSB7XG5cdG1vdmVEaXN0YW5jZVRocmVzaG9sZDogMTAsXG5cdGNsaWNrRGlzdGFuY2VUaHJlc2hvbGQ6IDEwLFxuXHRyZXNldFRpbWVyRHVyYXRpb246IDE1MDBcbn07XG5cbmZ1bmN0aW9uIGdldE5hdGl2ZUV2ZW50KCBldmVudCApIHtcblxuXHR3aGlsZSAoIGV2ZW50ICYmIHR5cGVvZiBldmVudC5vcmlnaW5hbEV2ZW50ICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdGV2ZW50ID0gZXZlbnQub3JpZ2luYWxFdmVudDtcblx0fVxuXHRyZXR1cm4gZXZlbnQ7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVZpcnR1YWxFdmVudCggZXZlbnQsIGV2ZW50VHlwZSApIHtcblxuXHR2YXIgdCA9IGV2ZW50LnR5cGUsXG5cdFx0b2UsIHByb3BzLCBuZSwgcHJvcCwgY3QsIHRvdWNoLCBpLCBqLCBsZW47XG5cblx0ZXZlbnQgPSAkLkV2ZW50KCBldmVudCApO1xuXHRldmVudC50eXBlID0gZXZlbnRUeXBlO1xuXG5cdG9lID0gZXZlbnQub3JpZ2luYWxFdmVudDtcblx0cHJvcHMgPSAkLmV2ZW50LnByb3BzO1xuXG5cdC8vIGFkZHJlc3NlcyBzZXBhcmF0aW9uIG9mICQuZXZlbnQucHJvcHMgaW4gdG8gJC5ldmVudC5tb3VzZUhvb2sucHJvcHMgYW5kIElzc3VlIDMyODBcblx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnktbW9iaWxlL2lzc3Vlcy8zMjgwXG5cdGlmICggdC5zZWFyY2goIC9eKG1vdXNlfGNsaWNrKS8gKSA+IC0xICkge1xuXHRcdHByb3BzID0gbW91c2VFdmVudFByb3BzO1xuXHR9XG5cblx0Ly8gY29weSBvcmlnaW5hbCBldmVudCBwcm9wZXJ0aWVzIG92ZXIgdG8gdGhlIG5ldyBldmVudFxuXHQvLyB0aGlzIHdvdWxkIGhhcHBlbiBpZiB3ZSBjb3VsZCBjYWxsICQuZXZlbnQuZml4IGluc3RlYWQgb2YgJC5FdmVudFxuXHQvLyBidXQgd2UgZG9uJ3QgaGF2ZSBhIHdheSB0byBmb3JjZSBhbiBldmVudCB0byBiZSBmaXhlZCBtdWx0aXBsZSB0aW1lc1xuXHRpZiAoIG9lICkge1xuXHRcdGZvciAoIGkgPSBwcm9wcy5sZW5ndGgsIHByb3A7IGk7ICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyAtLWkgXTtcblx0XHRcdGV2ZW50WyBwcm9wIF0gPSBvZVsgcHJvcCBdO1xuXHRcdH1cblx0fVxuXG5cdC8vIG1ha2Ugc3VyZSB0aGF0IGlmIHRoZSBtb3VzZSBhbmQgY2xpY2sgdmlydHVhbCBldmVudHMgYXJlIGdlbmVyYXRlZFxuXHQvLyB3aXRob3V0IGEgLndoaWNoIG9uZSBpcyBkZWZpbmVkXG5cdGlmICggdC5zZWFyY2goL21vdXNlKGRvd258dXApfGNsaWNrLykgPiAtMSAmJiAhZXZlbnQud2hpY2ggKSB7XG5cdFx0ZXZlbnQud2hpY2ggPSAxO1xuXHR9XG5cblx0aWYgKCB0LnNlYXJjaCgvXnRvdWNoLykgIT09IC0xICkge1xuXHRcdG5lID0gZ2V0TmF0aXZlRXZlbnQoIG9lICk7XG5cdFx0dCA9IG5lLnRvdWNoZXM7XG5cdFx0Y3QgPSBuZS5jaGFuZ2VkVG91Y2hlcztcblx0XHR0b3VjaCA9ICggdCAmJiB0Lmxlbmd0aCApID8gdFswXSA6ICggKCBjdCAmJiBjdC5sZW5ndGggKSA/IGN0WyAwIF0gOiB1bmRlZmluZWQgKTtcblxuXHRcdGlmICggdG91Y2ggKSB7XG5cdFx0XHRmb3IgKCBqID0gMCwgbGVuID0gdG91Y2hFdmVudFByb3BzLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG5cdFx0XHRcdHByb3AgPSB0b3VjaEV2ZW50UHJvcHNbIGogXTtcblx0XHRcdFx0ZXZlbnRbIHByb3AgXSA9IHRvdWNoWyBwcm9wIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGV2ZW50O1xufVxuXG5mdW5jdGlvbiBnZXRWaXJ0dWFsQmluZGluZ0ZsYWdzKCBlbGVtZW50ICkge1xuXG5cdHZhciBmbGFncyA9IHt9LFxuXHRcdGIsIGs7XG5cblx0d2hpbGUgKCBlbGVtZW50ICkge1xuXG5cdFx0YiA9ICQuZGF0YSggZWxlbWVudCwgZGF0YVByb3BlcnR5TmFtZSApO1xuXG5cdFx0Zm9yICggIGsgaW4gYiApIHtcblx0XHRcdGlmICggYlsgayBdICkge1xuXHRcdFx0XHRmbGFnc1sgayBdID0gZmxhZ3MuaGFzVmlydHVhbEJpbmRpbmcgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuXHR9XG5cdHJldHVybiBmbGFncztcbn1cblxuZnVuY3Rpb24gZ2V0Q2xvc2VzdEVsZW1lbnRXaXRoVmlydHVhbEJpbmRpbmcoIGVsZW1lbnQsIGV2ZW50VHlwZSApIHtcblx0dmFyIGI7XG5cdHdoaWxlICggZWxlbWVudCApIHtcblxuXHRcdGIgPSAkLmRhdGEoIGVsZW1lbnQsIGRhdGFQcm9wZXJ0eU5hbWUgKTtcblxuXHRcdGlmICggYiAmJiAoICFldmVudFR5cGUgfHwgYlsgZXZlbnRUeXBlIF0gKSApIHtcblx0XHRcdHJldHVybiBlbGVtZW50O1xuXHRcdH1cblx0XHRlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuXHR9XG5cdHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBlbmFibGVUb3VjaEJpbmRpbmdzKCkge1xuXHRibG9ja1RvdWNoVHJpZ2dlcnMgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZGlzYWJsZVRvdWNoQmluZGluZ3MoKSB7XG5cdGJsb2NrVG91Y2hUcmlnZ2VycyA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIGVuYWJsZU1vdXNlQmluZGluZ3MoKSB7XG5cdGxhc3RUb3VjaElEID0gMDtcblx0Y2xpY2tCbG9ja0xpc3QubGVuZ3RoID0gMDtcblx0YmxvY2tNb3VzZVRyaWdnZXJzID0gZmFsc2U7XG5cblx0Ly8gV2hlbiBtb3VzZSBiaW5kaW5ncyBhcmUgZW5hYmxlZCwgb3VyXG5cdC8vIHRvdWNoIGJpbmRpbmdzIGFyZSBkaXNhYmxlZC5cblx0ZGlzYWJsZVRvdWNoQmluZGluZ3MoKTtcbn1cblxuZnVuY3Rpb24gZGlzYWJsZU1vdXNlQmluZGluZ3MoKSB7XG5cdC8vIFdoZW4gbW91c2UgYmluZGluZ3MgYXJlIGRpc2FibGVkLCBvdXJcblx0Ly8gdG91Y2ggYmluZGluZ3MgYXJlIGVuYWJsZWQuXG5cdGVuYWJsZVRvdWNoQmluZGluZ3MoKTtcbn1cblxuZnVuY3Rpb24gc3RhcnRSZXNldFRpbWVyKCkge1xuXHRjbGVhclJlc2V0VGltZXIoKTtcblx0cmVzZXRUaW1lcklEID0gc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0cmVzZXRUaW1lcklEID0gMDtcblx0XHRlbmFibGVNb3VzZUJpbmRpbmdzKCk7XG5cdH0sICQudm1vdXNlLnJlc2V0VGltZXJEdXJhdGlvbiApO1xufVxuXG5mdW5jdGlvbiBjbGVhclJlc2V0VGltZXIoKSB7XG5cdGlmICggcmVzZXRUaW1lcklEICkge1xuXHRcdGNsZWFyVGltZW91dCggcmVzZXRUaW1lcklEICk7XG5cdFx0cmVzZXRUaW1lcklEID0gMDtcblx0fVxufVxuXG5mdW5jdGlvbiB0cmlnZ2VyVmlydHVhbEV2ZW50KCBldmVudFR5cGUsIGV2ZW50LCBmbGFncyApIHtcblx0dmFyIHZlO1xuXG5cdGlmICggKCBmbGFncyAmJiBmbGFnc1sgZXZlbnRUeXBlIF0gKSB8fFxuXHRcdFx0XHQoICFmbGFncyAmJiBnZXRDbG9zZXN0RWxlbWVudFdpdGhWaXJ0dWFsQmluZGluZyggZXZlbnQudGFyZ2V0LCBldmVudFR5cGUgKSApICkge1xuXG5cdFx0dmUgPSBjcmVhdGVWaXJ0dWFsRXZlbnQoIGV2ZW50LCBldmVudFR5cGUgKTtcblxuXHRcdCQoIGV2ZW50LnRhcmdldCkudHJpZ2dlciggdmUgKTtcblx0fVxuXG5cdHJldHVybiB2ZTtcbn1cblxuZnVuY3Rpb24gbW91c2VFdmVudENhbGxiYWNrKCBldmVudCApIHtcblx0dmFyIHRvdWNoSUQgPSAkLmRhdGEoIGV2ZW50LnRhcmdldCwgdG91Y2hUYXJnZXRQcm9wZXJ0eU5hbWUgKSxcblx0XHR2ZTtcblxuXHRpZiAoICFibG9ja01vdXNlVHJpZ2dlcnMgJiYgKCAhbGFzdFRvdWNoSUQgfHwgbGFzdFRvdWNoSUQgIT09IHRvdWNoSUQgKSApIHtcblx0XHR2ZSA9IHRyaWdnZXJWaXJ0dWFsRXZlbnQoIFwidlwiICsgZXZlbnQudHlwZSwgZXZlbnQgKTtcblx0XHRpZiAoIHZlICkge1xuXHRcdFx0aWYgKCB2ZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdH1cblx0XHRcdGlmICggdmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHZlLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBoYW5kbGVUb3VjaFN0YXJ0KCBldmVudCApIHtcblxuXHR2YXIgdG91Y2hlcyA9IGdldE5hdGl2ZUV2ZW50KCBldmVudCApLnRvdWNoZXMsXG5cdFx0dGFyZ2V0LCBmbGFncywgdDtcblxuXHRpZiAoIHRvdWNoZXMgJiYgdG91Y2hlcy5sZW5ndGggPT09IDEgKSB7XG5cblx0XHR0YXJnZXQgPSBldmVudC50YXJnZXQ7XG5cdFx0ZmxhZ3MgPSBnZXRWaXJ0dWFsQmluZGluZ0ZsYWdzKCB0YXJnZXQgKTtcblxuXHRcdGlmICggZmxhZ3MuaGFzVmlydHVhbEJpbmRpbmcgKSB7XG5cblx0XHRcdGxhc3RUb3VjaElEID0gbmV4dFRvdWNoSUQrKztcblx0XHRcdCQuZGF0YSggdGFyZ2V0LCB0b3VjaFRhcmdldFByb3BlcnR5TmFtZSwgbGFzdFRvdWNoSUQgKTtcblxuXHRcdFx0Y2xlYXJSZXNldFRpbWVyKCk7XG5cblx0XHRcdGRpc2FibGVNb3VzZUJpbmRpbmdzKCk7XG5cdFx0XHRkaWRTY3JvbGwgPSBmYWxzZTtcblxuXHRcdFx0dCA9IGdldE5hdGl2ZUV2ZW50KCBldmVudCApLnRvdWNoZXNbIDAgXTtcblx0XHRcdHN0YXJ0WCA9IHQucGFnZVg7XG5cdFx0XHRzdGFydFkgPSB0LnBhZ2VZO1xuXG5cdFx0XHR0cmlnZ2VyVmlydHVhbEV2ZW50KCBcInZtb3VzZW92ZXJcIiwgZXZlbnQsIGZsYWdzICk7XG5cdFx0XHR0cmlnZ2VyVmlydHVhbEV2ZW50KCBcInZtb3VzZWRvd25cIiwgZXZlbnQsIGZsYWdzICk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVNjcm9sbCggZXZlbnQgKSB7XG5cdGlmICggYmxvY2tUb3VjaFRyaWdnZXJzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGlmICggIWRpZFNjcm9sbCApIHtcblx0XHR0cmlnZ2VyVmlydHVhbEV2ZW50KCBcInZtb3VzZWNhbmNlbFwiLCBldmVudCwgZ2V0VmlydHVhbEJpbmRpbmdGbGFncyggZXZlbnQudGFyZ2V0ICkgKTtcblx0fVxuXG5cdGRpZFNjcm9sbCA9IHRydWU7XG5cdHN0YXJ0UmVzZXRUaW1lcigpO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVUb3VjaE1vdmUoIGV2ZW50ICkge1xuXHRpZiAoIGJsb2NrVG91Y2hUcmlnZ2VycyApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHR2YXIgdCA9IGdldE5hdGl2ZUV2ZW50KCBldmVudCApLnRvdWNoZXNbIDAgXSxcblx0XHRkaWRDYW5jZWwgPSBkaWRTY3JvbGwsXG5cdFx0bW92ZVRocmVzaG9sZCA9ICQudm1vdXNlLm1vdmVEaXN0YW5jZVRocmVzaG9sZCxcblx0XHRmbGFncyA9IGdldFZpcnR1YWxCaW5kaW5nRmxhZ3MoIGV2ZW50LnRhcmdldCApO1xuXG5cdFx0ZGlkU2Nyb2xsID0gZGlkU2Nyb2xsIHx8XG5cdFx0XHQoIE1hdGguYWJzKCB0LnBhZ2VYIC0gc3RhcnRYICkgPiBtb3ZlVGhyZXNob2xkIHx8XG5cdFx0XHRcdE1hdGguYWJzKCB0LnBhZ2VZIC0gc3RhcnRZICkgPiBtb3ZlVGhyZXNob2xkICk7XG5cblx0aWYgKCBkaWRTY3JvbGwgJiYgIWRpZENhbmNlbCApIHtcblx0XHR0cmlnZ2VyVmlydHVhbEV2ZW50KCBcInZtb3VzZWNhbmNlbFwiLCBldmVudCwgZmxhZ3MgKTtcblx0fVxuXG5cdHRyaWdnZXJWaXJ0dWFsRXZlbnQoIFwidm1vdXNlbW92ZVwiLCBldmVudCwgZmxhZ3MgKTtcblx0c3RhcnRSZXNldFRpbWVyKCk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVRvdWNoRW5kKCBldmVudCApIHtcblx0aWYgKCBibG9ja1RvdWNoVHJpZ2dlcnMgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0ZGlzYWJsZVRvdWNoQmluZGluZ3MoKTtcblxuXHR2YXIgZmxhZ3MgPSBnZXRWaXJ0dWFsQmluZGluZ0ZsYWdzKCBldmVudC50YXJnZXQgKSxcblx0XHR2ZSwgdDtcblx0dHJpZ2dlclZpcnR1YWxFdmVudCggXCJ2bW91c2V1cFwiLCBldmVudCwgZmxhZ3MgKTtcblxuXHRpZiAoICFkaWRTY3JvbGwgKSB7XG5cdFx0dmUgPSB0cmlnZ2VyVmlydHVhbEV2ZW50KCBcInZjbGlja1wiLCBldmVudCwgZmxhZ3MgKTtcblx0XHRpZiAoIHZlICYmIHZlLmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXHRcdFx0Ly8gVGhlIHRhcmdldCBvZiB0aGUgbW91c2UgZXZlbnRzIHRoYXQgZm9sbG93IHRoZSB0b3VjaGVuZFxuXHRcdFx0Ly8gZXZlbnQgZG9uJ3QgbmVjZXNzYXJpbHkgbWF0Y2ggdGhlIHRhcmdldCB1c2VkIGR1cmluZyB0aGVcblx0XHRcdC8vIHRvdWNoLiBUaGlzIG1lYW5zIHdlIG5lZWQgdG8gcmVseSBvbiBjb29yZGluYXRlcyBmb3IgYmxvY2tpbmdcblx0XHRcdC8vIGFueSBjbGljayB0aGF0IGlzIGdlbmVyYXRlZC5cblx0XHRcdHQgPSBnZXROYXRpdmVFdmVudCggZXZlbnQgKS5jaGFuZ2VkVG91Y2hlc1sgMCBdO1xuXHRcdFx0Y2xpY2tCbG9ja0xpc3QucHVzaCh7XG5cdFx0XHRcdHRvdWNoSUQ6IGxhc3RUb3VjaElELFxuXHRcdFx0XHR4OiB0LmNsaWVudFgsXG5cdFx0XHRcdHk6IHQuY2xpZW50WVxuXHRcdFx0fSk7XG5cblx0XHRcdC8vIFByZXZlbnQgYW55IG1vdXNlIGV2ZW50cyB0aGF0IGZvbGxvdyBmcm9tIHRyaWdnZXJpbmdcblx0XHRcdC8vIHZpcnR1YWwgZXZlbnQgbm90aWZpY2F0aW9ucy5cblx0XHRcdGJsb2NrTW91c2VUcmlnZ2VycyA9IHRydWU7XG5cdFx0fVxuXHR9XG5cdHRyaWdnZXJWaXJ0dWFsRXZlbnQoIFwidm1vdXNlb3V0XCIsIGV2ZW50LCBmbGFncyk7XG5cdGRpZFNjcm9sbCA9IGZhbHNlO1xuXG5cdHN0YXJ0UmVzZXRUaW1lcigpO1xufVxuXG5mdW5jdGlvbiBoYXNWaXJ0dWFsQmluZGluZ3MoIGVsZSApIHtcblx0dmFyIGJpbmRpbmdzID0gJC5kYXRhKCBlbGUsIGRhdGFQcm9wZXJ0eU5hbWUgKSxcblx0XHRrO1xuXG5cdGlmICggYmluZGluZ3MgKSB7XG5cdFx0Zm9yICggayBpbiBiaW5kaW5ncyApIHtcblx0XHRcdGlmICggYmluZGluZ3NbIGsgXSApIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZHVtbXlNb3VzZUhhbmRsZXIoKSB7fVxuXG5mdW5jdGlvbiBnZXRTcGVjaWFsRXZlbnRPYmplY3QoIGV2ZW50VHlwZSApIHtcblx0dmFyIHJlYWxUeXBlID0gZXZlbnRUeXBlLnN1YnN0ciggMSApO1xuXG5cdHJldHVybiB7XG5cdFx0c2V0dXA6IGZ1bmN0aW9uKC8qIGRhdGEsIG5hbWVzcGFjZSAqLykge1xuXHRcdFx0Ly8gSWYgdGhpcyBpcyB0aGUgZmlyc3QgdmlydHVhbCBtb3VzZSBiaW5kaW5nIGZvciB0aGlzIGVsZW1lbnQsXG5cdFx0XHQvLyBhZGQgYSBiaW5kaW5ncyBvYmplY3QgdG8gaXRzIGRhdGEuXG5cblx0XHRcdGlmICggIWhhc1ZpcnR1YWxCaW5kaW5ncyggdGhpcyApICkge1xuXHRcdFx0XHQkLmRhdGEoIHRoaXMsIGRhdGFQcm9wZXJ0eU5hbWUsIHt9ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHNldHVwIGlzIGNhbGxlZCwgd2Uga25vdyBpdCBpcyB0aGUgZmlyc3QgYmluZGluZyBmb3IgdGhpc1xuXHRcdFx0Ly8gZXZlbnRUeXBlLCBzbyBpbml0aWFsaXplIHRoZSBjb3VudCBmb3IgdGhlIGV2ZW50VHlwZSB0byB6ZXJvLlxuXHRcdFx0dmFyIGJpbmRpbmdzID0gJC5kYXRhKCB0aGlzLCBkYXRhUHJvcGVydHlOYW1lICk7XG5cdFx0XHRiaW5kaW5nc1sgZXZlbnRUeXBlIF0gPSB0cnVlO1xuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIHRoZSBmaXJzdCB2aXJ0dWFsIG1vdXNlIGV2ZW50IGZvciB0aGlzIHR5cGUsXG5cdFx0XHQvLyByZWdpc3RlciBhIGdsb2JhbCBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudC5cblxuXHRcdFx0YWN0aXZlRG9jSGFuZGxlcnNbIGV2ZW50VHlwZSBdID0gKCBhY3RpdmVEb2NIYW5kbGVyc1sgZXZlbnRUeXBlIF0gfHwgMCApICsgMTtcblxuXHRcdFx0aWYgKCBhY3RpdmVEb2NIYW5kbGVyc1sgZXZlbnRUeXBlIF0gPT09IDEgKSB7XG5cdFx0XHRcdCRkb2N1bWVudC5iaW5kKCByZWFsVHlwZSwgbW91c2VFdmVudENhbGxiYWNrICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNvbWUgYnJvd3NlcnMsIGxpa2UgT3BlcmEgTWluaSwgd29uJ3QgZGlzcGF0Y2ggbW91c2UvY2xpY2sgZXZlbnRzXG5cdFx0XHQvLyBmb3IgZWxlbWVudHMgdW5sZXNzIHRoZXkgYWN0dWFsbHkgaGF2ZSBoYW5kbGVycyByZWdpc3RlcmVkIG9uIHRoZW0uXG5cdFx0XHQvLyBUbyBnZXQgYXJvdW5kIHRoaXMsIHdlIHJlZ2lzdGVyIGR1bW15IGhhbmRsZXJzIG9uIHRoZSBlbGVtZW50cy5cblxuXHRcdFx0JCggdGhpcyApLmJpbmQoIHJlYWxUeXBlLCBkdW1teU1vdXNlSGFuZGxlciApO1xuXG5cdFx0XHQvLyBGb3Igbm93LCBpZiBldmVudCBjYXB0dXJlIGlzIG5vdCBzdXBwb3J0ZWQsIHdlIHJlbHkgb24gbW91c2UgaGFuZGxlcnMuXG5cdFx0XHRpZiAoIGV2ZW50Q2FwdHVyZVN1cHBvcnRlZCApIHtcblx0XHRcdFx0Ly8gSWYgdGhpcyBpcyB0aGUgZmlyc3QgdmlydHVhbCBtb3VzZSBiaW5kaW5nIGZvciB0aGUgZG9jdW1lbnQsXG5cdFx0XHRcdC8vIHJlZ2lzdGVyIG91ciB0b3VjaHN0YXJ0IGhhbmRsZXIgb24gdGhlIGRvY3VtZW50LlxuXG5cdFx0XHRcdGFjdGl2ZURvY0hhbmRsZXJzWyBcInRvdWNoc3RhcnRcIiBdID0gKCBhY3RpdmVEb2NIYW5kbGVyc1sgXCJ0b3VjaHN0YXJ0XCIgXSB8fCAwKSArIDE7XG5cblx0XHRcdFx0aWYgKCBhY3RpdmVEb2NIYW5kbGVyc1sgXCJ0b3VjaHN0YXJ0XCIgXSA9PT0gMSApIHtcblx0XHRcdFx0XHQkZG9jdW1lbnQuYmluZCggXCJ0b3VjaHN0YXJ0XCIsIGhhbmRsZVRvdWNoU3RhcnQgKVxuXHRcdFx0XHRcdFx0LmJpbmQoIFwidG91Y2hlbmRcIiwgaGFuZGxlVG91Y2hFbmQgKVxuXG5cdFx0XHRcdFx0XHQvLyBPbiB0b3VjaCBwbGF0Zm9ybXMsIHRvdWNoaW5nIHRoZSBzY3JlZW4gYW5kIHRoZW4gZHJhZ2dpbmcgeW91ciBmaW5nZXJcblx0XHRcdFx0XHRcdC8vIGNhdXNlcyB0aGUgd2luZG93IGNvbnRlbnQgdG8gc2Nyb2xsIGFmdGVyIHNvbWUgZGlzdGFuY2UgdGhyZXNob2xkIGlzXG5cdFx0XHRcdFx0XHQvLyBleGNlZWRlZC4gT24gdGhlc2UgcGxhdGZvcm1zLCBhIHNjcm9sbCBwcmV2ZW50cyBhIGNsaWNrIGV2ZW50IGZyb20gYmVpbmdcblx0XHRcdFx0XHRcdC8vIGRpc3BhdGNoZWQsIGFuZCBvbiBzb21lIHBsYXRmb3JtcywgZXZlbiB0aGUgdG91Y2hlbmQgaXMgc3VwcHJlc3NlZC4gVG9cblx0XHRcdFx0XHRcdC8vIG1pbWljIHRoZSBzdXBwcmVzc2lvbiBvZiB0aGUgY2xpY2sgZXZlbnQsIHdlIG5lZWQgdG8gd2F0Y2ggZm9yIGEgc2Nyb2xsXG5cdFx0XHRcdFx0XHQvLyBldmVudC4gVW5mb3J0dW5hdGVseSwgc29tZSBwbGF0Zm9ybXMgbGlrZSBpT1MgZG9uJ3QgZGlzcGF0Y2ggc2Nyb2xsXG5cdFx0XHRcdFx0XHQvLyBldmVudHMgdW50aWwgKkFGVEVSKiB0aGUgdXNlciBsaWZ0cyB0aGVpciBmaW5nZXIgKHRvdWNoZW5kKS4gVGhpcyBtZWFuc1xuXHRcdFx0XHRcdFx0Ly8gd2UgbmVlZCB0byB3YXRjaCBib3RoIHNjcm9sbCBhbmQgdG91Y2htb3ZlIGV2ZW50cyB0byBmaWd1cmUgb3V0IHdoZXRoZXJcblx0XHRcdFx0XHRcdC8vIG9yIG5vdCBhIHNjcm9sbCBoYXBwZW5lbnMgYmVmb3JlIHRoZSB0b3VjaGVuZCBldmVudCBpcyBmaXJlZC5cblxuXHRcdFx0XHRcdFx0LmJpbmQoIFwidG91Y2htb3ZlXCIsIGhhbmRsZVRvdWNoTW92ZSApXG5cdFx0XHRcdFx0XHQuYmluZCggXCJzY3JvbGxcIiwgaGFuZGxlU2Nyb2xsICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0dGVhcmRvd246IGZ1bmN0aW9uKC8qIGRhdGEsIG5hbWVzcGFjZSAqLykge1xuXHRcdFx0Ly8gSWYgdGhpcyBpcyB0aGUgbGFzdCB2aXJ0dWFsIGJpbmRpbmcgZm9yIHRoaXMgZXZlbnRUeXBlLFxuXHRcdFx0Ly8gcmVtb3ZlIGl0cyBnbG9iYWwgaGFuZGxlciBmcm9tIHRoZSBkb2N1bWVudC5cblxuXHRcdFx0LS1hY3RpdmVEb2NIYW5kbGVyc1sgZXZlbnRUeXBlIF07XG5cblx0XHRcdGlmICggIWFjdGl2ZURvY0hhbmRsZXJzWyBldmVudFR5cGUgXSApIHtcblx0XHRcdFx0JGRvY3VtZW50LnVuYmluZCggcmVhbFR5cGUsIG1vdXNlRXZlbnRDYWxsYmFjayApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGV2ZW50Q2FwdHVyZVN1cHBvcnRlZCApIHtcblx0XHRcdFx0Ly8gSWYgdGhpcyBpcyB0aGUgbGFzdCB2aXJ0dWFsIG1vdXNlIGJpbmRpbmcgaW4gZXhpc3RlbmNlLFxuXHRcdFx0XHQvLyByZW1vdmUgb3VyIGRvY3VtZW50IHRvdWNoc3RhcnQgbGlzdGVuZXIuXG5cblx0XHRcdFx0LS1hY3RpdmVEb2NIYW5kbGVyc1sgXCJ0b3VjaHN0YXJ0XCIgXTtcblxuXHRcdFx0XHRpZiAoICFhY3RpdmVEb2NIYW5kbGVyc1sgXCJ0b3VjaHN0YXJ0XCIgXSApIHtcblx0XHRcdFx0XHQkZG9jdW1lbnQudW5iaW5kKCBcInRvdWNoc3RhcnRcIiwgaGFuZGxlVG91Y2hTdGFydCApXG5cdFx0XHRcdFx0XHQudW5iaW5kKCBcInRvdWNobW92ZVwiLCBoYW5kbGVUb3VjaE1vdmUgKVxuXHRcdFx0XHRcdFx0LnVuYmluZCggXCJ0b3VjaGVuZFwiLCBoYW5kbGVUb3VjaEVuZCApXG5cdFx0XHRcdFx0XHQudW5iaW5kKCBcInNjcm9sbFwiLCBoYW5kbGVTY3JvbGwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgJHRoaXMgPSAkKCB0aGlzICksXG5cdFx0XHRcdGJpbmRpbmdzID0gJC5kYXRhKCB0aGlzLCBkYXRhUHJvcGVydHlOYW1lICk7XG5cblx0XHRcdC8vIHRlYXJkb3duIG1heSBiZSBjYWxsZWQgd2hlbiBhbiBlbGVtZW50IHdhc1xuXHRcdFx0Ly8gcmVtb3ZlZCBmcm9tIHRoZSBET00uIElmIHRoaXMgaXMgdGhlIGNhc2UsXG5cdFx0XHQvLyBqUXVlcnkgY29yZSBtYXkgaGF2ZSBhbHJlYWR5IHN0cmlwcGVkIHRoZSBlbGVtZW50XG5cdFx0XHQvLyBvZiBhbnkgZGF0YSBiaW5kaW5ncyBzbyB3ZSBuZWVkIHRvIGNoZWNrIGl0IGJlZm9yZVxuXHRcdFx0Ly8gdXNpbmcgaXQuXG5cdFx0XHRpZiAoIGJpbmRpbmdzICkge1xuXHRcdFx0XHRiaW5kaW5nc1sgZXZlbnRUeXBlIF0gPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVW5yZWdpc3RlciB0aGUgZHVtbXkgZXZlbnQgaGFuZGxlci5cblxuXHRcdFx0JHRoaXMudW5iaW5kKCByZWFsVHlwZSwgZHVtbXlNb3VzZUhhbmRsZXIgKTtcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyB0aGUgbGFzdCB2aXJ0dWFsIG1vdXNlIGJpbmRpbmcgb24gdGhlXG5cdFx0XHQvLyBlbGVtZW50LCByZW1vdmUgdGhlIGJpbmRpbmcgZGF0YSBmcm9tIHRoZSBlbGVtZW50LlxuXG5cdFx0XHRpZiAoICFoYXNWaXJ0dWFsQmluZGluZ3MoIHRoaXMgKSApIHtcblx0XHRcdFx0JHRoaXMucmVtb3ZlRGF0YSggZGF0YVByb3BlcnR5TmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gRXhwb3NlIG91ciBjdXN0b20gZXZlbnRzIHRvIHRoZSBqUXVlcnkgYmluZC91bmJpbmQgbWVjaGFuaXNtLlxuXG5mb3IgKCBpID0gMDsgaSA8IHZpcnR1YWxFdmVudE5hbWVzLmxlbmd0aDsgaSsrICkge1xuXHQkLmV2ZW50LnNwZWNpYWxbIHZpcnR1YWxFdmVudE5hbWVzWyBpIF0gXSA9IGdldFNwZWNpYWxFdmVudE9iamVjdCggdmlydHVhbEV2ZW50TmFtZXNbIGkgXSApO1xufVxuXG4vLyBBZGQgYSBjYXB0dXJlIGNsaWNrIGhhbmRsZXIgdG8gYmxvY2sgY2xpY2tzLlxuLy8gTm90ZSB0aGF0IHdlIHJlcXVpcmUgZXZlbnQgY2FwdHVyZSBzdXBwb3J0IGZvciB0aGlzIHNvIGlmIHRoZSBkZXZpY2Vcbi8vIGRvZXNuJ3Qgc3VwcG9ydCBpdCwgd2UgcHVudCBmb3Igbm93IGFuZCByZWx5IHNvbGVseSBvbiBtb3VzZSBldmVudHMuXG5pZiAoIGV2ZW50Q2FwdHVyZVN1cHBvcnRlZCApIHtcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJjbGlja1wiLCBmdW5jdGlvbiggZSApIHtcblx0XHR2YXIgY250ID0gY2xpY2tCbG9ja0xpc3QubGVuZ3RoLFxuXHRcdFx0dGFyZ2V0ID0gZS50YXJnZXQsXG5cdFx0XHR4LCB5LCBlbGUsIGksIG8sIHRvdWNoSUQ7XG5cblx0XHRpZiAoIGNudCApIHtcblx0XHRcdHggPSBlLmNsaWVudFg7XG5cdFx0XHR5ID0gZS5jbGllbnRZO1xuXHRcdFx0dGhyZXNob2xkID0gJC52bW91c2UuY2xpY2tEaXN0YW5jZVRocmVzaG9sZDtcblxuXHRcdFx0Ly8gVGhlIGlkZWEgaGVyZSBpcyB0byBydW4gdGhyb3VnaCB0aGUgY2xpY2tCbG9ja0xpc3QgdG8gc2VlIGlmXG5cdFx0XHQvLyB0aGUgY3VycmVudCBjbGljayBldmVudCBpcyBpbiB0aGUgcHJveGltaXR5IG9mIG9uZSBvZiBvdXJcblx0XHRcdC8vIHZjbGljayBldmVudHMgdGhhdCBoYWQgcHJldmVudERlZmF1bHQoKSBjYWxsZWQgb24gaXQuIElmIHdlIGZpbmRcblx0XHRcdC8vIG9uZSwgdGhlbiB3ZSBibG9jayB0aGUgY2xpY2suXG5cdFx0XHQvL1xuXHRcdFx0Ly8gV2h5IGRvIHdlIGhhdmUgdG8gcmVseSBvbiBwcm94aW1pdHk/XG5cdFx0XHQvL1xuXHRcdFx0Ly8gQmVjYXVzZSB0aGUgdGFyZ2V0IG9mIHRoZSB0b3VjaCBldmVudCB0aGF0IHRyaWdnZXJlZCB0aGUgdmNsaWNrXG5cdFx0XHQvLyBjYW4gYmUgZGlmZmVyZW50IGZyb20gdGhlIHRhcmdldCBvZiB0aGUgY2xpY2sgZXZlbnQgc3ludGhlc2l6ZWRcblx0XHRcdC8vIGJ5IHRoZSBicm93c2VyLiBUaGUgdGFyZ2V0IG9mIGEgbW91c2UvY2xpY2sgZXZlbnQgdGhhdCBpcyBzeW50aGVzaXplZFxuXHRcdFx0Ly8gZnJvbSBhIHRvdWNoIGV2ZW50IHNlZW1zIHRvIGJlIGltcGxlbWVudGF0aW9uIHNwZWNpZmljLiBGb3IgZXhhbXBsZSxcblx0XHRcdC8vIHNvbWUgYnJvd3NlcnMgd2lsbCBmaXJlIG1vdXNlL2NsaWNrIGV2ZW50cyBmb3IgYSBsaW5rIHRoYXQgaXMgbmVhclxuXHRcdFx0Ly8gYSB0b3VjaCBldmVudCwgZXZlbiB0aG91Z2ggdGhlIHRhcmdldCBvZiB0aGUgdG91Y2hzdGFydC90b3VjaGVuZCBldmVudFxuXHRcdFx0Ly8gc2F5cyB0aGUgdXNlciB0b3VjaGVkIG91dHNpZGUgdGhlIGxpbmsuIEFsc28sIGl0IHNlZW1zIHRoYXQgd2l0aCBtb3N0XG5cdFx0XHQvLyBicm93c2VycywgdGhlIHRhcmdldCBvZiB0aGUgbW91c2UvY2xpY2sgZXZlbnQgaXMgbm90IGNhbGN1bGF0ZWQgdW50aWwgdGhlXG5cdFx0XHQvLyB0aW1lIGl0IGlzIGRpc3BhdGNoZWQsIHNvIGlmIHlvdSByZXBsYWNlIGFuIGVsZW1lbnQgdGhhdCB5b3UgdG91Y2hlZFxuXHRcdFx0Ly8gd2l0aCBhbm90aGVyIGVsZW1lbnQsIHRoZSB0YXJnZXQgb2YgdGhlIG1vdXNlL2NsaWNrIHdpbGwgYmUgdGhlIG5ld1xuXHRcdFx0Ly8gZWxlbWVudCB1bmRlcm5lYXRoIHRoYXQgcG9pbnQuXG5cdFx0XHQvL1xuXHRcdFx0Ly8gQXNpZGUgZnJvbSBwcm94aW1pdHksIHdlIGFsc28gY2hlY2sgdG8gc2VlIGlmIHRoZSB0YXJnZXQgYW5kIGFueVxuXHRcdFx0Ly8gb2YgaXRzIGFuY2VzdG9ycyB3ZXJlIHRoZSBvbmVzIHRoYXQgYmxvY2tlZCBhIGNsaWNrLiBUaGlzIGlzIG5lY2Vzc2FyeVxuXHRcdFx0Ly8gYmVjYXVzZSBvZiB0aGUgc3RyYW5nZSBtb3VzZS9jbGljayB0YXJnZXQgY2FsY3VsYXRpb24gZG9uZSBpbiB0aGVcblx0XHRcdC8vIEFuZHJvaWQgMi4xIGJyb3dzZXIsIHdoZXJlIGlmIHlvdSBjbGljayBvbiBhbiBlbGVtZW50LCBhbmQgdGhlcmUgaXMgYVxuXHRcdFx0Ly8gbW91c2UvY2xpY2sgaGFuZGxlciBvbiBvbmUgb2YgaXRzIGFuY2VzdG9ycywgdGhlIHRhcmdldCB3aWxsIGJlIHRoZVxuXHRcdFx0Ly8gaW5uZXJtb3N0IGNoaWxkIG9mIHRoZSB0b3VjaGVkIGVsZW1lbnQsIGV2ZW4gaWYgdGhhdCBjaGlsZCBpcyBubyB3aGVyZVxuXHRcdFx0Ly8gbmVhciB0aGUgcG9pbnQgb2YgdG91Y2guXG5cblx0XHRcdGVsZSA9IHRhcmdldDtcblxuXHRcdFx0d2hpbGUgKCBlbGUgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgY250OyBpKysgKSB7XG5cdFx0XHRcdFx0byA9IGNsaWNrQmxvY2tMaXN0WyBpIF07XG5cdFx0XHRcdFx0dG91Y2hJRCA9IDA7XG5cblx0XHRcdFx0XHRpZiAoICggZWxlID09PSB0YXJnZXQgJiYgTWF0aC5hYnMoIG8ueCAtIHggKSA8IHRocmVzaG9sZCAmJiBNYXRoLmFicyggby55IC0geSApIDwgdGhyZXNob2xkICkgfHxcblx0XHRcdFx0XHRcdFx0XHQkLmRhdGEoIGVsZSwgdG91Y2hUYXJnZXRQcm9wZXJ0eU5hbWUgKSA9PT0gby50b3VjaElEICkge1xuXHRcdFx0XHRcdFx0Ly8gWFhYOiBXZSBtYXkgd2FudCB0byBjb25zaWRlciByZW1vdmluZyBtYXRjaGVzIGZyb20gdGhlIGJsb2NrIGxpc3Rcblx0XHRcdFx0XHRcdC8vICAgICAgaW5zdGVhZCBvZiB3YWl0aW5nIGZvciB0aGUgcmVzZXQgdGltZXIgdG8gZmlyZS5cblx0XHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGVsZSA9IGVsZS5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdH1cblx0fSwgdHJ1ZSk7XG59XG59KSggalF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50ICk7XG5cbihmdW5jdGlvbiggJCApIHtcblx0JC5tb2JpbGUgPSB7fTtcbn0oIGpRdWVyeSApKTtcblxuXHQoZnVuY3Rpb24oICQsIHVuZGVmaW5lZCApIHtcblx0XHR2YXIgc3VwcG9ydCA9IHtcblx0XHRcdHRvdWNoOiBcIm9udG91Y2hlbmRcIiBpbiBkb2N1bWVudFxuXHRcdH07XG5cblx0XHQkLm1vYmlsZS5zdXBwb3J0ID0gJC5tb2JpbGUuc3VwcG9ydCB8fCB7fTtcblx0XHQkLmV4dGVuZCggJC5zdXBwb3J0LCBzdXBwb3J0ICk7XG5cdFx0JC5leHRlbmQoICQubW9iaWxlLnN1cHBvcnQsIHN1cHBvcnQgKTtcblx0fSggalF1ZXJ5ICkpO1xuXG5cbihmdW5jdGlvbiggJCwgd2luZG93LCB1bmRlZmluZWQgKSB7XG5cdHZhciAkZG9jdW1lbnQgPSAkKCBkb2N1bWVudCApLFxuXHRcdHN1cHBvcnRUb3VjaCA9ICQubW9iaWxlLnN1cHBvcnQudG91Y2gsXG5cdFx0c2Nyb2xsRXZlbnQgPSBcInRvdWNobW92ZSBzY3JvbGxcIixcblx0XHR0b3VjaFN0YXJ0RXZlbnQgPSBzdXBwb3J0VG91Y2ggPyBcInRvdWNoc3RhcnRcIiA6IFwibW91c2Vkb3duXCIsXG5cdFx0dG91Y2hTdG9wRXZlbnQgPSBzdXBwb3J0VG91Y2ggPyBcInRvdWNoZW5kXCIgOiBcIm1vdXNldXBcIixcblx0XHR0b3VjaE1vdmVFdmVudCA9IHN1cHBvcnRUb3VjaCA/IFwidG91Y2htb3ZlXCIgOiBcIm1vdXNlbW92ZVwiO1xuXG5cdC8vIHNldHVwIG5ldyBldmVudCBzaG9ydGN1dHNcblx0JC5lYWNoKCAoIFwidG91Y2hzdGFydCB0b3VjaG1vdmUgdG91Y2hlbmQgXCIgK1xuXHRcdFwidGFwIHRhcGhvbGQgXCIgK1xuXHRcdFwic3dpcGUgc3dpcGVsZWZ0IHN3aXBlcmlnaHQgXCIgK1xuXHRcdFwic2Nyb2xsc3RhcnQgc2Nyb2xsc3RvcFwiICkuc3BsaXQoIFwiIFwiICksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXG5cdFx0JC5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0cmV0dXJuIGZuID8gdGhpcy5iaW5kKCBuYW1lLCBmbiApIDogdGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdFx0fTtcblxuXHRcdC8vIGpRdWVyeSA8IDEuOFxuXHRcdGlmICggJC5hdHRyRm4gKSB7XG5cdFx0XHQkLmF0dHJGblsgbmFtZSBdID0gdHJ1ZTtcblx0XHR9XG5cdH0pO1xuXG5cdGZ1bmN0aW9uIHRyaWdnZXJDdXN0b21FdmVudCggb2JqLCBldmVudFR5cGUsIGV2ZW50LCBidWJibGUgKSB7XG5cdFx0dmFyIG9yaWdpbmFsVHlwZSA9IGV2ZW50LnR5cGU7XG5cdFx0ZXZlbnQudHlwZSA9IGV2ZW50VHlwZTtcblx0XHRpZiAoIGJ1YmJsZSApIHtcblx0XHRcdCQuZXZlbnQudHJpZ2dlciggZXZlbnQsIHVuZGVmaW5lZCwgb2JqICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdCQuZXZlbnQuZGlzcGF0Y2guY2FsbCggb2JqLCBldmVudCApO1xuXHRcdH1cblx0XHRldmVudC50eXBlID0gb3JpZ2luYWxUeXBlO1xuXHR9XG5cblx0Ly8gYWxzbyBoYW5kbGVzIHNjcm9sbHN0b3Bcblx0JC5ldmVudC5zcGVjaWFsLnNjcm9sbHN0YXJ0ID0ge1xuXG5cdFx0ZW5hYmxlZDogdHJ1ZSxcblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdHZhciB0aGlzT2JqZWN0ID0gdGhpcyxcblx0XHRcdFx0JHRoaXMgPSAkKCB0aGlzT2JqZWN0ICksXG5cdFx0XHRcdHNjcm9sbGluZyxcblx0XHRcdFx0dGltZXI7XG5cblx0XHRcdGZ1bmN0aW9uIHRyaWdnZXIoIGV2ZW50LCBzdGF0ZSApIHtcblx0XHRcdFx0c2Nyb2xsaW5nID0gc3RhdGU7XG5cdFx0XHRcdHRyaWdnZXJDdXN0b21FdmVudCggdGhpc09iamVjdCwgc2Nyb2xsaW5nID8gXCJzY3JvbGxzdGFydFwiIDogXCJzY3JvbGxzdG9wXCIsIGV2ZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGlQaG9uZSB0cmlnZ2VycyBzY3JvbGwgYWZ0ZXIgYSBzbWFsbCBkZWxheTsgdXNlIHRvdWNobW92ZSBpbnN0ZWFkXG5cdFx0XHQkdGhpcy5iaW5kKCBzY3JvbGxFdmVudCwgZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdGlmICggISQuZXZlbnQuc3BlY2lhbC5zY3JvbGxzdGFydC5lbmFibGVkICkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggIXNjcm9sbGluZyApIHtcblx0XHRcdFx0XHR0cmlnZ2VyKCBldmVudCwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2xlYXJUaW1lb3V0KCB0aW1lciApO1xuXHRcdFx0XHR0aW1lciA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHRyaWdnZXIoIGV2ZW50LCBmYWxzZSApO1xuXHRcdFx0XHR9LCA1MCApO1xuXHRcdFx0fSk7XG5cdFx0fSxcblx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHQkKCB0aGlzICkudW5iaW5kKCBzY3JvbGxFdmVudCApO1xuXHRcdH1cblx0fTtcblxuXHQvLyBhbHNvIGhhbmRsZXMgdGFwaG9sZFxuXHQkLmV2ZW50LnNwZWNpYWwudGFwID0ge1xuXHRcdHRhcGhvbGRUaHJlc2hvbGQ6IDc1MCxcblx0XHRlbWl0VGFwT25UYXBob2xkOiB0cnVlLFxuXHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0aGlzT2JqZWN0ID0gdGhpcyxcblx0XHRcdFx0JHRoaXMgPSAkKCB0aGlzT2JqZWN0ICksXG5cdFx0XHRcdGlzVGFwaG9sZCA9IGZhbHNlO1xuXG5cdFx0XHQkdGhpcy5iaW5kKCBcInZtb3VzZWRvd25cIiwgZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRpc1RhcGhvbGQgPSBmYWxzZTtcblx0XHRcdFx0aWYgKCBldmVudC53aGljaCAmJiBldmVudC53aGljaCAhPT0gMSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgb3JpZ1RhcmdldCA9IGV2ZW50LnRhcmdldCxcblx0XHRcdFx0XHR0aW1lcjtcblxuXHRcdFx0XHRmdW5jdGlvbiBjbGVhclRhcFRpbWVyKCkge1xuXHRcdFx0XHRcdGNsZWFyVGltZW91dCggdGltZXIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZ1bmN0aW9uIGNsZWFyVGFwSGFuZGxlcnMoKSB7XG5cdFx0XHRcdFx0Y2xlYXJUYXBUaW1lcigpO1xuXG5cdFx0XHRcdFx0JHRoaXMudW5iaW5kKCBcInZjbGlja1wiLCBjbGlja0hhbmRsZXIgKVxuXHRcdFx0XHRcdFx0LnVuYmluZCggXCJ2bW91c2V1cFwiLCBjbGVhclRhcFRpbWVyICk7XG5cdFx0XHRcdFx0JGRvY3VtZW50LnVuYmluZCggXCJ2bW91c2VjYW5jZWxcIiwgY2xlYXJUYXBIYW5kbGVycyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZnVuY3Rpb24gY2xpY2tIYW5kbGVyKCBldmVudCApIHtcblx0XHRcdFx0XHRjbGVhclRhcEhhbmRsZXJzKCk7XG5cblx0XHRcdFx0XHQvLyBPTkxZIHRyaWdnZXIgYSAndGFwJyBldmVudCBpZiB0aGUgc3RhcnQgdGFyZ2V0IGlzXG5cdFx0XHRcdFx0Ly8gdGhlIHNhbWUgYXMgdGhlIHN0b3AgdGFyZ2V0LlxuXHRcdFx0XHRcdGlmICggIWlzVGFwaG9sZCAmJiBvcmlnVGFyZ2V0ID09PSBldmVudC50YXJnZXQgKSB7XG5cdFx0XHRcdFx0XHR0cmlnZ2VyQ3VzdG9tRXZlbnQoIHRoaXNPYmplY3QsIFwidGFwXCIsIGV2ZW50ICk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmICggaXNUYXBob2xkICkge1xuXHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQkdGhpcy5iaW5kKCBcInZtb3VzZXVwXCIsIGNsZWFyVGFwVGltZXIgKVxuXHRcdFx0XHRcdC5iaW5kKCBcInZjbGlja1wiLCBjbGlja0hhbmRsZXIgKTtcblx0XHRcdFx0JGRvY3VtZW50LmJpbmQoIFwidm1vdXNlY2FuY2VsXCIsIGNsZWFyVGFwSGFuZGxlcnMgKTtcblxuXHRcdFx0XHR0aW1lciA9IHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggISQuZXZlbnQuc3BlY2lhbC50YXAuZW1pdFRhcE9uVGFwaG9sZCApIHtcblx0XHRcdFx0XHRcdGlzVGFwaG9sZCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRyaWdnZXJDdXN0b21FdmVudCggdGhpc09iamVjdCwgXCJ0YXBob2xkXCIsICQuRXZlbnQoIFwidGFwaG9sZFwiLCB7IHRhcmdldDogb3JpZ1RhcmdldCB9ICkgKTtcblx0XHRcdFx0fSwgJC5ldmVudC5zcGVjaWFsLnRhcC50YXBob2xkVGhyZXNob2xkICk7XG5cdFx0XHR9KTtcblx0XHR9LFxuXHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdCQoIHRoaXMgKS51bmJpbmQoIFwidm1vdXNlZG93blwiICkudW5iaW5kKCBcInZjbGlja1wiICkudW5iaW5kKCBcInZtb3VzZXVwXCIgKTtcblx0XHRcdCRkb2N1bWVudC51bmJpbmQoIFwidm1vdXNlY2FuY2VsXCIgKTtcblx0XHR9XG5cdH07XG5cblx0Ly8gQWxzbyBoYW5kbGVzIHN3aXBlbGVmdCwgc3dpcGVyaWdodFxuXHQkLmV2ZW50LnNwZWNpYWwuc3dpcGUgPSB7XG5cblx0XHQvLyBNb3JlIHRoYW4gdGhpcyBob3Jpem9udGFsIGRpc3BsYWNlbWVudCwgYW5kIHdlIHdpbGwgc3VwcHJlc3Mgc2Nyb2xsaW5nLlxuXHRcdHNjcm9sbFN1cHJlc3Npb25UaHJlc2hvbGQ6IDMwLFxuXG5cdFx0Ly8gTW9yZSB0aW1lIHRoYW4gdGhpcywgYW5kIGl0IGlzbid0IGEgc3dpcGUuXG5cdFx0ZHVyYXRpb25UaHJlc2hvbGQ6IDEwMDAsXG5cblx0XHQvLyBTd2lwZSBob3Jpem9udGFsIGRpc3BsYWNlbWVudCBtdXN0IGJlIG1vcmUgdGhhbiB0aGlzLlxuXHRcdGhvcml6b250YWxEaXN0YW5jZVRocmVzaG9sZDogMzAsXG5cblx0XHQvLyBTd2lwZSB2ZXJ0aWNhbCBkaXNwbGFjZW1lbnQgbXVzdCBiZSBsZXNzIHRoYW4gdGhpcy5cblx0XHR2ZXJ0aWNhbERpc3RhbmNlVGhyZXNob2xkOiAzMCxcblxuXHRcdGdldExvY2F0aW9uOiBmdW5jdGlvbiAoIGV2ZW50ICkge1xuXHRcdFx0dmFyIHdpblBhZ2VYID0gd2luZG93LnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHR3aW5QYWdlWSA9IHdpbmRvdy5wYWdlWU9mZnNldCxcblx0XHRcdFx0eCA9IGV2ZW50LmNsaWVudFgsXG5cdFx0XHRcdHkgPSBldmVudC5jbGllbnRZO1xuXG5cdFx0XHRpZiAoIGV2ZW50LnBhZ2VZID09PSAwICYmIE1hdGguZmxvb3IoIHkgKSA+IE1hdGguZmxvb3IoIGV2ZW50LnBhZ2VZICkgfHxcblx0XHRcdFx0ZXZlbnQucGFnZVggPT09IDAgJiYgTWF0aC5mbG9vciggeCApID4gTWF0aC5mbG9vciggZXZlbnQucGFnZVggKSApIHtcblxuXHRcdFx0XHQvLyBpT1M0IGNsaWVudFgvY2xpZW50WSBoYXZlIHRoZSB2YWx1ZSB0aGF0IHNob3VsZCBoYXZlIGJlZW5cblx0XHRcdFx0Ly8gaW4gcGFnZVgvcGFnZVkuIFdoaWxlIHBhZ2VYL3BhZ2UvIGhhdmUgdGhlIHZhbHVlIDBcblx0XHRcdFx0eCA9IHggLSB3aW5QYWdlWDtcblx0XHRcdFx0eSA9IHkgLSB3aW5QYWdlWTtcblx0XHRcdH0gZWxzZSBpZiAoIHkgPCAoIGV2ZW50LnBhZ2VZIC0gd2luUGFnZVkpIHx8IHggPCAoIGV2ZW50LnBhZ2VYIC0gd2luUGFnZVggKSApIHtcblxuXHRcdFx0XHQvLyBTb21lIEFuZHJvaWQgYnJvd3NlcnMgaGF2ZSB0b3RhbGx5IGJvZ3VzIHZhbHVlcyBmb3IgY2xpZW50WC9ZXG5cdFx0XHRcdC8vIHdoZW4gc2Nyb2xsaW5nL3pvb21pbmcgYSBwYWdlLiBEZXRlY3RhYmxlIHNpbmNlIGNsaWVudFgvY2xpZW50WVxuXHRcdFx0XHQvLyBzaG91bGQgbmV2ZXIgYmUgc21hbGxlciB0aGFuIHBhZ2VYL3BhZ2VZIG1pbnVzIHBhZ2Ugc2Nyb2xsXG5cdFx0XHRcdHggPSBldmVudC5wYWdlWCAtIHdpblBhZ2VYO1xuXHRcdFx0XHR5ID0gZXZlbnQucGFnZVkgLSB3aW5QYWdlWTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0eDogeCxcblx0XHRcdFx0eTogeVxuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0c3RhcnQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciBkYXRhID0gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzID9cblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXNbIDAgXSA6IGV2ZW50LFxuXHRcdFx0XHRsb2NhdGlvbiA9ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5nZXRMb2NhdGlvbiggZGF0YSApO1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdHRpbWU6ICggbmV3IERhdGUoKSApLmdldFRpbWUoKSxcblx0XHRcdFx0XHRcdGNvb3JkczogWyBsb2NhdGlvbi54LCBsb2NhdGlvbi55IF0sXG5cdFx0XHRcdFx0XHRvcmlnaW46ICQoIGV2ZW50LnRhcmdldCApXG5cdFx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0c3RvcDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIGRhdGEgPSBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMgP1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlc1sgMCBdIDogZXZlbnQsXG5cdFx0XHRcdGxvY2F0aW9uID0gJC5ldmVudC5zcGVjaWFsLnN3aXBlLmdldExvY2F0aW9uKCBkYXRhICk7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0dGltZTogKCBuZXcgRGF0ZSgpICkuZ2V0VGltZSgpLFxuXHRcdFx0XHRcdFx0Y29vcmRzOiBbIGxvY2F0aW9uLngsIGxvY2F0aW9uLnkgXVxuXHRcdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdGhhbmRsZVN3aXBlOiBmdW5jdGlvbiggc3RhcnQsIHN0b3AsIHRoaXNPYmplY3QsIG9yaWdUYXJnZXQgKSB7XG5cdFx0XHRpZiAoIHN0b3AudGltZSAtIHN0YXJ0LnRpbWUgPCAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZHVyYXRpb25UaHJlc2hvbGQgJiZcblx0XHRcdFx0TWF0aC5hYnMoIHN0YXJ0LmNvb3Jkc1sgMCBdIC0gc3RvcC5jb29yZHNbIDAgXSApID4gJC5ldmVudC5zcGVjaWFsLnN3aXBlLmhvcml6b250YWxEaXN0YW5jZVRocmVzaG9sZCAmJlxuXHRcdFx0XHRNYXRoLmFicyggc3RhcnQuY29vcmRzWyAxIF0gLSBzdG9wLmNvb3Jkc1sgMSBdICkgPCAkLmV2ZW50LnNwZWNpYWwuc3dpcGUudmVydGljYWxEaXN0YW5jZVRocmVzaG9sZCApIHtcblx0XHRcdFx0dmFyIGRpcmVjdGlvbiA9IHN0YXJ0LmNvb3Jkc1swXSA+IHN0b3AuY29vcmRzWyAwIF0gPyBcInN3aXBlbGVmdFwiIDogXCJzd2lwZXJpZ2h0XCI7XG5cblx0XHRcdFx0dHJpZ2dlckN1c3RvbUV2ZW50KCB0aGlzT2JqZWN0LCBcInN3aXBlXCIsICQuRXZlbnQoIFwic3dpcGVcIiwgeyB0YXJnZXQ6IG9yaWdUYXJnZXQsIHN3aXBlc3RhcnQ6IHN0YXJ0LCBzd2lwZXN0b3A6IHN0b3AgfSksIHRydWUgKTtcblx0XHRcdFx0dHJpZ2dlckN1c3RvbUV2ZW50KCB0aGlzT2JqZWN0LCBkaXJlY3Rpb24sJC5FdmVudCggZGlyZWN0aW9uLCB7IHRhcmdldDogb3JpZ1RhcmdldCwgc3dpcGVzdGFydDogc3RhcnQsIHN3aXBlc3RvcDogc3RvcCB9ICksIHRydWUgKTtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHR9LFxuXG5cdFx0Ly8gVGhpcyBzZXJ2ZXMgYXMgYSBmbGFnIHRvIGVuc3VyZSB0aGF0IGF0IG1vc3Qgb25lIHN3aXBlIGV2ZW50IGV2ZW50IGlzXG5cdFx0Ly8gaW4gd29yayBhdCBhbnkgZ2l2ZW4gdGltZVxuXHRcdGV2ZW50SW5Qcm9ncmVzczogZmFsc2UsXG5cblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZXZlbnRzLFxuXHRcdFx0XHR0aGlzT2JqZWN0ID0gdGhpcyxcblx0XHRcdFx0JHRoaXMgPSAkKCB0aGlzT2JqZWN0ICksXG5cdFx0XHRcdGNvbnRleHQgPSB7fTtcblxuXHRcdFx0Ly8gUmV0cmlldmUgdGhlIGV2ZW50cyBkYXRhIGZvciB0aGlzIGVsZW1lbnQgYW5kIGFkZCB0aGUgc3dpcGUgY29udGV4dFxuXHRcdFx0ZXZlbnRzID0gJC5kYXRhKCB0aGlzLCBcIm1vYmlsZS1ldmVudHNcIiApO1xuXHRcdFx0aWYgKCAhZXZlbnRzICkge1xuXHRcdFx0XHRldmVudHMgPSB7IGxlbmd0aDogMCB9O1xuXHRcdFx0XHQkLmRhdGEoIHRoaXMsIFwibW9iaWxlLWV2ZW50c1wiLCBldmVudHMgKTtcblx0XHRcdH1cblx0XHRcdGV2ZW50cy5sZW5ndGgrKztcblx0XHRcdGV2ZW50cy5zd2lwZSA9IGNvbnRleHQ7XG5cblx0XHRcdGNvbnRleHQuc3RhcnQgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gQmFpbCBpZiB3ZSdyZSBhbHJlYWR5IHdvcmtpbmcgb24gYSBzd2lwZSBldmVudFxuXHRcdFx0XHRpZiAoICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5ldmVudEluUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdCQuZXZlbnQuc3BlY2lhbC5zd2lwZS5ldmVudEluUHJvZ3Jlc3MgPSB0cnVlO1xuXG5cdFx0XHRcdHZhciBzdG9wLFxuXHRcdFx0XHRcdHN0YXJ0ID0gJC5ldmVudC5zcGVjaWFsLnN3aXBlLnN0YXJ0KCBldmVudCApLFxuXHRcdFx0XHRcdG9yaWdUYXJnZXQgPSBldmVudC50YXJnZXQsXG5cdFx0XHRcdFx0ZW1pdHRlZCA9IGZhbHNlO1xuXG5cdFx0XHRcdGNvbnRleHQubW92ZSA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0XHRpZiAoICFzdGFydCB8fCBldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRzdG9wID0gJC5ldmVudC5zcGVjaWFsLnN3aXBlLnN0b3AoIGV2ZW50ICk7XG5cdFx0XHRcdFx0aWYgKCAhZW1pdHRlZCApIHtcblx0XHRcdFx0XHRcdGVtaXR0ZWQgPSAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuaGFuZGxlU3dpcGUoIHN0YXJ0LCBzdG9wLCB0aGlzT2JqZWN0LCBvcmlnVGFyZ2V0ICk7XG5cdFx0XHRcdFx0XHRpZiAoIGVtaXR0ZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUmVzZXQgdGhlIGNvbnRleHQgdG8gbWFrZSB3YXkgZm9yIHRoZSBuZXh0IHN3aXBlIGV2ZW50XG5cdFx0XHRcdFx0XHRcdCQuZXZlbnQuc3BlY2lhbC5zd2lwZS5ldmVudEluUHJvZ3Jlc3MgPSBmYWxzZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gcHJldmVudCBzY3JvbGxpbmdcblx0XHRcdFx0XHRpZiAoIE1hdGguYWJzKCBzdGFydC5jb29yZHNbIDAgXSAtIHN0b3AuY29vcmRzWyAwIF0gKSA+ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5zY3JvbGxTdXByZXNzaW9uVGhyZXNob2xkICkge1xuXHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Y29udGV4dC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRlbWl0dGVkID0gdHJ1ZTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVzZXQgdGhlIGNvbnRleHQgdG8gbWFrZSB3YXkgZm9yIHRoZSBuZXh0IHN3aXBlIGV2ZW50XG5cdFx0XHRcdFx0XHQkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZXZlbnRJblByb2dyZXNzID0gZmFsc2U7XG5cdFx0XHRcdFx0XHQkZG9jdW1lbnQub2ZmKCB0b3VjaE1vdmVFdmVudCwgY29udGV4dC5tb3ZlICk7XG5cdFx0XHRcdFx0XHRjb250ZXh0Lm1vdmUgPSBudWxsO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdCRkb2N1bWVudC5vbiggdG91Y2hNb3ZlRXZlbnQsIGNvbnRleHQubW92ZSApXG5cdFx0XHRcdFx0Lm9uZSggdG91Y2hTdG9wRXZlbnQsIGNvbnRleHQuc3RvcCApO1xuXHRcdFx0fTtcblx0XHRcdCR0aGlzLm9uKCB0b3VjaFN0YXJ0RXZlbnQsIGNvbnRleHQuc3RhcnQgKTtcblx0XHR9LFxuXG5cdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGV2ZW50cywgY29udGV4dDtcblxuXHRcdFx0ZXZlbnRzID0gJC5kYXRhKCB0aGlzLCBcIm1vYmlsZS1ldmVudHNcIiApO1xuXHRcdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBldmVudHMuc3dpcGU7XG5cdFx0XHRcdGRlbGV0ZSBldmVudHMuc3dpcGU7XG5cdFx0XHRcdGV2ZW50cy5sZW5ndGgtLTtcblx0XHRcdFx0aWYgKCBldmVudHMubGVuZ3RoID09PSAwICkge1xuXHRcdFx0XHRcdCQucmVtb3ZlRGF0YSggdGhpcywgXCJtb2JpbGUtZXZlbnRzXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGNvbnRleHQgKSB7XG5cdFx0XHRcdGlmICggY29udGV4dC5zdGFydCApIHtcblx0XHRcdFx0XHQkKCB0aGlzICkub2ZmKCB0b3VjaFN0YXJ0RXZlbnQsIGNvbnRleHQuc3RhcnQgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGNvbnRleHQubW92ZSApIHtcblx0XHRcdFx0XHQkZG9jdW1lbnQub2ZmKCB0b3VjaE1vdmVFdmVudCwgY29udGV4dC5tb3ZlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBjb250ZXh0LnN0b3AgKSB7XG5cdFx0XHRcdFx0JGRvY3VtZW50Lm9mZiggdG91Y2hTdG9wRXZlbnQsIGNvbnRleHQuc3RvcCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHQkLmVhY2goe1xuXHRcdHNjcm9sbHN0b3A6IFwic2Nyb2xsc3RhcnRcIixcblx0XHR0YXBob2xkOiBcInRhcFwiLFxuXHRcdHN3aXBlbGVmdDogXCJzd2lwZS5sZWZ0XCIsXG5cdFx0c3dpcGVyaWdodDogXCJzd2lwZS5yaWdodFwiXG5cdH0sIGZ1bmN0aW9uKCBldmVudCwgc291cmNlRXZlbnQgKSB7XG5cblx0XHQkLmV2ZW50LnNwZWNpYWxbIGV2ZW50IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdCQoIHRoaXMgKS5iaW5kKCBzb3VyY2VFdmVudCwgJC5ub29wICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQkKCB0aGlzICkudW5iaW5kKCBzb3VyY2VFdmVudCApO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0pO1xuXG59KSggalF1ZXJ5LCB0aGlzICk7XG5cblxufSkpO1xuIiwiLyoqIVxuICogQGZpbGVPdmVydmlldyBLaWNrYXNzIGxpYnJhcnkgdG8gY3JlYXRlIGFuZCBwbGFjZSBwb3BwZXJzIG5lYXIgdGhlaXIgcmVmZXJlbmNlIGVsZW1lbnRzLlxuICogQHZlcnNpb24gMS4xNi4wXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE2IEZlZGVyaWNvIFppdm9sbyBhbmQgY29udHJpYnV0b3JzXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuICogY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG4gKiBTT0ZUV0FSRS5cbiAqL1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuXHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuXHQoZ2xvYmFsLlBvcHBlciA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxudmFyIGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCc7XG5cbnZhciB0aW1lb3V0RHVyYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBsb25nZXJUaW1lb3V0QnJvd3NlcnMgPSBbJ0VkZ2UnLCAnVHJpZGVudCcsICdGaXJlZm94J107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbG9uZ2VyVGltZW91dEJyb3dzZXJzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGlzQnJvd3NlciAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YobG9uZ2VyVGltZW91dEJyb3dzZXJzW2ldKSA+PSAwKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIDA7XG59KCk7XG5cbmZ1bmN0aW9uIG1pY3JvdGFza0RlYm91bmNlKGZuKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY2FsbGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNhbGxlZCA9IHRydWU7XG4gICAgd2luZG93LlByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGVkID0gZmFsc2U7XG4gICAgICBmbigpO1xuICAgIH0pO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0YXNrRGVib3VuY2UoZm4pIHtcbiAgdmFyIHNjaGVkdWxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghc2NoZWR1bGVkKSB7XG4gICAgICBzY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgICBmbigpO1xuICAgICAgfSwgdGltZW91dER1cmF0aW9uKTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBzdXBwb3J0c01pY3JvVGFza3MgPSBpc0Jyb3dzZXIgJiYgd2luZG93LlByb21pc2U7XG5cbi8qKlxuKiBDcmVhdGUgYSBkZWJvdW5jZWQgdmVyc2lvbiBvZiBhIG1ldGhvZCwgdGhhdCdzIGFzeW5jaHJvbm91c2x5IGRlZmVycmVkXG4qIGJ1dCBjYWxsZWQgaW4gdGhlIG1pbmltdW0gdGltZSBwb3NzaWJsZS5cbipcbiogQG1ldGhvZFxuKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4qIEBhcmd1bWVudCB7RnVuY3Rpb259IGZuXG4qIEByZXR1cm5zIHtGdW5jdGlvbn1cbiovXG52YXIgZGVib3VuY2UgPSBzdXBwb3J0c01pY3JvVGFza3MgPyBtaWNyb3Rhc2tEZWJvdW5jZSA6IHRhc2tEZWJvdW5jZTtcblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gdmFyaWFibGUgaXMgYSBmdW5jdGlvblxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBbnl9IGZ1bmN0aW9uVG9DaGVjayAtIHZhcmlhYmxlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gYW5zd2VyIHRvOiBpcyBhIGZ1bmN0aW9uP1xuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGZ1bmN0aW9uVG9DaGVjaykge1xuICB2YXIgZ2V0VHlwZSA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb25Ub0NoZWNrICYmIGdldFR5cGUudG9TdHJpbmcuY2FsbChmdW5jdGlvblRvQ2hlY2spID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIEdldCBDU1MgY29tcHV0ZWQgcHJvcGVydHkgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge1N0cmluZ30gcHJvcGVydHlcbiAqL1xuZnVuY3Rpb24gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQsIHByb3BlcnR5KSB7XG4gIGlmIChlbGVtZW50Lm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG4gIHZhciB3aW5kb3cgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gIHZhciBjc3MgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50LCBudWxsKTtcbiAgcmV0dXJuIHByb3BlcnR5ID8gY3NzW3Byb3BlcnR5XSA6IGNzcztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwYXJlbnROb2RlIG9yIHRoZSBob3N0IG9mIHRoZSBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0UGFyZW50Tm9kZShlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50Lm5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuICByZXR1cm4gZWxlbWVudC5wYXJlbnROb2RlIHx8IGVsZW1lbnQuaG9zdDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzY3JvbGxpbmcgcGFyZW50IG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBzY3JvbGwgcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudChlbGVtZW50KSB7XG4gIC8vIFJldHVybiBib2R5LCBgZ2V0U2Nyb2xsYCB3aWxsIHRha2UgY2FyZSB0byBnZXQgdGhlIGNvcnJlY3QgYHNjcm9sbFRvcGAgZnJvbSBpdFxuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuYm9keTtcbiAgfVxuXG4gIHN3aXRjaCAoZWxlbWVudC5ub2RlTmFtZSkge1xuICAgIGNhc2UgJ0hUTUwnOlxuICAgIGNhc2UgJ0JPRFknOlxuICAgICAgcmV0dXJuIGVsZW1lbnQub3duZXJEb2N1bWVudC5ib2R5O1xuICAgIGNhc2UgJyNkb2N1bWVudCc6XG4gICAgICByZXR1cm4gZWxlbWVudC5ib2R5O1xuICB9XG5cbiAgLy8gRmlyZWZveCB3YW50IHVzIHRvIGNoZWNrIGAteGAgYW5kIGAteWAgdmFyaWF0aW9ucyBhcyB3ZWxsXG5cbiAgdmFyIF9nZXRTdHlsZUNvbXB1dGVkUHJvcCA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50KSxcbiAgICAgIG92ZXJmbG93ID0gX2dldFN0eWxlQ29tcHV0ZWRQcm9wLm92ZXJmbG93LFxuICAgICAgb3ZlcmZsb3dYID0gX2dldFN0eWxlQ29tcHV0ZWRQcm9wLm92ZXJmbG93WCxcbiAgICAgIG92ZXJmbG93WSA9IF9nZXRTdHlsZUNvbXB1dGVkUHJvcC5vdmVyZmxvd1k7XG5cbiAgaWYgKC8oYXV0b3xzY3JvbGx8b3ZlcmxheSkvLnRlc3Qob3ZlcmZsb3cgKyBvdmVyZmxvd1kgKyBvdmVyZmxvd1gpKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUoZWxlbWVudCkpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHJlZmVyZW5jZSBub2RlIG9mIHRoZSByZWZlcmVuY2Ugb2JqZWN0LCBvciB0aGUgcmVmZXJlbmNlIG9iamVjdCBpdHNlbGYuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSByZWZlcmVuY2UgLSB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgKHRoZSBwb3BwZXIgd2lsbCBiZSByZWxhdGl2ZSB0byB0aGlzKVxuICogQHJldHVybnMge0VsZW1lbnR9IHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRSZWZlcmVuY2VOb2RlKHJlZmVyZW5jZSkge1xuICByZXR1cm4gcmVmZXJlbmNlICYmIHJlZmVyZW5jZS5yZWZlcmVuY2VOb2RlID8gcmVmZXJlbmNlLnJlZmVyZW5jZU5vZGUgOiByZWZlcmVuY2U7XG59XG5cbnZhciBpc0lFMTEgPSBpc0Jyb3dzZXIgJiYgISEod2luZG93Lk1TSW5wdXRNZXRob2RDb250ZXh0ICYmIGRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgaXNJRTEwID0gaXNCcm93c2VyICYmIC9NU0lFIDEwLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIGJyb3dzZXIgaXMgSW50ZXJuZXQgRXhwbG9yZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7TnVtYmVyfSB2ZXJzaW9uIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gaXNJRVxuICovXG5mdW5jdGlvbiBpc0lFKHZlcnNpb24pIHtcbiAgaWYgKHZlcnNpb24gPT09IDExKSB7XG4gICAgcmV0dXJuIGlzSUUxMTtcbiAgfVxuICBpZiAodmVyc2lvbiA9PT0gMTApIHtcbiAgICByZXR1cm4gaXNJRTEwO1xuICB9XG4gIHJldHVybiBpc0lFMTEgfHwgaXNJRTEwO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIG9mZnNldCBwYXJlbnQgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IG9mZnNldCBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIHZhciBub09mZnNldFBhcmVudCA9IGlzSUUoMTApID8gZG9jdW1lbnQuYm9keSA6IG51bGw7XG5cbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcbiAgdmFyIG9mZnNldFBhcmVudCA9IGVsZW1lbnQub2Zmc2V0UGFyZW50IHx8IG51bGw7XG4gIC8vIFNraXAgaGlkZGVuIGVsZW1lbnRzIHdoaWNoIGRvbid0IGhhdmUgYW4gb2Zmc2V0UGFyZW50XG4gIHdoaWxlIChvZmZzZXRQYXJlbnQgPT09IG5vT2Zmc2V0UGFyZW50ICYmIGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nKSB7XG4gICAgb2Zmc2V0UGFyZW50ID0gKGVsZW1lbnQgPSBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZykub2Zmc2V0UGFyZW50O1xuICB9XG5cbiAgdmFyIG5vZGVOYW1lID0gb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudC5ub2RlTmFtZTtcblxuICBpZiAoIW5vZGVOYW1lIHx8IG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBlbGVtZW50ID8gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCA6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIC8vIC5vZmZzZXRQYXJlbnQgd2lsbCByZXR1cm4gdGhlIGNsb3Nlc3QgVEgsIFREIG9yIFRBQkxFIGluIGNhc2VcbiAgLy8gbm8gb2Zmc2V0UGFyZW50IGlzIHByZXNlbnQsIEkgaGF0ZSB0aGlzIGpvYi4uLlxuICBpZiAoWydUSCcsICdURCcsICdUQUJMRSddLmluZGV4T2Yob2Zmc2V0UGFyZW50Lm5vZGVOYW1lKSAhPT0gLTEgJiYgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KG9mZnNldFBhcmVudCwgJ3Bvc2l0aW9uJykgPT09ICdzdGF0aWMnKSB7XG4gICAgcmV0dXJuIGdldE9mZnNldFBhcmVudChvZmZzZXRQYXJlbnQpO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldFBhcmVudDtcbn1cblxuZnVuY3Rpb24gaXNPZmZzZXRDb250YWluZXIoZWxlbWVudCkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuXG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBub2RlTmFtZSA9PT0gJ0hUTUwnIHx8IGdldE9mZnNldFBhcmVudChlbGVtZW50LmZpcnN0RWxlbWVudENoaWxkKSA9PT0gZWxlbWVudDtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgcm9vdCBub2RlIChkb2N1bWVudCwgc2hhZG93RE9NIHJvb3QpIG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm5zIHtFbGVtZW50fSByb290IG5vZGVcbiAqL1xuZnVuY3Rpb24gZ2V0Um9vdChub2RlKSB7XG4gIGlmIChub2RlLnBhcmVudE5vZGUgIT09IG51bGwpIHtcbiAgICByZXR1cm4gZ2V0Um9vdChub2RlLnBhcmVudE5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIG9mZnNldCBwYXJlbnQgY29tbW9uIHRvIHRoZSB0d28gcHJvdmlkZWQgbm9kZXNcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudDFcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudDJcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBjb21tb24gb2Zmc2V0IHBhcmVudFxuICovXG5mdW5jdGlvbiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxLCBlbGVtZW50Mikge1xuICAvLyBUaGlzIGNoZWNrIGlzIG5lZWRlZCB0byBhdm9pZCBlcnJvcnMgaW4gY2FzZSBvbmUgb2YgdGhlIGVsZW1lbnRzIGlzbid0IGRlZmluZWQgZm9yIGFueSByZWFzb25cbiAgaWYgKCFlbGVtZW50MSB8fCAhZWxlbWVudDEubm9kZVR5cGUgfHwgIWVsZW1lbnQyIHx8ICFlbGVtZW50Mi5ub2RlVHlwZSkge1xuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cblxuICAvLyBIZXJlIHdlIG1ha2Ugc3VyZSB0byBnaXZlIGFzIFwic3RhcnRcIiB0aGUgZWxlbWVudCB0aGF0IGNvbWVzIGZpcnN0IGluIHRoZSBET01cbiAgdmFyIG9yZGVyID0gZWxlbWVudDEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZWxlbWVudDIpICYgTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkc7XG4gIHZhciBzdGFydCA9IG9yZGVyID8gZWxlbWVudDEgOiBlbGVtZW50MjtcbiAgdmFyIGVuZCA9IG9yZGVyID8gZWxlbWVudDIgOiBlbGVtZW50MTtcblxuICAvLyBHZXQgY29tbW9uIGFuY2VzdG9yIGNvbnRhaW5lclxuICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICByYW5nZS5zZXRTdGFydChzdGFydCwgMCk7XG4gIHJhbmdlLnNldEVuZChlbmQsIDApO1xuICB2YXIgY29tbW9uQW5jZXN0b3JDb250YWluZXIgPSByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcjtcblxuICAvLyBCb3RoIG5vZGVzIGFyZSBpbnNpZGUgI2RvY3VtZW50XG5cbiAgaWYgKGVsZW1lbnQxICE9PSBjb21tb25BbmNlc3RvckNvbnRhaW5lciAmJiBlbGVtZW50MiAhPT0gY29tbW9uQW5jZXN0b3JDb250YWluZXIgfHwgc3RhcnQuY29udGFpbnMoZW5kKSkge1xuICAgIGlmIChpc09mZnNldENvbnRhaW5lcihjb21tb25BbmNlc3RvckNvbnRhaW5lcikpIHtcbiAgICAgIHJldHVybiBjb21tb25BbmNlc3RvckNvbnRhaW5lcjtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0T2Zmc2V0UGFyZW50KGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKTtcbiAgfVxuXG4gIC8vIG9uZSBvZiB0aGUgbm9kZXMgaXMgaW5zaWRlIHNoYWRvd0RPTSwgZmluZCB3aGljaCBvbmVcbiAgdmFyIGVsZW1lbnQxcm9vdCA9IGdldFJvb3QoZWxlbWVudDEpO1xuICBpZiAoZWxlbWVudDFyb290Lmhvc3QpIHtcbiAgICByZXR1cm4gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MXJvb3QuaG9zdCwgZWxlbWVudDIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxLCBnZXRSb290KGVsZW1lbnQyKS5ob3N0KTtcbiAgfVxufVxuXG4vKipcbiAqIEdldHMgdGhlIHNjcm9sbCB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudCBpbiB0aGUgZ2l2ZW4gc2lkZSAodG9wIGFuZCBsZWZ0KVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge1N0cmluZ30gc2lkZSBgdG9wYCBvciBgbGVmdGBcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGFtb3VudCBvZiBzY3JvbGxlZCBwaXhlbHNcbiAqL1xuZnVuY3Rpb24gZ2V0U2Nyb2xsKGVsZW1lbnQpIHtcbiAgdmFyIHNpZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICd0b3AnO1xuXG4gIHZhciB1cHBlclNpZGUgPSBzaWRlID09PSAndG9wJyA/ICdzY3JvbGxUb3AnIDogJ3Njcm9sbExlZnQnO1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuXG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICB2YXIgaHRtbCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgdmFyIHNjcm9sbGluZ0VsZW1lbnQgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudCB8fCBodG1sO1xuICAgIHJldHVybiBzY3JvbGxpbmdFbGVtZW50W3VwcGVyU2lkZV07XG4gIH1cblxuICByZXR1cm4gZWxlbWVudFt1cHBlclNpZGVdO1xufVxuXG4vKlxuICogU3VtIG9yIHN1YnRyYWN0IHRoZSBlbGVtZW50IHNjcm9sbCB2YWx1ZXMgKGxlZnQgYW5kIHRvcCkgZnJvbSBhIGdpdmVuIHJlY3Qgb2JqZWN0XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gcmVjdCAtIFJlY3Qgb2JqZWN0IHlvdSB3YW50IHRvIGNoYW5nZVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCAtIFRoZSBlbGVtZW50IGZyb20gdGhlIGZ1bmN0aW9uIHJlYWRzIHRoZSBzY3JvbGwgdmFsdWVzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHN1YnRyYWN0IC0gc2V0IHRvIHRydWUgaWYgeW91IHdhbnQgdG8gc3VidHJhY3QgdGhlIHNjcm9sbCB2YWx1ZXNcbiAqIEByZXR1cm4ge09iamVjdH0gcmVjdCAtIFRoZSBtb2RpZmllciByZWN0IG9iamVjdFxuICovXG5mdW5jdGlvbiBpbmNsdWRlU2Nyb2xsKHJlY3QsIGVsZW1lbnQpIHtcbiAgdmFyIHN1YnRyYWN0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcblxuICB2YXIgc2Nyb2xsVG9wID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICd0b3AnKTtcbiAgdmFyIHNjcm9sbExlZnQgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ2xlZnQnKTtcbiAgdmFyIG1vZGlmaWVyID0gc3VidHJhY3QgPyAtMSA6IDE7XG4gIHJlY3QudG9wICs9IHNjcm9sbFRvcCAqIG1vZGlmaWVyO1xuICByZWN0LmJvdHRvbSArPSBzY3JvbGxUb3AgKiBtb2RpZmllcjtcbiAgcmVjdC5sZWZ0ICs9IHNjcm9sbExlZnQgKiBtb2RpZmllcjtcbiAgcmVjdC5yaWdodCArPSBzY3JvbGxMZWZ0ICogbW9kaWZpZXI7XG4gIHJldHVybiByZWN0O1xufVxuXG4vKlxuICogSGVscGVyIHRvIGRldGVjdCBib3JkZXJzIG9mIGEgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtDU1NTdHlsZURlY2xhcmF0aW9ufSBzdHlsZXNcbiAqIFJlc3VsdCBvZiBgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5YCBvbiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IGF4aXMgLSBgeGAgb3IgYHlgXG4gKiBAcmV0dXJuIHtudW1iZXJ9IGJvcmRlcnMgLSBUaGUgYm9yZGVycyBzaXplIG9mIHRoZSBnaXZlbiBheGlzXG4gKi9cblxuZnVuY3Rpb24gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCBheGlzKSB7XG4gIHZhciBzaWRlQSA9IGF4aXMgPT09ICd4JyA/ICdMZWZ0JyA6ICdUb3AnO1xuICB2YXIgc2lkZUIgPSBzaWRlQSA9PT0gJ0xlZnQnID8gJ1JpZ2h0JyA6ICdCb3R0b20nO1xuXG4gIHJldHVybiBwYXJzZUZsb2F0KHN0eWxlc1snYm9yZGVyJyArIHNpZGVBICsgJ1dpZHRoJ10sIDEwKSArIHBhcnNlRmxvYXQoc3R5bGVzWydib3JkZXInICsgc2lkZUIgKyAnV2lkdGgnXSwgMTApO1xufVxuXG5mdW5jdGlvbiBnZXRTaXplKGF4aXMsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpIHtcbiAgcmV0dXJuIE1hdGgubWF4KGJvZHlbJ29mZnNldCcgKyBheGlzXSwgYm9keVsnc2Nyb2xsJyArIGF4aXNdLCBodG1sWydjbGllbnQnICsgYXhpc10sIGh0bWxbJ29mZnNldCcgKyBheGlzXSwgaHRtbFsnc2Nyb2xsJyArIGF4aXNdLCBpc0lFKDEwKSA/IHBhcnNlSW50KGh0bWxbJ29mZnNldCcgKyBheGlzXSkgKyBwYXJzZUludChjb21wdXRlZFN0eWxlWydtYXJnaW4nICsgKGF4aXMgPT09ICdIZWlnaHQnID8gJ1RvcCcgOiAnTGVmdCcpXSkgKyBwYXJzZUludChjb21wdXRlZFN0eWxlWydtYXJnaW4nICsgKGF4aXMgPT09ICdIZWlnaHQnID8gJ0JvdHRvbScgOiAnUmlnaHQnKV0pIDogMCk7XG59XG5cbmZ1bmN0aW9uIGdldFdpbmRvd1NpemVzKGRvY3VtZW50KSB7XG4gIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgdmFyIGh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIHZhciBjb21wdXRlZFN0eWxlID0gaXNJRSgxMCkgJiYgZ2V0Q29tcHV0ZWRTdHlsZShodG1sKTtcblxuICByZXR1cm4ge1xuICAgIGhlaWdodDogZ2V0U2l6ZSgnSGVpZ2h0JywgYm9keSwgaHRtbCwgY29tcHV0ZWRTdHlsZSksXG4gICAgd2lkdGg6IGdldFNpemUoJ1dpZHRoJywgYm9keSwgaHRtbCwgY29tcHV0ZWRTdHlsZSlcbiAgfTtcbn1cblxudmFyIGNsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn07XG5cbnZhciBjcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTtcblxuXG5cblxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiAob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG4vKipcbiAqIEdpdmVuIGVsZW1lbnQgb2Zmc2V0cywgZ2VuZXJhdGUgYW4gb3V0cHV0IHNpbWlsYXIgdG8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge09iamVjdH0gb2Zmc2V0c1xuICogQHJldHVybnMge09iamVjdH0gQ2xpZW50UmVjdCBsaWtlIG91dHB1dFxuICovXG5mdW5jdGlvbiBnZXRDbGllbnRSZWN0KG9mZnNldHMpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvZmZzZXRzLCB7XG4gICAgcmlnaHQ6IG9mZnNldHMubGVmdCArIG9mZnNldHMud2lkdGgsXG4gICAgYm90dG9tOiBvZmZzZXRzLnRvcCArIG9mZnNldHMuaGVpZ2h0XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCBib3VuZGluZyBjbGllbnQgcmVjdCBvZiBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHtPYmplY3R9IGNsaWVudCByZWN0XG4gKi9cbmZ1bmN0aW9uIGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50KSB7XG4gIHZhciByZWN0ID0ge307XG5cbiAgLy8gSUUxMCAxMCBGSVg6IFBsZWFzZSwgZG9uJ3QgYXNrLCB0aGUgZWxlbWVudCBpc24ndFxuICAvLyBjb25zaWRlcmVkIGluIERPTSBpbiBzb21lIGNpcmN1bXN0YW5jZXMuLi5cbiAgLy8gVGhpcyBpc24ndCByZXByb2R1Y2libGUgaW4gSUUxMCBjb21wYXRpYmlsaXR5IG1vZGUgb2YgSUUxMVxuICB0cnkge1xuICAgIGlmIChpc0lFKDEwKSkge1xuICAgICAgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB2YXIgc2Nyb2xsVG9wID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICd0b3AnKTtcbiAgICAgIHZhciBzY3JvbGxMZWZ0ID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICdsZWZ0Jyk7XG4gICAgICByZWN0LnRvcCArPSBzY3JvbGxUb3A7XG4gICAgICByZWN0LmxlZnQgKz0gc2Nyb2xsTGVmdDtcbiAgICAgIHJlY3QuYm90dG9tICs9IHNjcm9sbFRvcDtcbiAgICAgIHJlY3QucmlnaHQgKz0gc2Nyb2xsTGVmdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSB7XG4gICAgbGVmdDogcmVjdC5sZWZ0LFxuICAgIHRvcDogcmVjdC50b3AsXG4gICAgd2lkdGg6IHJlY3QucmlnaHQgLSByZWN0LmxlZnQsXG4gICAgaGVpZ2h0OiByZWN0LmJvdHRvbSAtIHJlY3QudG9wXG4gIH07XG5cbiAgLy8gc3VidHJhY3Qgc2Nyb2xsYmFyIHNpemUgZnJvbSBzaXplc1xuICB2YXIgc2l6ZXMgPSBlbGVtZW50Lm5vZGVOYW1lID09PSAnSFRNTCcgPyBnZXRXaW5kb3dTaXplcyhlbGVtZW50Lm93bmVyRG9jdW1lbnQpIDoge307XG4gIHZhciB3aWR0aCA9IHNpemVzLndpZHRoIHx8IGVsZW1lbnQuY2xpZW50V2lkdGggfHwgcmVzdWx0LndpZHRoO1xuICB2YXIgaGVpZ2h0ID0gc2l6ZXMuaGVpZ2h0IHx8IGVsZW1lbnQuY2xpZW50SGVpZ2h0IHx8IHJlc3VsdC5oZWlnaHQ7XG5cbiAgdmFyIGhvcml6U2Nyb2xsYmFyID0gZWxlbWVudC5vZmZzZXRXaWR0aCAtIHdpZHRoO1xuICB2YXIgdmVydFNjcm9sbGJhciA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0IC0gaGVpZ2h0O1xuXG4gIC8vIGlmIGFuIGh5cG90aGV0aWNhbCBzY3JvbGxiYXIgaXMgZGV0ZWN0ZWQsIHdlIG11c3QgYmUgc3VyZSBpdCdzIG5vdCBhIGBib3JkZXJgXG4gIC8vIHdlIG1ha2UgdGhpcyBjaGVjayBjb25kaXRpb25hbCBmb3IgcGVyZm9ybWFuY2UgcmVhc29uc1xuICBpZiAoaG9yaXpTY3JvbGxiYXIgfHwgdmVydFNjcm9sbGJhcikge1xuICAgIHZhciBzdHlsZXMgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCk7XG4gICAgaG9yaXpTY3JvbGxiYXIgLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAneCcpO1xuICAgIHZlcnRTY3JvbGxiYXIgLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAneScpO1xuXG4gICAgcmVzdWx0LndpZHRoIC09IGhvcml6U2Nyb2xsYmFyO1xuICAgIHJlc3VsdC5oZWlnaHQgLT0gdmVydFNjcm9sbGJhcjtcbiAgfVxuXG4gIHJldHVybiBnZXRDbGllbnRSZWN0KHJlc3VsdCk7XG59XG5cbmZ1bmN0aW9uIGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShjaGlsZHJlbiwgcGFyZW50KSB7XG4gIHZhciBmaXhlZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcblxuICB2YXIgaXNJRTEwID0gaXNJRSgxMCk7XG4gIHZhciBpc0hUTUwgPSBwYXJlbnQubm9kZU5hbWUgPT09ICdIVE1MJztcbiAgdmFyIGNoaWxkcmVuUmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChjaGlsZHJlbik7XG4gIHZhciBwYXJlbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHBhcmVudCk7XG4gIHZhciBzY3JvbGxQYXJlbnQgPSBnZXRTY3JvbGxQYXJlbnQoY2hpbGRyZW4pO1xuXG4gIHZhciBzdHlsZXMgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkocGFyZW50KTtcbiAgdmFyIGJvcmRlclRvcFdpZHRoID0gcGFyc2VGbG9hdChzdHlsZXMuYm9yZGVyVG9wV2lkdGgsIDEwKTtcbiAgdmFyIGJvcmRlckxlZnRXaWR0aCA9IHBhcnNlRmxvYXQoc3R5bGVzLmJvcmRlckxlZnRXaWR0aCwgMTApO1xuXG4gIC8vIEluIGNhc2VzIHdoZXJlIHRoZSBwYXJlbnQgaXMgZml4ZWQsIHdlIG11c3QgaWdub3JlIG5lZ2F0aXZlIHNjcm9sbCBpbiBvZmZzZXQgY2FsY1xuICBpZiAoZml4ZWRQb3NpdGlvbiAmJiBpc0hUTUwpIHtcbiAgICBwYXJlbnRSZWN0LnRvcCA9IE1hdGgubWF4KHBhcmVudFJlY3QudG9wLCAwKTtcbiAgICBwYXJlbnRSZWN0LmxlZnQgPSBNYXRoLm1heChwYXJlbnRSZWN0LmxlZnQsIDApO1xuICB9XG4gIHZhciBvZmZzZXRzID0gZ2V0Q2xpZW50UmVjdCh7XG4gICAgdG9wOiBjaGlsZHJlblJlY3QudG9wIC0gcGFyZW50UmVjdC50b3AgLSBib3JkZXJUb3BXaWR0aCxcbiAgICBsZWZ0OiBjaGlsZHJlblJlY3QubGVmdCAtIHBhcmVudFJlY3QubGVmdCAtIGJvcmRlckxlZnRXaWR0aCxcbiAgICB3aWR0aDogY2hpbGRyZW5SZWN0LndpZHRoLFxuICAgIGhlaWdodDogY2hpbGRyZW5SZWN0LmhlaWdodFxuICB9KTtcbiAgb2Zmc2V0cy5tYXJnaW5Ub3AgPSAwO1xuICBvZmZzZXRzLm1hcmdpbkxlZnQgPSAwO1xuXG4gIC8vIFN1YnRyYWN0IG1hcmdpbnMgb2YgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgaXQncyBiZWluZyB1c2VkIGFzIHBhcmVudFxuICAvLyB3ZSBkbyB0aGlzIG9ubHkgb24gSFRNTCBiZWNhdXNlIGl0J3MgdGhlIG9ubHkgZWxlbWVudCB0aGF0IGJlaGF2ZXNcbiAgLy8gZGlmZmVyZW50bHkgd2hlbiBtYXJnaW5zIGFyZSBhcHBsaWVkIHRvIGl0LiBUaGUgbWFyZ2lucyBhcmUgaW5jbHVkZWQgaW5cbiAgLy8gdGhlIGJveCBvZiB0aGUgZG9jdW1lbnRFbGVtZW50LCBpbiB0aGUgb3RoZXIgY2FzZXMgbm90LlxuICBpZiAoIWlzSUUxMCAmJiBpc0hUTUwpIHtcbiAgICB2YXIgbWFyZ2luVG9wID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luVG9wLCAxMCk7XG4gICAgdmFyIG1hcmdpbkxlZnQgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5MZWZ0LCAxMCk7XG5cbiAgICBvZmZzZXRzLnRvcCAtPSBib3JkZXJUb3BXaWR0aCAtIG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLmJvdHRvbSAtPSBib3JkZXJUb3BXaWR0aCAtIG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLmxlZnQgLT0gYm9yZGVyTGVmdFdpZHRoIC0gbWFyZ2luTGVmdDtcbiAgICBvZmZzZXRzLnJpZ2h0IC09IGJvcmRlckxlZnRXaWR0aCAtIG1hcmdpbkxlZnQ7XG5cbiAgICAvLyBBdHRhY2ggbWFyZ2luVG9wIGFuZCBtYXJnaW5MZWZ0IGJlY2F1c2UgaW4gc29tZSBjaXJjdW1zdGFuY2VzIHdlIG1heSBuZWVkIHRoZW1cbiAgICBvZmZzZXRzLm1hcmdpblRvcCA9IG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLm1hcmdpbkxlZnQgPSBtYXJnaW5MZWZ0O1xuICB9XG5cbiAgaWYgKGlzSUUxMCAmJiAhZml4ZWRQb3NpdGlvbiA/IHBhcmVudC5jb250YWlucyhzY3JvbGxQYXJlbnQpIDogcGFyZW50ID09PSBzY3JvbGxQYXJlbnQgJiYgc2Nyb2xsUGFyZW50Lm5vZGVOYW1lICE9PSAnQk9EWScpIHtcbiAgICBvZmZzZXRzID0gaW5jbHVkZVNjcm9sbChvZmZzZXRzLCBwYXJlbnQpO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldHM7XG59XG5cbmZ1bmN0aW9uIGdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZShlbGVtZW50KSB7XG4gIHZhciBleGNsdWRlU2Nyb2xsID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcblxuICB2YXIgaHRtbCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIHZhciByZWxhdGl2ZU9mZnNldCA9IGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShlbGVtZW50LCBodG1sKTtcbiAgdmFyIHdpZHRoID0gTWF0aC5tYXgoaHRtbC5jbGllbnRXaWR0aCwgd2luZG93LmlubmVyV2lkdGggfHwgMCk7XG4gIHZhciBoZWlnaHQgPSBNYXRoLm1heChodG1sLmNsaWVudEhlaWdodCwgd2luZG93LmlubmVySGVpZ2h0IHx8IDApO1xuXG4gIHZhciBzY3JvbGxUb3AgPSAhZXhjbHVkZVNjcm9sbCA/IGdldFNjcm9sbChodG1sKSA6IDA7XG4gIHZhciBzY3JvbGxMZWZ0ID0gIWV4Y2x1ZGVTY3JvbGwgPyBnZXRTY3JvbGwoaHRtbCwgJ2xlZnQnKSA6IDA7XG5cbiAgdmFyIG9mZnNldCA9IHtcbiAgICB0b3A6IHNjcm9sbFRvcCAtIHJlbGF0aXZlT2Zmc2V0LnRvcCArIHJlbGF0aXZlT2Zmc2V0Lm1hcmdpblRvcCxcbiAgICBsZWZ0OiBzY3JvbGxMZWZ0IC0gcmVsYXRpdmVPZmZzZXQubGVmdCArIHJlbGF0aXZlT2Zmc2V0Lm1hcmdpbkxlZnQsXG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0XG4gIH07XG5cbiAgcmV0dXJuIGdldENsaWVudFJlY3Qob2Zmc2V0KTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gZWxlbWVudCBpcyBmaXhlZCBvciBpcyBpbnNpZGUgYSBmaXhlZCBwYXJlbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBjdXN0b21Db250YWluZXJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBhbnN3ZXIgdG8gXCJpc0ZpeGVkP1wiXG4gKi9cbmZ1bmN0aW9uIGlzRml4ZWQoZWxlbWVudCkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCwgJ3Bvc2l0aW9uJykgPT09ICdmaXhlZCcpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgcGFyZW50Tm9kZSA9IGdldFBhcmVudE5vZGUoZWxlbWVudCk7XG4gIGlmICghcGFyZW50Tm9kZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gaXNGaXhlZChwYXJlbnROb2RlKTtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgZmlyc3QgcGFyZW50IG9mIGFuIGVsZW1lbnQgdGhhdCBoYXMgYSB0cmFuc2Zvcm1lZCBwcm9wZXJ0eSBkZWZpbmVkXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBmaXJzdCB0cmFuc2Zvcm1lZCBwYXJlbnQgb3IgZG9jdW1lbnRFbGVtZW50XG4gKi9cblxuZnVuY3Rpb24gZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudChlbGVtZW50KSB7XG4gIC8vIFRoaXMgY2hlY2sgaXMgbmVlZGVkIHRvIGF2b2lkIGVycm9ycyBpbiBjYXNlIG9uZSBvZiB0aGUgZWxlbWVudHMgaXNuJ3QgZGVmaW5lZCBmb3IgYW55IHJlYXNvblxuICBpZiAoIWVsZW1lbnQgfHwgIWVsZW1lbnQucGFyZW50RWxlbWVudCB8fCBpc0lFKCkpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG4gIHZhciBlbCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgd2hpbGUgKGVsICYmIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbCwgJ3RyYW5zZm9ybScpID09PSAnbm9uZScpIHtcbiAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIGVsIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbn1cblxuLyoqXG4gKiBDb21wdXRlZCB0aGUgYm91bmRhcmllcyBsaW1pdHMgYW5kIHJldHVybiB0aGVtXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJlZmVyZW5jZVxuICogQHBhcmFtIHtudW1iZXJ9IHBhZGRpbmdcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50IC0gRWxlbWVudCB1c2VkIHRvIGRlZmluZSB0aGUgYm91bmRhcmllc1xuICogQHBhcmFtIHtCb29sZWFufSBmaXhlZFBvc2l0aW9uIC0gSXMgaW4gZml4ZWQgcG9zaXRpb24gbW9kZVxuICogQHJldHVybnMge09iamVjdH0gQ29vcmRpbmF0ZXMgb2YgdGhlIGJvdW5kYXJpZXNcbiAqL1xuZnVuY3Rpb24gZ2V0Qm91bmRhcmllcyhwb3BwZXIsIHJlZmVyZW5jZSwgcGFkZGluZywgYm91bmRhcmllc0VsZW1lbnQpIHtcbiAgdmFyIGZpeGVkUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IGZhbHNlO1xuXG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG5cbiAgdmFyIGJvdW5kYXJpZXMgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuICB2YXIgb2Zmc2V0UGFyZW50ID0gZml4ZWRQb3NpdGlvbiA/IGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQocG9wcGVyKSA6IGZpbmRDb21tb25PZmZzZXRQYXJlbnQocG9wcGVyLCBnZXRSZWZlcmVuY2VOb2RlKHJlZmVyZW5jZSkpO1xuXG4gIC8vIEhhbmRsZSB2aWV3cG9ydCBjYXNlXG4gIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3ZpZXdwb3J0Jykge1xuICAgIGJvdW5kYXJpZXMgPSBnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUob2Zmc2V0UGFyZW50LCBmaXhlZFBvc2l0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBIYW5kbGUgb3RoZXIgY2FzZXMgYmFzZWQgb24gRE9NIGVsZW1lbnQgdXNlZCBhcyBib3VuZGFyaWVzXG4gICAgdmFyIGJvdW5kYXJpZXNOb2RlID0gdm9pZCAwO1xuICAgIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3Njcm9sbFBhcmVudCcpIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUocmVmZXJlbmNlKSk7XG4gICAgICBpZiAoYm91bmRhcmllc05vZGUubm9kZU5hbWUgPT09ICdCT0RZJykge1xuICAgICAgICBib3VuZGFyaWVzTm9kZSA9IHBvcHBlci5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAnd2luZG93Jykge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBwb3BwZXIub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gYm91bmRhcmllc0VsZW1lbnQ7XG4gICAgfVxuXG4gICAgdmFyIG9mZnNldHMgPSBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoYm91bmRhcmllc05vZGUsIG9mZnNldFBhcmVudCwgZml4ZWRQb3NpdGlvbik7XG5cbiAgICAvLyBJbiBjYXNlIG9mIEhUTUwsIHdlIG5lZWQgYSBkaWZmZXJlbnQgY29tcHV0YXRpb25cbiAgICBpZiAoYm91bmRhcmllc05vZGUubm9kZU5hbWUgPT09ICdIVE1MJyAmJiAhaXNGaXhlZChvZmZzZXRQYXJlbnQpKSB7XG4gICAgICB2YXIgX2dldFdpbmRvd1NpemVzID0gZ2V0V2luZG93U2l6ZXMocG9wcGVyLm93bmVyRG9jdW1lbnQpLFxuICAgICAgICAgIGhlaWdodCA9IF9nZXRXaW5kb3dTaXplcy5oZWlnaHQsXG4gICAgICAgICAgd2lkdGggPSBfZ2V0V2luZG93U2l6ZXMud2lkdGg7XG5cbiAgICAgIGJvdW5kYXJpZXMudG9wICs9IG9mZnNldHMudG9wIC0gb2Zmc2V0cy5tYXJnaW5Ub3A7XG4gICAgICBib3VuZGFyaWVzLmJvdHRvbSA9IGhlaWdodCArIG9mZnNldHMudG9wO1xuICAgICAgYm91bmRhcmllcy5sZWZ0ICs9IG9mZnNldHMubGVmdCAtIG9mZnNldHMubWFyZ2luTGVmdDtcbiAgICAgIGJvdW5kYXJpZXMucmlnaHQgPSB3aWR0aCArIG9mZnNldHMubGVmdDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZm9yIGFsbCB0aGUgb3RoZXIgRE9NIGVsZW1lbnRzLCB0aGlzIG9uZSBpcyBnb29kXG4gICAgICBib3VuZGFyaWVzID0gb2Zmc2V0cztcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgcGFkZGluZ3NcbiAgcGFkZGluZyA9IHBhZGRpbmcgfHwgMDtcbiAgdmFyIGlzUGFkZGluZ051bWJlciA9IHR5cGVvZiBwYWRkaW5nID09PSAnbnVtYmVyJztcbiAgYm91bmRhcmllcy5sZWZ0ICs9IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLmxlZnQgfHwgMDtcbiAgYm91bmRhcmllcy50b3AgKz0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcudG9wIHx8IDA7XG4gIGJvdW5kYXJpZXMucmlnaHQgLT0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcucmlnaHQgfHwgMDtcbiAgYm91bmRhcmllcy5ib3R0b20gLT0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcuYm90dG9tIHx8IDA7XG5cbiAgcmV0dXJuIGJvdW5kYXJpZXM7XG59XG5cbmZ1bmN0aW9uIGdldEFyZWEoX3JlZikge1xuICB2YXIgd2lkdGggPSBfcmVmLndpZHRoLFxuICAgICAgaGVpZ2h0ID0gX3JlZi5oZWlnaHQ7XG5cbiAgcmV0dXJuIHdpZHRoICogaGVpZ2h0O1xufVxuXG4vKipcbiAqIFV0aWxpdHkgdXNlZCB0byB0cmFuc2Zvcm0gdGhlIGBhdXRvYCBwbGFjZW1lbnQgdG8gdGhlIHBsYWNlbWVudCB3aXRoIG1vcmVcbiAqIGF2YWlsYWJsZSBzcGFjZS5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVBdXRvUGxhY2VtZW50KHBsYWNlbWVudCwgcmVmUmVjdCwgcG9wcGVyLCByZWZlcmVuY2UsIGJvdW5kYXJpZXNFbGVtZW50KSB7XG4gIHZhciBwYWRkaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgYXJndW1lbnRzWzVdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNV0gOiAwO1xuXG4gIGlmIChwbGFjZW1lbnQuaW5kZXhPZignYXV0bycpID09PSAtMSkge1xuICAgIHJldHVybiBwbGFjZW1lbnQ7XG4gIH1cblxuICB2YXIgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMocG9wcGVyLCByZWZlcmVuY2UsIHBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50KTtcblxuICB2YXIgcmVjdHMgPSB7XG4gICAgdG9wOiB7XG4gICAgICB3aWR0aDogYm91bmRhcmllcy53aWR0aCxcbiAgICAgIGhlaWdodDogcmVmUmVjdC50b3AgLSBib3VuZGFyaWVzLnRvcFxuICAgIH0sXG4gICAgcmlnaHQ6IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLnJpZ2h0IC0gcmVmUmVjdC5yaWdodCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5oZWlnaHRcbiAgICB9LFxuICAgIGJvdHRvbToge1xuICAgICAgd2lkdGg6IGJvdW5kYXJpZXMud2lkdGgsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuYm90dG9tIC0gcmVmUmVjdC5ib3R0b21cbiAgICB9LFxuICAgIGxlZnQ6IHtcbiAgICAgIHdpZHRoOiByZWZSZWN0LmxlZnQgLSBib3VuZGFyaWVzLmxlZnQsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuaGVpZ2h0XG4gICAgfVxuICB9O1xuXG4gIHZhciBzb3J0ZWRBcmVhcyA9IE9iamVjdC5rZXlzKHJlY3RzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICBrZXk6IGtleVxuICAgIH0sIHJlY3RzW2tleV0sIHtcbiAgICAgIGFyZWE6IGdldEFyZWEocmVjdHNba2V5XSlcbiAgICB9KTtcbiAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBiLmFyZWEgLSBhLmFyZWE7XG4gIH0pO1xuXG4gIHZhciBmaWx0ZXJlZEFyZWFzID0gc29ydGVkQXJlYXMuZmlsdGVyKGZ1bmN0aW9uIChfcmVmMikge1xuICAgIHZhciB3aWR0aCA9IF9yZWYyLndpZHRoLFxuICAgICAgICBoZWlnaHQgPSBfcmVmMi5oZWlnaHQ7XG4gICAgcmV0dXJuIHdpZHRoID49IHBvcHBlci5jbGllbnRXaWR0aCAmJiBoZWlnaHQgPj0gcG9wcGVyLmNsaWVudEhlaWdodDtcbiAgfSk7XG5cbiAgdmFyIGNvbXB1dGVkUGxhY2VtZW50ID0gZmlsdGVyZWRBcmVhcy5sZW5ndGggPiAwID8gZmlsdGVyZWRBcmVhc1swXS5rZXkgOiBzb3J0ZWRBcmVhc1swXS5rZXk7XG5cbiAgdmFyIHZhcmlhdGlvbiA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xuXG4gIHJldHVybiBjb21wdXRlZFBsYWNlbWVudCArICh2YXJpYXRpb24gPyAnLScgKyB2YXJpYXRpb24gOiAnJyk7XG59XG5cbi8qKlxuICogR2V0IG9mZnNldHMgdG8gdGhlIHJlZmVyZW5jZSBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhdGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gcG9wcGVyIC0gdGhlIHBvcHBlciBlbGVtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IHJlZmVyZW5jZSAtIHRoZSByZWZlcmVuY2UgZWxlbWVudCAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGZpeGVkUG9zaXRpb24gLSBpcyBpbiBmaXhlZCBwb3NpdGlvbiBtb2RlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgb2Zmc2V0cyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlclxuICovXG5mdW5jdGlvbiBnZXRSZWZlcmVuY2VPZmZzZXRzKHN0YXRlLCBwb3BwZXIsIHJlZmVyZW5jZSkge1xuICB2YXIgZml4ZWRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogbnVsbDtcblxuICB2YXIgY29tbW9uT2Zmc2V0UGFyZW50ID0gZml4ZWRQb3NpdGlvbiA/IGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQocG9wcGVyKSA6IGZpbmRDb21tb25PZmZzZXRQYXJlbnQocG9wcGVyLCBnZXRSZWZlcmVuY2VOb2RlKHJlZmVyZW5jZSkpO1xuICByZXR1cm4gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKHJlZmVyZW5jZSwgY29tbW9uT2Zmc2V0UGFyZW50LCBmaXhlZFBvc2l0aW9uKTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG91dGVyIHNpemVzIG9mIHRoZSBnaXZlbiBlbGVtZW50IChvZmZzZXQgc2l6ZSArIG1hcmdpbnMpXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IG9iamVjdCBjb250YWluaW5nIHdpZHRoIGFuZCBoZWlnaHQgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBnZXRPdXRlclNpemVzKGVsZW1lbnQpIHtcbiAgdmFyIHdpbmRvdyA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcbiAgdmFyIHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICB2YXIgeCA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpblRvcCB8fCAwKSArIHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkJvdHRvbSB8fCAwKTtcbiAgdmFyIHkgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5MZWZ0IHx8IDApICsgcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luUmlnaHQgfHwgMCk7XG4gIHZhciByZXN1bHQgPSB7XG4gICAgd2lkdGg6IGVsZW1lbnQub2Zmc2V0V2lkdGggKyB5LFxuICAgIGhlaWdodDogZWxlbWVudC5vZmZzZXRIZWlnaHQgKyB4XG4gIH07XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2V0IHRoZSBvcHBvc2l0ZSBwbGFjZW1lbnQgb2YgdGhlIGdpdmVuIG9uZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudFxuICogQHJldHVybnMge1N0cmluZ30gZmxpcHBlZCBwbGFjZW1lbnRcbiAqL1xuZnVuY3Rpb24gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHZhciBoYXNoID0geyBsZWZ0OiAncmlnaHQnLCByaWdodDogJ2xlZnQnLCBib3R0b206ICd0b3AnLCB0b3A6ICdib3R0b20nIH07XG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvbGVmdHxyaWdodHxib3R0b218dG9wL2csIGZ1bmN0aW9uIChtYXRjaGVkKSB7XG4gICAgcmV0dXJuIGhhc2hbbWF0Y2hlZF07XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCBvZmZzZXRzIHRvIHRoZSBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBwb3NpdGlvbiAtIENTUyBwb3NpdGlvbiB0aGUgUG9wcGVyIHdpbGwgZ2V0IGFwcGxpZWRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlciAtIHRoZSBwb3BwZXIgZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHMgLSB0aGUgcmVmZXJlbmNlIG9mZnNldHMgKHRoZSBwb3BwZXIgd2lsbCBiZSByZWxhdGl2ZSB0byB0aGlzKVxuICogQHBhcmFtIHtTdHJpbmd9IHBsYWNlbWVudCAtIG9uZSBvZiB0aGUgdmFsaWQgcGxhY2VtZW50IG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IHBvcHBlck9mZnNldHMgLSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgb2Zmc2V0cyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlclxuICovXG5mdW5jdGlvbiBnZXRQb3BwZXJPZmZzZXRzKHBvcHBlciwgcmVmZXJlbmNlT2Zmc2V0cywgcGxhY2VtZW50KSB7XG4gIHBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuXG4gIC8vIEdldCBwb3BwZXIgbm9kZSBzaXplc1xuICB2YXIgcG9wcGVyUmVjdCA9IGdldE91dGVyU2l6ZXMocG9wcGVyKTtcblxuICAvLyBBZGQgcG9zaXRpb24sIHdpZHRoIGFuZCBoZWlnaHQgdG8gb3VyIG9mZnNldHMgb2JqZWN0XG4gIHZhciBwb3BwZXJPZmZzZXRzID0ge1xuICAgIHdpZHRoOiBwb3BwZXJSZWN0LndpZHRoLFxuICAgIGhlaWdodDogcG9wcGVyUmVjdC5oZWlnaHRcbiAgfTtcblxuICAvLyBkZXBlbmRpbmcgYnkgdGhlIHBvcHBlciBwbGFjZW1lbnQgd2UgaGF2ZSB0byBjb21wdXRlIGl0cyBvZmZzZXRzIHNsaWdodGx5IGRpZmZlcmVudGx5XG4gIHZhciBpc0hvcml6ID0gWydyaWdodCcsICdsZWZ0J10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgdmFyIG1haW5TaWRlID0gaXNIb3JpeiA/ICd0b3AnIDogJ2xlZnQnO1xuICB2YXIgc2Vjb25kYXJ5U2lkZSA9IGlzSG9yaXogPyAnbGVmdCcgOiAndG9wJztcbiAgdmFyIG1lYXN1cmVtZW50ID0gaXNIb3JpeiA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgdmFyIHNlY29uZGFyeU1lYXN1cmVtZW50ID0gIWlzSG9yaXogPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgcG9wcGVyT2Zmc2V0c1ttYWluU2lkZV0gPSByZWZlcmVuY2VPZmZzZXRzW21haW5TaWRlXSArIHJlZmVyZW5jZU9mZnNldHNbbWVhc3VyZW1lbnRdIC8gMiAtIHBvcHBlclJlY3RbbWVhc3VyZW1lbnRdIC8gMjtcbiAgaWYgKHBsYWNlbWVudCA9PT0gc2Vjb25kYXJ5U2lkZSkge1xuICAgIHBvcHBlck9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gPSByZWZlcmVuY2VPZmZzZXRzW3NlY29uZGFyeVNpZGVdIC0gcG9wcGVyUmVjdFtzZWNvbmRhcnlNZWFzdXJlbWVudF07XG4gIH0gZWxzZSB7XG4gICAgcG9wcGVyT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbZ2V0T3Bwb3NpdGVQbGFjZW1lbnQoc2Vjb25kYXJ5U2lkZSldO1xuICB9XG5cbiAgcmV0dXJuIHBvcHBlck9mZnNldHM7XG59XG5cbi8qKlxuICogTWltaWNzIHRoZSBgZmluZGAgbWV0aG9kIG9mIEFycmF5XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0FycmF5fSBhcnJcbiAqIEBhcmd1bWVudCBwcm9wXG4gKiBAYXJndW1lbnQgdmFsdWVcbiAqIEByZXR1cm5zIGluZGV4IG9yIC0xXG4gKi9cbmZ1bmN0aW9uIGZpbmQoYXJyLCBjaGVjaykge1xuICAvLyB1c2UgbmF0aXZlIGZpbmQgaWYgc3VwcG9ydGVkXG4gIGlmIChBcnJheS5wcm90b3R5cGUuZmluZCkge1xuICAgIHJldHVybiBhcnIuZmluZChjaGVjayk7XG4gIH1cblxuICAvLyB1c2UgYGZpbHRlcmAgdG8gb2J0YWluIHRoZSBzYW1lIGJlaGF2aW9yIG9mIGBmaW5kYFxuICByZXR1cm4gYXJyLmZpbHRlcihjaGVjaylbMF07XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hpbmcgb2JqZWN0XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0FycmF5fSBhcnJcbiAqIEBhcmd1bWVudCBwcm9wXG4gKiBAYXJndW1lbnQgdmFsdWVcbiAqIEByZXR1cm5zIGluZGV4IG9yIC0xXG4gKi9cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnIsIHByb3AsIHZhbHVlKSB7XG4gIC8vIHVzZSBuYXRpdmUgZmluZEluZGV4IGlmIHN1cHBvcnRlZFxuICBpZiAoQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleCkge1xuICAgIHJldHVybiBhcnIuZmluZEluZGV4KGZ1bmN0aW9uIChjdXIpIHtcbiAgICAgIHJldHVybiBjdXJbcHJvcF0gPT09IHZhbHVlO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gdXNlIGBmaW5kYCArIGBpbmRleE9mYCBpZiBgZmluZEluZGV4YCBpc24ndCBzdXBwb3J0ZWRcbiAgdmFyIG1hdGNoID0gZmluZChhcnIsIGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gb2JqW3Byb3BdID09PSB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiBhcnIuaW5kZXhPZihtYXRjaCk7XG59XG5cbi8qKlxuICogTG9vcCB0cm91Z2ggdGhlIGxpc3Qgb2YgbW9kaWZpZXJzIGFuZCBydW4gdGhlbSBpbiBvcmRlcixcbiAqIGVhY2ggb2YgdGhlbSB3aWxsIHRoZW4gZWRpdCB0aGUgZGF0YSBvYmplY3QuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqIEBwYXJhbSB7QXJyYXl9IG1vZGlmaWVyc1xuICogQHBhcmFtIHtTdHJpbmd9IGVuZHMgLSBPcHRpb25hbCBtb2RpZmllciBuYW1lIHVzZWQgYXMgc3RvcHBlclxuICogQHJldHVybnMge2RhdGFPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIHJ1bk1vZGlmaWVycyhtb2RpZmllcnMsIGRhdGEsIGVuZHMpIHtcbiAgdmFyIG1vZGlmaWVyc1RvUnVuID0gZW5kcyA9PT0gdW5kZWZpbmVkID8gbW9kaWZpZXJzIDogbW9kaWZpZXJzLnNsaWNlKDAsIGZpbmRJbmRleChtb2RpZmllcnMsICduYW1lJywgZW5kcykpO1xuXG4gIG1vZGlmaWVyc1RvUnVuLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgaWYgKG1vZGlmaWVyWydmdW5jdGlvbiddKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuICAgICAgY29uc29sZS53YXJuKCdgbW9kaWZpZXIuZnVuY3Rpb25gIGlzIGRlcHJlY2F0ZWQsIHVzZSBgbW9kaWZpZXIuZm5gIScpO1xuICAgIH1cbiAgICB2YXIgZm4gPSBtb2RpZmllclsnZnVuY3Rpb24nXSB8fCBtb2RpZmllci5mbjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICBpZiAobW9kaWZpZXIuZW5hYmxlZCAmJiBpc0Z1bmN0aW9uKGZuKSkge1xuICAgICAgLy8gQWRkIHByb3BlcnRpZXMgdG8gb2Zmc2V0cyB0byBtYWtlIHRoZW0gYSBjb21wbGV0ZSBjbGllbnRSZWN0IG9iamVjdFxuICAgICAgLy8gd2UgZG8gdGhpcyBiZWZvcmUgZWFjaCBtb2RpZmllciB0byBtYWtlIHN1cmUgdGhlIHByZXZpb3VzIG9uZSBkb2Vzbid0XG4gICAgICAvLyBtZXNzIHdpdGggdGhlc2UgdmFsdWVzXG4gICAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucG9wcGVyKTtcbiAgICAgIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UpO1xuXG4gICAgICBkYXRhID0gZm4oZGF0YSwgbW9kaWZpZXIpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogVXBkYXRlcyB0aGUgcG9zaXRpb24gb2YgdGhlIHBvcHBlciwgY29tcHV0aW5nIHRoZSBuZXcgb2Zmc2V0cyBhbmQgYXBwbHlpbmdcbiAqIHRoZSBuZXcgc3R5bGUuPGJyIC8+XG4gKiBQcmVmZXIgYHNjaGVkdWxlVXBkYXRlYCBvdmVyIGB1cGRhdGVgIGJlY2F1c2Ugb2YgcGVyZm9ybWFuY2UgcmVhc29ucy5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gdXBkYXRlKCkge1xuICAvLyBpZiBwb3BwZXIgaXMgZGVzdHJveWVkLCBkb24ndCBwZXJmb3JtIGFueSBmdXJ0aGVyIHVwZGF0ZVxuICBpZiAodGhpcy5zdGF0ZS5pc0Rlc3Ryb3llZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBkYXRhID0ge1xuICAgIGluc3RhbmNlOiB0aGlzLFxuICAgIHN0eWxlczoge30sXG4gICAgYXJyb3dTdHlsZXM6IHt9LFxuICAgIGF0dHJpYnV0ZXM6IHt9LFxuICAgIGZsaXBwZWQ6IGZhbHNlLFxuICAgIG9mZnNldHM6IHt9XG4gIH07XG5cbiAgLy8gY29tcHV0ZSByZWZlcmVuY2UgZWxlbWVudCBvZmZzZXRzXG4gIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgPSBnZXRSZWZlcmVuY2VPZmZzZXRzKHRoaXMuc3RhdGUsIHRoaXMucG9wcGVyLCB0aGlzLnJlZmVyZW5jZSwgdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQpO1xuXG4gIC8vIGNvbXB1dGUgYXV0byBwbGFjZW1lbnQsIHN0b3JlIHBsYWNlbWVudCBpbnNpZGUgdGhlIGRhdGEgb2JqZWN0LFxuICAvLyBtb2RpZmllcnMgd2lsbCBiZSBhYmxlIHRvIGVkaXQgYHBsYWNlbWVudGAgaWYgbmVlZGVkXG4gIC8vIGFuZCByZWZlciB0byBvcmlnaW5hbFBsYWNlbWVudCB0byBrbm93IHRoZSBvcmlnaW5hbCB2YWx1ZVxuICBkYXRhLnBsYWNlbWVudCA9IGNvbXB1dGVBdXRvUGxhY2VtZW50KHRoaXMub3B0aW9ucy5wbGFjZW1lbnQsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIHRoaXMucG9wcGVyLCB0aGlzLnJlZmVyZW5jZSwgdGhpcy5vcHRpb25zLm1vZGlmaWVycy5mbGlwLmJvdW5kYXJpZXNFbGVtZW50LCB0aGlzLm9wdGlvbnMubW9kaWZpZXJzLmZsaXAucGFkZGluZyk7XG5cbiAgLy8gc3RvcmUgdGhlIGNvbXB1dGVkIHBsYWNlbWVudCBpbnNpZGUgYG9yaWdpbmFsUGxhY2VtZW50YFxuICBkYXRhLm9yaWdpbmFsUGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG5cbiAgZGF0YS5wb3NpdGlvbkZpeGVkID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQ7XG5cbiAgLy8gY29tcHV0ZSB0aGUgcG9wcGVyIG9mZnNldHNcbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldFBvcHBlck9mZnNldHModGhpcy5wb3BwZXIsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIGRhdGEucGxhY2VtZW50KTtcblxuICBkYXRhLm9mZnNldHMucG9wcGVyLnBvc2l0aW9uID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQgPyAnZml4ZWQnIDogJ2Fic29sdXRlJztcblxuICAvLyBydW4gdGhlIG1vZGlmaWVyc1xuICBkYXRhID0gcnVuTW9kaWZpZXJzKHRoaXMubW9kaWZpZXJzLCBkYXRhKTtcblxuICAvLyB0aGUgZmlyc3QgYHVwZGF0ZWAgd2lsbCBjYWxsIGBvbkNyZWF0ZWAgY2FsbGJhY2tcbiAgLy8gdGhlIG90aGVyIG9uZXMgd2lsbCBjYWxsIGBvblVwZGF0ZWAgY2FsbGJhY2tcbiAgaWYgKCF0aGlzLnN0YXRlLmlzQ3JlYXRlZCkge1xuICAgIHRoaXMuc3RhdGUuaXNDcmVhdGVkID0gdHJ1ZTtcbiAgICB0aGlzLm9wdGlvbnMub25DcmVhdGUoZGF0YSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5vcHRpb25zLm9uVXBkYXRlKGRhdGEpO1xuICB9XG59XG5cbi8qKlxuICogSGVscGVyIHVzZWQgdG8ga25vdyBpZiB0aGUgZ2l2ZW4gbW9kaWZpZXIgaXMgZW5hYmxlZC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc01vZGlmaWVyRW5hYmxlZChtb2RpZmllcnMsIG1vZGlmaWVyTmFtZSkge1xuICByZXR1cm4gbW9kaWZpZXJzLnNvbWUoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYubmFtZSxcbiAgICAgICAgZW5hYmxlZCA9IF9yZWYuZW5hYmxlZDtcbiAgICByZXR1cm4gZW5hYmxlZCAmJiBuYW1lID09PSBtb2RpZmllck5hbWU7XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCB0aGUgcHJlZml4ZWQgc3VwcG9ydGVkIHByb3BlcnR5IG5hbWVcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwcm9wZXJ0eSAoY2FtZWxDYXNlKVxuICogQHJldHVybnMge1N0cmluZ30gcHJlZml4ZWQgcHJvcGVydHkgKGNhbWVsQ2FzZSBvciBQYXNjYWxDYXNlLCBkZXBlbmRpbmcgb24gdGhlIHZlbmRvciBwcmVmaXgpXG4gKi9cbmZ1bmN0aW9uIGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZShwcm9wZXJ0eSkge1xuICB2YXIgcHJlZml4ZXMgPSBbZmFsc2UsICdtcycsICdXZWJraXQnLCAnTW96JywgJ08nXTtcbiAgdmFyIHVwcGVyUHJvcCA9IHByb3BlcnR5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcGVydHkuc2xpY2UoMSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwcmVmaXggPSBwcmVmaXhlc1tpXTtcbiAgICB2YXIgdG9DaGVjayA9IHByZWZpeCA/ICcnICsgcHJlZml4ICsgdXBwZXJQcm9wIDogcHJvcGVydHk7XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudC5ib2R5LnN0eWxlW3RvQ2hlY2tdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHRvQ2hlY2s7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIERlc3Ryb3lzIHRoZSBwb3BwZXIuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gIHRoaXMuc3RhdGUuaXNEZXN0cm95ZWQgPSB0cnVlO1xuXG4gIC8vIHRvdWNoIERPTSBvbmx5IGlmIGBhcHBseVN0eWxlYCBtb2RpZmllciBpcyBlbmFibGVkXG4gIGlmIChpc01vZGlmaWVyRW5hYmxlZCh0aGlzLm1vZGlmaWVycywgJ2FwcGx5U3R5bGUnKSkge1xuICAgIHRoaXMucG9wcGVyLnJlbW92ZUF0dHJpYnV0ZSgneC1wbGFjZW1lbnQnKTtcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5wb3NpdGlvbiA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLnRvcCA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLmxlZnQgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5yaWdodCA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLmJvdHRvbSA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLndpbGxDaGFuZ2UgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZVtnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpXSA9ICcnO1xuICB9XG5cbiAgdGhpcy5kaXNhYmxlRXZlbnRMaXN0ZW5lcnMoKTtcblxuICAvLyByZW1vdmUgdGhlIHBvcHBlciBpZiB1c2VyIGV4cGxpY2l0bHkgYXNrZWQgZm9yIHRoZSBkZWxldGlvbiBvbiBkZXN0cm95XG4gIC8vIGRvIG5vdCB1c2UgYHJlbW92ZWAgYmVjYXVzZSBJRTExIGRvZXNuJ3Qgc3VwcG9ydCBpdFxuICBpZiAodGhpcy5vcHRpb25zLnJlbW92ZU9uRGVzdHJveSkge1xuICAgIHRoaXMucG9wcGVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5wb3BwZXIpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG4vKipcbiAqIEdldCB0aGUgd2luZG93IGFzc29jaWF0ZWQgd2l0aCB0aGUgZWxlbWVudFxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7V2luZG93fVxuICovXG5mdW5jdGlvbiBnZXRXaW5kb3coZWxlbWVudCkge1xuICB2YXIgb3duZXJEb2N1bWVudCA9IGVsZW1lbnQub3duZXJEb2N1bWVudDtcbiAgcmV0dXJuIG93bmVyRG9jdW1lbnQgPyBvd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IDogd2luZG93O1xufVxuXG5mdW5jdGlvbiBhdHRhY2hUb1Njcm9sbFBhcmVudHMoc2Nyb2xsUGFyZW50LCBldmVudCwgY2FsbGJhY2ssIHNjcm9sbFBhcmVudHMpIHtcbiAgdmFyIGlzQm9keSA9IHNjcm9sbFBhcmVudC5ub2RlTmFtZSA9PT0gJ0JPRFknO1xuICB2YXIgdGFyZ2V0ID0gaXNCb2R5ID8gc2Nyb2xsUGFyZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgOiBzY3JvbGxQYXJlbnQ7XG4gIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBjYWxsYmFjaywgeyBwYXNzaXZlOiB0cnVlIH0pO1xuXG4gIGlmICghaXNCb2R5KSB7XG4gICAgYXR0YWNoVG9TY3JvbGxQYXJlbnRzKGdldFNjcm9sbFBhcmVudCh0YXJnZXQucGFyZW50Tm9kZSksIGV2ZW50LCBjYWxsYmFjaywgc2Nyb2xsUGFyZW50cyk7XG4gIH1cbiAgc2Nyb2xsUGFyZW50cy5wdXNoKHRhcmdldCk7XG59XG5cbi8qKlxuICogU2V0dXAgbmVlZGVkIGV2ZW50IGxpc3RlbmVycyB1c2VkIHRvIHVwZGF0ZSB0aGUgcG9wcGVyIHBvc2l0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzZXR1cEV2ZW50TGlzdGVuZXJzKHJlZmVyZW5jZSwgb3B0aW9ucywgc3RhdGUsIHVwZGF0ZUJvdW5kKSB7XG4gIC8vIFJlc2l6ZSBldmVudCBsaXN0ZW5lciBvbiB3aW5kb3dcbiAgc3RhdGUudXBkYXRlQm91bmQgPSB1cGRhdGVCb3VuZDtcbiAgZ2V0V2luZG93KHJlZmVyZW5jZSkuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3RhdGUudXBkYXRlQm91bmQsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcblxuICAvLyBTY3JvbGwgZXZlbnQgbGlzdGVuZXIgb24gc2Nyb2xsIHBhcmVudHNcbiAgdmFyIHNjcm9sbEVsZW1lbnQgPSBnZXRTY3JvbGxQYXJlbnQocmVmZXJlbmNlKTtcbiAgYXR0YWNoVG9TY3JvbGxQYXJlbnRzKHNjcm9sbEVsZW1lbnQsICdzY3JvbGwnLCBzdGF0ZS51cGRhdGVCb3VuZCwgc3RhdGUuc2Nyb2xsUGFyZW50cyk7XG4gIHN0YXRlLnNjcm9sbEVsZW1lbnQgPSBzY3JvbGxFbGVtZW50O1xuICBzdGF0ZS5ldmVudHNFbmFibGVkID0gdHJ1ZTtcblxuICByZXR1cm4gc3RhdGU7XG59XG5cbi8qKlxuICogSXQgd2lsbCBhZGQgcmVzaXplL3Njcm9sbCBldmVudHMgYW5kIHN0YXJ0IHJlY2FsY3VsYXRpbmdcbiAqIHBvc2l0aW9uIG9mIHRoZSBwb3BwZXIgZWxlbWVudCB3aGVuIHRoZXkgYXJlIHRyaWdnZXJlZC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gIGlmICghdGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkKSB7XG4gICAgdGhpcy5zdGF0ZSA9IHNldHVwRXZlbnRMaXN0ZW5lcnModGhpcy5yZWZlcmVuY2UsIHRoaXMub3B0aW9ucywgdGhpcy5zdGF0ZSwgdGhpcy5zY2hlZHVsZVVwZGF0ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmUgZXZlbnQgbGlzdGVuZXJzIHVzZWQgdG8gdXBkYXRlIHRoZSBwb3BwZXIgcG9zaXRpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXJzKHJlZmVyZW5jZSwgc3RhdGUpIHtcbiAgLy8gUmVtb3ZlIHJlc2l6ZSBldmVudCBsaXN0ZW5lciBvbiB3aW5kb3dcbiAgZ2V0V2luZG93KHJlZmVyZW5jZSkucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3RhdGUudXBkYXRlQm91bmQpO1xuXG4gIC8vIFJlbW92ZSBzY3JvbGwgZXZlbnQgbGlzdGVuZXIgb24gc2Nyb2xsIHBhcmVudHNcbiAgc3RhdGUuc2Nyb2xsUGFyZW50cy5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgc3RhdGUudXBkYXRlQm91bmQpO1xuICB9KTtcblxuICAvLyBSZXNldCBzdGF0ZVxuICBzdGF0ZS51cGRhdGVCb3VuZCA9IG51bGw7XG4gIHN0YXRlLnNjcm9sbFBhcmVudHMgPSBbXTtcbiAgc3RhdGUuc2Nyb2xsRWxlbWVudCA9IG51bGw7XG4gIHN0YXRlLmV2ZW50c0VuYWJsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIHN0YXRlO1xufVxuXG4vKipcbiAqIEl0IHdpbGwgcmVtb3ZlIHJlc2l6ZS9zY3JvbGwgZXZlbnRzIGFuZCB3b24ndCByZWNhbGN1bGF0ZSBwb3BwZXIgcG9zaXRpb25cbiAqIHdoZW4gdGhleSBhcmUgdHJpZ2dlcmVkLiBJdCBhbHNvIHdvbid0IHRyaWdnZXIgYG9uVXBkYXRlYCBjYWxsYmFjayBhbnltb3JlLFxuICogdW5sZXNzIHlvdSBjYWxsIGB1cGRhdGVgIG1ldGhvZCBtYW51YWxseS5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCkge1xuICBpZiAodGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkKSB7XG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5zY2hlZHVsZVVwZGF0ZSk7XG4gICAgdGhpcy5zdGF0ZSA9IHJlbW92ZUV2ZW50TGlzdGVuZXJzKHRoaXMucmVmZXJlbmNlLCB0aGlzLnN0YXRlKTtcbiAgfVxufVxuXG4vKipcbiAqIFRlbGxzIGlmIGEgZ2l2ZW4gaW5wdXQgaXMgYSBudW1iZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7Kn0gaW5wdXQgdG8gY2hlY2tcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzTnVtZXJpYyhuKSB7XG4gIHJldHVybiBuICE9PSAnJyAmJiAhaXNOYU4ocGFyc2VGbG9hdChuKSkgJiYgaXNGaW5pdGUobik7XG59XG5cbi8qKlxuICogU2V0IHRoZSBzdHlsZSB0byB0aGUgZ2l2ZW4gcG9wcGVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQgLSBFbGVtZW50IHRvIGFwcGx5IHRoZSBzdHlsZSB0b1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHN0eWxlc1xuICogT2JqZWN0IHdpdGggYSBsaXN0IG9mIHByb3BlcnRpZXMgYW5kIHZhbHVlcyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gc2V0U3R5bGVzKGVsZW1lbnQsIHN0eWxlcykge1xuICBPYmplY3Qua2V5cyhzdHlsZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICB2YXIgdW5pdCA9ICcnO1xuICAgIC8vIGFkZCB1bml0IGlmIHRoZSB2YWx1ZSBpcyBudW1lcmljIGFuZCBpcyBvbmUgb2YgdGhlIGZvbGxvd2luZ1xuICAgIGlmIChbJ3dpZHRoJywgJ2hlaWdodCcsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXS5pbmRleE9mKHByb3ApICE9PSAtMSAmJiBpc051bWVyaWMoc3R5bGVzW3Byb3BdKSkge1xuICAgICAgdW5pdCA9ICdweCc7XG4gICAgfVxuICAgIGVsZW1lbnQuc3R5bGVbcHJvcF0gPSBzdHlsZXNbcHJvcF0gKyB1bml0O1xuICB9KTtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIGF0dHJpYnV0ZXMgdG8gdGhlIGdpdmVuIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50IC0gRWxlbWVudCB0byBhcHBseSB0aGUgYXR0cmlidXRlcyB0b1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHN0eWxlc1xuICogT2JqZWN0IHdpdGggYSBsaXN0IG9mIHByb3BlcnRpZXMgYW5kIHZhbHVlcyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlcyhlbGVtZW50LCBhdHRyaWJ1dGVzKSB7XG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICB2YXIgdmFsdWUgPSBhdHRyaWJ1dGVzW3Byb3BdO1xuICAgIGlmICh2YWx1ZSAhPT0gZmFsc2UpIHtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKHByb3AsIGF0dHJpYnV0ZXNbcHJvcF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShwcm9wKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEuc3R5bGVzIC0gTGlzdCBvZiBzdHlsZSBwcm9wZXJ0aWVzIC0gdmFsdWVzIHRvIGFwcGx5IHRvIHBvcHBlciBlbGVtZW50XG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YS5hdHRyaWJ1dGVzIC0gTGlzdCBvZiBhdHRyaWJ1dGUgcHJvcGVydGllcyAtIHZhbHVlcyB0byBhcHBseSB0byBwb3BwZXIgZWxlbWVudFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIHNhbWUgZGF0YSBvYmplY3RcbiAqL1xuZnVuY3Rpb24gYXBwbHlTdHlsZShkYXRhKSB7XG4gIC8vIGFueSBwcm9wZXJ0eSBwcmVzZW50IGluIGBkYXRhLnN0eWxlc2Agd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIsXG4gIC8vIGluIHRoaXMgd2F5IHdlIGNhbiBtYWtlIHRoZSAzcmQgcGFydHkgbW9kaWZpZXJzIGFkZCBjdXN0b20gc3R5bGVzIHRvIGl0XG4gIC8vIEJlIGF3YXJlLCBtb2RpZmllcnMgY291bGQgb3ZlcnJpZGUgdGhlIHByb3BlcnRpZXMgZGVmaW5lZCBpbiB0aGUgcHJldmlvdXNcbiAgLy8gbGluZXMgb2YgdGhpcyBtb2RpZmllciFcbiAgc2V0U3R5bGVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLnN0eWxlcyk7XG5cbiAgLy8gYW55IHByb3BlcnR5IHByZXNlbnQgaW4gYGRhdGEuYXR0cmlidXRlc2Agd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIsXG4gIC8vIHRoZXkgd2lsbCBiZSBzZXQgYXMgSFRNTCBhdHRyaWJ1dGVzIG9mIHRoZSBlbGVtZW50XG4gIHNldEF0dHJpYnV0ZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuYXR0cmlidXRlcyk7XG5cbiAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIGRlZmluZWQgYW5kIGFycm93U3R5bGVzIGhhcyBzb21lIHByb3BlcnRpZXNcbiAgaWYgKGRhdGEuYXJyb3dFbGVtZW50ICYmIE9iamVjdC5rZXlzKGRhdGEuYXJyb3dTdHlsZXMpLmxlbmd0aCkge1xuICAgIHNldFN0eWxlcyhkYXRhLmFycm93RWxlbWVudCwgZGF0YS5hcnJvd1N0eWxlcyk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIHgtcGxhY2VtZW50IGF0dHJpYnV0ZSBiZWZvcmUgZXZlcnl0aGluZyBlbHNlIGJlY2F1c2UgaXQgY291bGQgYmUgdXNlZFxuICogdG8gYWRkIG1hcmdpbnMgdG8gdGhlIHBvcHBlciBtYXJnaW5zIG5lZWRzIHRvIGJlIGNhbGN1bGF0ZWQgdG8gZ2V0IHRoZVxuICogY29ycmVjdCBwb3BwZXIgb2Zmc2V0cy5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIubW9kaWZpZXJzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByZWZlcmVuY2UgLSBUaGUgcmVmZXJlbmNlIGVsZW1lbnQgdXNlZCB0byBwb3NpdGlvbiB0aGUgcG9wcGVyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXIgLSBUaGUgSFRNTCBlbGVtZW50IHVzZWQgYXMgcG9wcGVyXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFBvcHBlci5qcyBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIGFwcGx5U3R5bGVPbkxvYWQocmVmZXJlbmNlLCBwb3BwZXIsIG9wdGlvbnMsIG1vZGlmaWVyT3B0aW9ucywgc3RhdGUpIHtcbiAgLy8gY29tcHV0ZSByZWZlcmVuY2UgZWxlbWVudCBvZmZzZXRzXG4gIHZhciByZWZlcmVuY2VPZmZzZXRzID0gZ2V0UmVmZXJlbmNlT2Zmc2V0cyhzdGF0ZSwgcG9wcGVyLCByZWZlcmVuY2UsIG9wdGlvbnMucG9zaXRpb25GaXhlZCk7XG5cbiAgLy8gY29tcHV0ZSBhdXRvIHBsYWNlbWVudCwgc3RvcmUgcGxhY2VtZW50IGluc2lkZSB0aGUgZGF0YSBvYmplY3QsXG4gIC8vIG1vZGlmaWVycyB3aWxsIGJlIGFibGUgdG8gZWRpdCBgcGxhY2VtZW50YCBpZiBuZWVkZWRcbiAgLy8gYW5kIHJlZmVyIHRvIG9yaWdpbmFsUGxhY2VtZW50IHRvIGtub3cgdGhlIG9yaWdpbmFsIHZhbHVlXG4gIHZhciBwbGFjZW1lbnQgPSBjb21wdXRlQXV0b1BsYWNlbWVudChvcHRpb25zLnBsYWNlbWVudCwgcmVmZXJlbmNlT2Zmc2V0cywgcG9wcGVyLCByZWZlcmVuY2UsIG9wdGlvbnMubW9kaWZpZXJzLmZsaXAuYm91bmRhcmllc0VsZW1lbnQsIG9wdGlvbnMubW9kaWZpZXJzLmZsaXAucGFkZGluZyk7XG5cbiAgcG9wcGVyLnNldEF0dHJpYnV0ZSgneC1wbGFjZW1lbnQnLCBwbGFjZW1lbnQpO1xuXG4gIC8vIEFwcGx5IGBwb3NpdGlvbmAgdG8gcG9wcGVyIGJlZm9yZSBhbnl0aGluZyBlbHNlIGJlY2F1c2VcbiAgLy8gd2l0aG91dCB0aGUgcG9zaXRpb24gYXBwbGllZCB3ZSBjYW4ndCBndWFyYW50ZWUgY29ycmVjdCBjb21wdXRhdGlvbnNcbiAgc2V0U3R5bGVzKHBvcHBlciwgeyBwb3NpdGlvbjogb3B0aW9ucy5wb3NpdGlvbkZpeGVkID8gJ2ZpeGVkJyA6ICdhYnNvbHV0ZScgfSk7XG5cbiAgcmV0dXJuIG9wdGlvbnM7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge0Jvb2xlYW59IHNob3VsZFJvdW5kIC0gSWYgdGhlIG9mZnNldHMgc2hvdWxkIGJlIHJvdW5kZWQgYXQgYWxsXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcG9wcGVyJ3MgcG9zaXRpb24gb2Zmc2V0cyByb3VuZGVkXG4gKlxuICogVGhlIHRhbGUgb2YgcGl4ZWwtcGVyZmVjdCBwb3NpdGlvbmluZy4gSXQncyBzdGlsbCBub3QgMTAwJSBwZXJmZWN0LCBidXQgYXNcbiAqIGdvb2QgYXMgaXQgY2FuIGJlIHdpdGhpbiByZWFzb24uXG4gKiBEaXNjdXNzaW9uIGhlcmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9GZXpWcmFzdGEvcG9wcGVyLmpzL3B1bGwvNzE1XG4gKlxuICogTG93IERQSSBzY3JlZW5zIGNhdXNlIGEgcG9wcGVyIHRvIGJlIGJsdXJyeSBpZiBub3QgdXNpbmcgZnVsbCBwaXhlbHMgKFNhZmFyaVxuICogYXMgd2VsbCBvbiBIaWdoIERQSSBzY3JlZW5zKS5cbiAqXG4gKiBGaXJlZm94IHByZWZlcnMgbm8gcm91bmRpbmcgZm9yIHBvc2l0aW9uaW5nIGFuZCBkb2VzIG5vdCBoYXZlIGJsdXJyaW5lc3Mgb25cbiAqIGhpZ2ggRFBJIHNjcmVlbnMuXG4gKlxuICogT25seSBob3Jpem9udGFsIHBsYWNlbWVudCBhbmQgbGVmdC9yaWdodCB2YWx1ZXMgbmVlZCB0byBiZSBjb25zaWRlcmVkLlxuICovXG5mdW5jdGlvbiBnZXRSb3VuZGVkT2Zmc2V0cyhkYXRhLCBzaG91bGRSb3VuZCkge1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG4gIHZhciByb3VuZCA9IE1hdGgucm91bmQsXG4gICAgICBmbG9vciA9IE1hdGguZmxvb3I7XG5cbiAgdmFyIG5vUm91bmQgPSBmdW5jdGlvbiBub1JvdW5kKHYpIHtcbiAgICByZXR1cm4gdjtcbiAgfTtcblxuICB2YXIgcmVmZXJlbmNlV2lkdGggPSByb3VuZChyZWZlcmVuY2Uud2lkdGgpO1xuICB2YXIgcG9wcGVyV2lkdGggPSByb3VuZChwb3BwZXIud2lkdGgpO1xuXG4gIHZhciBpc1ZlcnRpY2FsID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihkYXRhLnBsYWNlbWVudCkgIT09IC0xO1xuICB2YXIgaXNWYXJpYXRpb24gPSBkYXRhLnBsYWNlbWVudC5pbmRleE9mKCctJykgIT09IC0xO1xuICB2YXIgc2FtZVdpZHRoUGFyaXR5ID0gcmVmZXJlbmNlV2lkdGggJSAyID09PSBwb3BwZXJXaWR0aCAlIDI7XG4gIHZhciBib3RoT2RkV2lkdGggPSByZWZlcmVuY2VXaWR0aCAlIDIgPT09IDEgJiYgcG9wcGVyV2lkdGggJSAyID09PSAxO1xuXG4gIHZhciBob3Jpem9udGFsVG9JbnRlZ2VyID0gIXNob3VsZFJvdW5kID8gbm9Sb3VuZCA6IGlzVmVydGljYWwgfHwgaXNWYXJpYXRpb24gfHwgc2FtZVdpZHRoUGFyaXR5ID8gcm91bmQgOiBmbG9vcjtcbiAgdmFyIHZlcnRpY2FsVG9JbnRlZ2VyID0gIXNob3VsZFJvdW5kID8gbm9Sb3VuZCA6IHJvdW5kO1xuXG4gIHJldHVybiB7XG4gICAgbGVmdDogaG9yaXpvbnRhbFRvSW50ZWdlcihib3RoT2RkV2lkdGggJiYgIWlzVmFyaWF0aW9uICYmIHNob3VsZFJvdW5kID8gcG9wcGVyLmxlZnQgLSAxIDogcG9wcGVyLmxlZnQpLFxuICAgIHRvcDogdmVydGljYWxUb0ludGVnZXIocG9wcGVyLnRvcCksXG4gICAgYm90dG9tOiB2ZXJ0aWNhbFRvSW50ZWdlcihwb3BwZXIuYm90dG9tKSxcbiAgICByaWdodDogaG9yaXpvbnRhbFRvSW50ZWdlcihwb3BwZXIucmlnaHQpXG4gIH07XG59XG5cbnZhciBpc0ZpcmVmb3ggPSBpc0Jyb3dzZXIgJiYgL0ZpcmVmb3gvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBjb21wdXRlU3R5bGUoZGF0YSwgb3B0aW9ucykge1xuICB2YXIgeCA9IG9wdGlvbnMueCxcbiAgICAgIHkgPSBvcHRpb25zLnk7XG4gIHZhciBwb3BwZXIgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuXG4gIC8vIFJlbW92ZSB0aGlzIGxlZ2FjeSBzdXBwb3J0IGluIFBvcHBlci5qcyB2MlxuXG4gIHZhciBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gPSBmaW5kKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gJ2FwcGx5U3R5bGUnO1xuICB9KS5ncHVBY2NlbGVyYXRpb247XG4gIGlmIChsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnNvbGUud2FybignV0FSTklORzogYGdwdUFjY2VsZXJhdGlvbmAgb3B0aW9uIG1vdmVkIHRvIGBjb21wdXRlU3R5bGVgIG1vZGlmaWVyIGFuZCB3aWxsIG5vdCBiZSBzdXBwb3J0ZWQgaW4gZnV0dXJlIHZlcnNpb25zIG9mIFBvcHBlci5qcyEnKTtcbiAgfVxuICB2YXIgZ3B1QWNjZWxlcmF0aW9uID0gbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uICE9PSB1bmRlZmluZWQgPyBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gOiBvcHRpb25zLmdwdUFjY2VsZXJhdGlvbjtcblxuICB2YXIgb2Zmc2V0UGFyZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGRhdGEuaW5zdGFuY2UucG9wcGVyKTtcbiAgdmFyIG9mZnNldFBhcmVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3Qob2Zmc2V0UGFyZW50KTtcblxuICAvLyBTdHlsZXNcbiAgdmFyIHN0eWxlcyA9IHtcbiAgICBwb3NpdGlvbjogcG9wcGVyLnBvc2l0aW9uXG4gIH07XG5cbiAgdmFyIG9mZnNldHMgPSBnZXRSb3VuZGVkT2Zmc2V0cyhkYXRhLCB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA8IDIgfHwgIWlzRmlyZWZveCk7XG5cbiAgdmFyIHNpZGVBID0geCA9PT0gJ2JvdHRvbScgPyAndG9wJyA6ICdib3R0b20nO1xuICB2YXIgc2lkZUIgPSB5ID09PSAncmlnaHQnID8gJ2xlZnQnIDogJ3JpZ2h0JztcblxuICAvLyBpZiBncHVBY2NlbGVyYXRpb24gaXMgc2V0IHRvIGB0cnVlYCBhbmQgdHJhbnNmb3JtIGlzIHN1cHBvcnRlZCxcbiAgLy8gIHdlIHVzZSBgdHJhbnNsYXRlM2RgIHRvIGFwcGx5IHRoZSBwb3NpdGlvbiB0byB0aGUgcG9wcGVyIHdlXG4gIC8vIGF1dG9tYXRpY2FsbHkgdXNlIHRoZSBzdXBwb3J0ZWQgcHJlZml4ZWQgdmVyc2lvbiBpZiBuZWVkZWRcbiAgdmFyIHByZWZpeGVkUHJvcGVydHkgPSBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpO1xuXG4gIC8vIG5vdywgbGV0J3MgbWFrZSBhIHN0ZXAgYmFjayBhbmQgbG9vayBhdCB0aGlzIGNvZGUgY2xvc2VseSAod3RmPylcbiAgLy8gSWYgdGhlIGNvbnRlbnQgb2YgdGhlIHBvcHBlciBncm93cyBvbmNlIGl0J3MgYmVlbiBwb3NpdGlvbmVkLCBpdFxuICAvLyBtYXkgaGFwcGVuIHRoYXQgdGhlIHBvcHBlciBnZXRzIG1pc3BsYWNlZCBiZWNhdXNlIG9mIHRoZSBuZXcgY29udGVudFxuICAvLyBvdmVyZmxvd2luZyBpdHMgcmVmZXJlbmNlIGVsZW1lbnRcbiAgLy8gVG8gYXZvaWQgdGhpcyBwcm9ibGVtLCB3ZSBwcm92aWRlIHR3byBvcHRpb25zICh4IGFuZCB5KSwgd2hpY2ggYWxsb3dcbiAgLy8gdGhlIGNvbnN1bWVyIHRvIGRlZmluZSB0aGUgb2Zmc2V0IG9yaWdpbi5cbiAgLy8gSWYgd2UgcG9zaXRpb24gYSBwb3BwZXIgb24gdG9wIG9mIGEgcmVmZXJlbmNlIGVsZW1lbnQsIHdlIGNhbiBzZXRcbiAgLy8gYHhgIHRvIGB0b3BgIHRvIG1ha2UgdGhlIHBvcHBlciBncm93IHRvd2FyZHMgaXRzIHRvcCBpbnN0ZWFkIG9mXG4gIC8vIGl0cyBib3R0b20uXG4gIHZhciBsZWZ0ID0gdm9pZCAwLFxuICAgICAgdG9wID0gdm9pZCAwO1xuICBpZiAoc2lkZUEgPT09ICdib3R0b20nKSB7XG4gICAgLy8gd2hlbiBvZmZzZXRQYXJlbnQgaXMgPGh0bWw+IHRoZSBwb3NpdGlvbmluZyBpcyByZWxhdGl2ZSB0byB0aGUgYm90dG9tIG9mIHRoZSBzY3JlZW4gKGV4Y2x1ZGluZyB0aGUgc2Nyb2xsYmFyKVxuICAgIC8vIGFuZCBub3QgdGhlIGJvdHRvbSBvZiB0aGUgaHRtbCBlbGVtZW50XG4gICAgaWYgKG9mZnNldFBhcmVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgICB0b3AgPSAtb2Zmc2V0UGFyZW50LmNsaWVudEhlaWdodCArIG9mZnNldHMuYm90dG9tO1xuICAgIH0gZWxzZSB7XG4gICAgICB0b3AgPSAtb2Zmc2V0UGFyZW50UmVjdC5oZWlnaHQgKyBvZmZzZXRzLmJvdHRvbTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdG9wID0gb2Zmc2V0cy50b3A7XG4gIH1cbiAgaWYgKHNpZGVCID09PSAncmlnaHQnKSB7XG4gICAgaWYgKG9mZnNldFBhcmVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgICBsZWZ0ID0gLW9mZnNldFBhcmVudC5jbGllbnRXaWR0aCArIG9mZnNldHMucmlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlZnQgPSAtb2Zmc2V0UGFyZW50UmVjdC53aWR0aCArIG9mZnNldHMucmlnaHQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxlZnQgPSBvZmZzZXRzLmxlZnQ7XG4gIH1cbiAgaWYgKGdwdUFjY2VsZXJhdGlvbiAmJiBwcmVmaXhlZFByb3BlcnR5KSB7XG4gICAgc3R5bGVzW3ByZWZpeGVkUHJvcGVydHldID0gJ3RyYW5zbGF0ZTNkKCcgKyBsZWZ0ICsgJ3B4LCAnICsgdG9wICsgJ3B4LCAwKSc7XG4gICAgc3R5bGVzW3NpZGVBXSA9IDA7XG4gICAgc3R5bGVzW3NpZGVCXSA9IDA7XG4gICAgc3R5bGVzLndpbGxDaGFuZ2UgPSAndHJhbnNmb3JtJztcbiAgfSBlbHNlIHtcbiAgICAvLyBvdGh3ZXJpc2UsIHdlIHVzZSB0aGUgc3RhbmRhcmQgYHRvcGAsIGBsZWZ0YCwgYGJvdHRvbWAgYW5kIGByaWdodGAgcHJvcGVydGllc1xuICAgIHZhciBpbnZlcnRUb3AgPSBzaWRlQSA9PT0gJ2JvdHRvbScgPyAtMSA6IDE7XG4gICAgdmFyIGludmVydExlZnQgPSBzaWRlQiA9PT0gJ3JpZ2h0JyA/IC0xIDogMTtcbiAgICBzdHlsZXNbc2lkZUFdID0gdG9wICogaW52ZXJ0VG9wO1xuICAgIHN0eWxlc1tzaWRlQl0gPSBsZWZ0ICogaW52ZXJ0TGVmdDtcbiAgICBzdHlsZXMud2lsbENoYW5nZSA9IHNpZGVBICsgJywgJyArIHNpZGVCO1xuICB9XG5cbiAgLy8gQXR0cmlidXRlc1xuICB2YXIgYXR0cmlidXRlcyA9IHtcbiAgICAneC1wbGFjZW1lbnQnOiBkYXRhLnBsYWNlbWVudFxuICB9O1xuXG4gIC8vIFVwZGF0ZSBgZGF0YWAgYXR0cmlidXRlcywgc3R5bGVzIGFuZCBhcnJvd1N0eWxlc1xuICBkYXRhLmF0dHJpYnV0ZXMgPSBfZXh0ZW5kcyh7fSwgYXR0cmlidXRlcywgZGF0YS5hdHRyaWJ1dGVzKTtcbiAgZGF0YS5zdHlsZXMgPSBfZXh0ZW5kcyh7fSwgc3R5bGVzLCBkYXRhLnN0eWxlcyk7XG4gIGRhdGEuYXJyb3dTdHlsZXMgPSBfZXh0ZW5kcyh7fSwgZGF0YS5vZmZzZXRzLmFycm93LCBkYXRhLmFycm93U3R5bGVzKTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdXNlZCB0byBrbm93IGlmIHRoZSBnaXZlbiBtb2RpZmllciBkZXBlbmRzIGZyb20gYW5vdGhlciBvbmUuPGJyIC8+XG4gKiBJdCBjaGVja3MgaWYgdGhlIG5lZWRlZCBtb2RpZmllciBpcyBsaXN0ZWQgYW5kIGVuYWJsZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0FycmF5fSBtb2RpZmllcnMgLSBsaXN0IG9mIG1vZGlmaWVyc1xuICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RpbmdOYW1lIC0gbmFtZSBvZiByZXF1ZXN0aW5nIG1vZGlmaWVyXG4gKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdGVkTmFtZSAtIG5hbWUgb2YgcmVxdWVzdGVkIG1vZGlmaWVyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNNb2RpZmllclJlcXVpcmVkKG1vZGlmaWVycywgcmVxdWVzdGluZ05hbWUsIHJlcXVlc3RlZE5hbWUpIHtcbiAgdmFyIHJlcXVlc3RpbmcgPSBmaW5kKG1vZGlmaWVycywgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYubmFtZTtcbiAgICByZXR1cm4gbmFtZSA9PT0gcmVxdWVzdGluZ05hbWU7XG4gIH0pO1xuXG4gIHZhciBpc1JlcXVpcmVkID0gISFyZXF1ZXN0aW5nICYmIG1vZGlmaWVycy5zb21lKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIHJldHVybiBtb2RpZmllci5uYW1lID09PSByZXF1ZXN0ZWROYW1lICYmIG1vZGlmaWVyLmVuYWJsZWQgJiYgbW9kaWZpZXIub3JkZXIgPCByZXF1ZXN0aW5nLm9yZGVyO1xuICB9KTtcblxuICBpZiAoIWlzUmVxdWlyZWQpIHtcbiAgICB2YXIgX3JlcXVlc3RpbmcgPSAnYCcgKyByZXF1ZXN0aW5nTmFtZSArICdgJztcbiAgICB2YXIgcmVxdWVzdGVkID0gJ2AnICsgcmVxdWVzdGVkTmFtZSArICdgJztcbiAgICBjb25zb2xlLndhcm4ocmVxdWVzdGVkICsgJyBtb2RpZmllciBpcyByZXF1aXJlZCBieSAnICsgX3JlcXVlc3RpbmcgKyAnIG1vZGlmaWVyIGluIG9yZGVyIHRvIHdvcmssIGJlIHN1cmUgdG8gaW5jbHVkZSBpdCBiZWZvcmUgJyArIF9yZXF1ZXN0aW5nICsgJyEnKTtcbiAgfVxuICByZXR1cm4gaXNSZXF1aXJlZDtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGFycm93KGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIF9kYXRhJG9mZnNldHMkYXJyb3c7XG5cbiAgLy8gYXJyb3cgZGVwZW5kcyBvbiBrZWVwVG9nZXRoZXIgaW4gb3JkZXIgdG8gd29ya1xuICBpZiAoIWlzTW9kaWZpZXJSZXF1aXJlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2Fycm93JywgJ2tlZXBUb2dldGhlcicpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICB2YXIgYXJyb3dFbGVtZW50ID0gb3B0aW9ucy5lbGVtZW50O1xuXG4gIC8vIGlmIGFycm93RWxlbWVudCBpcyBhIHN0cmluZywgc3VwcG9zZSBpdCdzIGEgQ1NTIHNlbGVjdG9yXG4gIGlmICh0eXBlb2YgYXJyb3dFbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgIGFycm93RWxlbWVudCA9IGRhdGEuaW5zdGFuY2UucG9wcGVyLnF1ZXJ5U2VsZWN0b3IoYXJyb3dFbGVtZW50KTtcblxuICAgIC8vIGlmIGFycm93RWxlbWVudCBpcyBub3QgZm91bmQsIGRvbid0IHJ1biB0aGUgbW9kaWZpZXJcbiAgICBpZiAoIWFycm93RWxlbWVudCkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGlmIHRoZSBhcnJvd0VsZW1lbnQgaXNuJ3QgYSBxdWVyeSBzZWxlY3RvciB3ZSBtdXN0IGNoZWNrIHRoYXQgdGhlXG4gICAgLy8gcHJvdmlkZWQgRE9NIG5vZGUgaXMgY2hpbGQgb2YgaXRzIHBvcHBlciBub2RlXG4gICAgaWYgKCFkYXRhLmluc3RhbmNlLnBvcHBlci5jb250YWlucyhhcnJvd0VsZW1lbnQpKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1dBUk5JTkc6IGBhcnJvdy5lbGVtZW50YCBtdXN0IGJlIGNoaWxkIG9mIGl0cyBwb3BwZXIgZWxlbWVudCEnKTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgfVxuXG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIGlzVmVydGljYWwgPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuXG4gIHZhciBsZW4gPSBpc1ZlcnRpY2FsID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICB2YXIgc2lkZUNhcGl0YWxpemVkID0gaXNWZXJ0aWNhbCA/ICdUb3AnIDogJ0xlZnQnO1xuICB2YXIgc2lkZSA9IHNpZGVDYXBpdGFsaXplZC50b0xvd2VyQ2FzZSgpO1xuICB2YXIgYWx0U2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgdmFyIG9wU2lkZSA9IGlzVmVydGljYWwgPyAnYm90dG9tJyA6ICdyaWdodCc7XG4gIHZhciBhcnJvd0VsZW1lbnRTaXplID0gZ2V0T3V0ZXJTaXplcyhhcnJvd0VsZW1lbnQpW2xlbl07XG5cbiAgLy9cbiAgLy8gZXh0ZW5kcyBrZWVwVG9nZXRoZXIgYmVoYXZpb3IgbWFraW5nIHN1cmUgdGhlIHBvcHBlciBhbmQgaXRzXG4gIC8vIHJlZmVyZW5jZSBoYXZlIGVub3VnaCBwaXhlbHMgaW4gY29uanVuY3Rpb25cbiAgLy9cblxuICAvLyB0b3AvbGVmdCBzaWRlXG4gIGlmIChyZWZlcmVuY2Vbb3BTaWRlXSAtIGFycm93RWxlbWVudFNpemUgPCBwb3BwZXJbc2lkZV0pIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW3NpZGVdIC09IHBvcHBlcltzaWRlXSAtIChyZWZlcmVuY2Vbb3BTaWRlXSAtIGFycm93RWxlbWVudFNpemUpO1xuICB9XG4gIC8vIGJvdHRvbS9yaWdodCBzaWRlXG4gIGlmIChyZWZlcmVuY2Vbc2lkZV0gKyBhcnJvd0VsZW1lbnRTaXplID4gcG9wcGVyW29wU2lkZV0pIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW3NpZGVdICs9IHJlZmVyZW5jZVtzaWRlXSArIGFycm93RWxlbWVudFNpemUgLSBwb3BwZXJbb3BTaWRlXTtcbiAgfVxuICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucG9wcGVyKTtcblxuICAvLyBjb21wdXRlIGNlbnRlciBvZiB0aGUgcG9wcGVyXG4gIHZhciBjZW50ZXIgPSByZWZlcmVuY2Vbc2lkZV0gKyByZWZlcmVuY2VbbGVuXSAvIDIgLSBhcnJvd0VsZW1lbnRTaXplIC8gMjtcblxuICAvLyBDb21wdXRlIHRoZSBzaWRlVmFsdWUgdXNpbmcgdGhlIHVwZGF0ZWQgcG9wcGVyIG9mZnNldHNcbiAgLy8gdGFrZSBwb3BwZXIgbWFyZ2luIGluIGFjY291bnQgYmVjYXVzZSB3ZSBkb24ndCBoYXZlIHRoaXMgaW5mbyBhdmFpbGFibGVcbiAgdmFyIGNzcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShkYXRhLmluc3RhbmNlLnBvcHBlcik7XG4gIHZhciBwb3BwZXJNYXJnaW5TaWRlID0gcGFyc2VGbG9hdChjc3NbJ21hcmdpbicgKyBzaWRlQ2FwaXRhbGl6ZWRdLCAxMCk7XG4gIHZhciBwb3BwZXJCb3JkZXJTaWRlID0gcGFyc2VGbG9hdChjc3NbJ2JvcmRlcicgKyBzaWRlQ2FwaXRhbGl6ZWQgKyAnV2lkdGgnXSwgMTApO1xuICB2YXIgc2lkZVZhbHVlID0gY2VudGVyIC0gZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSAtIHBvcHBlck1hcmdpblNpZGUgLSBwb3BwZXJCb3JkZXJTaWRlO1xuXG4gIC8vIHByZXZlbnQgYXJyb3dFbGVtZW50IGZyb20gYmVpbmcgcGxhY2VkIG5vdCBjb250aWd1b3VzbHkgdG8gaXRzIHBvcHBlclxuICBzaWRlVmFsdWUgPSBNYXRoLm1heChNYXRoLm1pbihwb3BwZXJbbGVuXSAtIGFycm93RWxlbWVudFNpemUsIHNpZGVWYWx1ZSksIDApO1xuXG4gIGRhdGEuYXJyb3dFbGVtZW50ID0gYXJyb3dFbGVtZW50O1xuICBkYXRhLm9mZnNldHMuYXJyb3cgPSAoX2RhdGEkb2Zmc2V0cyRhcnJvdyA9IHt9LCBkZWZpbmVQcm9wZXJ0eShfZGF0YSRvZmZzZXRzJGFycm93LCBzaWRlLCBNYXRoLnJvdW5kKHNpZGVWYWx1ZSkpLCBkZWZpbmVQcm9wZXJ0eShfZGF0YSRvZmZzZXRzJGFycm93LCBhbHRTaWRlLCAnJyksIF9kYXRhJG9mZnNldHMkYXJyb3cpO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEdldCB0aGUgb3Bwb3NpdGUgcGxhY2VtZW50IHZhcmlhdGlvbiBvZiB0aGUgZ2l2ZW4gb25lXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50IHZhcmlhdGlvblxuICogQHJldHVybnMge1N0cmluZ30gZmxpcHBlZCBwbGFjZW1lbnQgdmFyaWF0aW9uXG4gKi9cbmZ1bmN0aW9uIGdldE9wcG9zaXRlVmFyaWF0aW9uKHZhcmlhdGlvbikge1xuICBpZiAodmFyaWF0aW9uID09PSAnZW5kJykge1xuICAgIHJldHVybiAnc3RhcnQnO1xuICB9IGVsc2UgaWYgKHZhcmlhdGlvbiA9PT0gJ3N0YXJ0Jykge1xuICAgIHJldHVybiAnZW5kJztcbiAgfVxuICByZXR1cm4gdmFyaWF0aW9uO1xufVxuXG4vKipcbiAqIExpc3Qgb2YgYWNjZXB0ZWQgcGxhY2VtZW50cyB0byB1c2UgYXMgdmFsdWVzIG9mIHRoZSBgcGxhY2VtZW50YCBvcHRpb24uPGJyIC8+XG4gKiBWYWxpZCBwbGFjZW1lbnRzIGFyZTpcbiAqIC0gYGF1dG9gXG4gKiAtIGB0b3BgXG4gKiAtIGByaWdodGBcbiAqIC0gYGJvdHRvbWBcbiAqIC0gYGxlZnRgXG4gKlxuICogRWFjaCBwbGFjZW1lbnQgY2FuIGhhdmUgYSB2YXJpYXRpb24gZnJvbSB0aGlzIGxpc3Q6XG4gKiAtIGAtc3RhcnRgXG4gKiAtIGAtZW5kYFxuICpcbiAqIFZhcmlhdGlvbnMgYXJlIGludGVycHJldGVkIGVhc2lseSBpZiB5b3UgdGhpbmsgb2YgdGhlbSBhcyB0aGUgbGVmdCB0byByaWdodFxuICogd3JpdHRlbiBsYW5ndWFnZXMuIEhvcml6b250YWxseSAoYHRvcGAgYW5kIGBib3R0b21gKSwgYHN0YXJ0YCBpcyBsZWZ0IGFuZCBgZW5kYFxuICogaXMgcmlnaHQuPGJyIC8+XG4gKiBWZXJ0aWNhbGx5IChgbGVmdGAgYW5kIGByaWdodGApLCBgc3RhcnRgIGlzIHRvcCBhbmQgYGVuZGAgaXMgYm90dG9tLlxuICpcbiAqIFNvbWUgdmFsaWQgZXhhbXBsZXMgYXJlOlxuICogLSBgdG9wLWVuZGAgKG9uIHRvcCBvZiByZWZlcmVuY2UsIHJpZ2h0IGFsaWduZWQpXG4gKiAtIGByaWdodC1zdGFydGAgKG9uIHJpZ2h0IG9mIHJlZmVyZW5jZSwgdG9wIGFsaWduZWQpXG4gKiAtIGBib3R0b21gIChvbiBib3R0b20sIGNlbnRlcmVkKVxuICogLSBgYXV0by1lbmRgIChvbiB0aGUgc2lkZSB3aXRoIG1vcmUgc3BhY2UgYXZhaWxhYmxlLCBhbGlnbm1lbnQgZGVwZW5kcyBieSBwbGFjZW1lbnQpXG4gKlxuICogQHN0YXRpY1xuICogQHR5cGUge0FycmF5fVxuICogQGVudW0ge1N0cmluZ31cbiAqIEByZWFkb25seVxuICogQG1ldGhvZCBwbGFjZW1lbnRzXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbnZhciBwbGFjZW1lbnRzID0gWydhdXRvLXN0YXJ0JywgJ2F1dG8nLCAnYXV0by1lbmQnLCAndG9wLXN0YXJ0JywgJ3RvcCcsICd0b3AtZW5kJywgJ3JpZ2h0LXN0YXJ0JywgJ3JpZ2h0JywgJ3JpZ2h0LWVuZCcsICdib3R0b20tZW5kJywgJ2JvdHRvbScsICdib3R0b20tc3RhcnQnLCAnbGVmdC1lbmQnLCAnbGVmdCcsICdsZWZ0LXN0YXJ0J107XG5cbi8vIEdldCByaWQgb2YgYGF1dG9gIGBhdXRvLXN0YXJ0YCBhbmQgYGF1dG8tZW5kYFxudmFyIHZhbGlkUGxhY2VtZW50cyA9IHBsYWNlbWVudHMuc2xpY2UoMyk7XG5cbi8qKlxuICogR2l2ZW4gYW4gaW5pdGlhbCBwbGFjZW1lbnQsIHJldHVybnMgYWxsIHRoZSBzdWJzZXF1ZW50IHBsYWNlbWVudHNcbiAqIGNsb2Nrd2lzZSAob3IgY291bnRlci1jbG9ja3dpc2UpLlxuICpcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwbGFjZW1lbnQgLSBBIHZhbGlkIHBsYWNlbWVudCAoaXQgYWNjZXB0cyB2YXJpYXRpb25zKVxuICogQGFyZ3VtZW50IHtCb29sZWFufSBjb3VudGVyIC0gU2V0IHRvIHRydWUgdG8gd2FsayB0aGUgcGxhY2VtZW50cyBjb3VudGVyY2xvY2t3aXNlXG4gKiBAcmV0dXJucyB7QXJyYXl9IHBsYWNlbWVudHMgaW5jbHVkaW5nIHRoZWlyIHZhcmlhdGlvbnNcbiAqL1xuZnVuY3Rpb24gY2xvY2t3aXNlKHBsYWNlbWVudCkge1xuICB2YXIgY291bnRlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgdmFyIGluZGV4ID0gdmFsaWRQbGFjZW1lbnRzLmluZGV4T2YocGxhY2VtZW50KTtcbiAgdmFyIGFyciA9IHZhbGlkUGxhY2VtZW50cy5zbGljZShpbmRleCArIDEpLmNvbmNhdCh2YWxpZFBsYWNlbWVudHMuc2xpY2UoMCwgaW5kZXgpKTtcbiAgcmV0dXJuIGNvdW50ZXIgPyBhcnIucmV2ZXJzZSgpIDogYXJyO1xufVxuXG52YXIgQkVIQVZJT1JTID0ge1xuICBGTElQOiAnZmxpcCcsXG4gIENMT0NLV0lTRTogJ2Nsb2Nrd2lzZScsXG4gIENPVU5URVJDTE9DS1dJU0U6ICdjb3VudGVyY2xvY2t3aXNlJ1xufTtcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGZsaXAoZGF0YSwgb3B0aW9ucykge1xuICAvLyBpZiBgaW5uZXJgIG1vZGlmaWVyIGlzIGVuYWJsZWQsIHdlIGNhbid0IHVzZSB0aGUgYGZsaXBgIG1vZGlmaWVyXG4gIGlmIChpc01vZGlmaWVyRW5hYmxlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2lubmVyJykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGlmIChkYXRhLmZsaXBwZWQgJiYgZGF0YS5wbGFjZW1lbnQgPT09IGRhdGEub3JpZ2luYWxQbGFjZW1lbnQpIHtcbiAgICAvLyBzZWVtcyBsaWtlIGZsaXAgaXMgdHJ5aW5nIHRvIGxvb3AsIHByb2JhYmx5IHRoZXJlJ3Mgbm90IGVub3VnaCBzcGFjZSBvbiBhbnkgb2YgdGhlIGZsaXBwYWJsZSBzaWRlc1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSwgb3B0aW9ucy5wYWRkaW5nLCBvcHRpb25zLmJvdW5kYXJpZXNFbGVtZW50LCBkYXRhLnBvc2l0aW9uRml4ZWQpO1xuXG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgcGxhY2VtZW50T3Bwb3NpdGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICB2YXIgdmFyaWF0aW9uID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVsxXSB8fCAnJztcblxuICB2YXIgZmxpcE9yZGVyID0gW107XG5cbiAgc3dpdGNoIChvcHRpb25zLmJlaGF2aW9yKSB7XG4gICAgY2FzZSBCRUhBVklPUlMuRkxJUDpcbiAgICAgIGZsaXBPcmRlciA9IFtwbGFjZW1lbnQsIHBsYWNlbWVudE9wcG9zaXRlXTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQkVIQVZJT1JTLkNMT0NLV0lTRTpcbiAgICAgIGZsaXBPcmRlciA9IGNsb2Nrd2lzZShwbGFjZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBCRUhBVklPUlMuQ09VTlRFUkNMT0NLV0lTRTpcbiAgICAgIGZsaXBPcmRlciA9IGNsb2Nrd2lzZShwbGFjZW1lbnQsIHRydWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGZsaXBPcmRlciA9IG9wdGlvbnMuYmVoYXZpb3I7XG4gIH1cblxuICBmbGlwT3JkZXIuZm9yRWFjaChmdW5jdGlvbiAoc3RlcCwgaW5kZXgpIHtcbiAgICBpZiAocGxhY2VtZW50ICE9PSBzdGVwIHx8IGZsaXBPcmRlci5sZW5ndGggPT09IGluZGV4ICsgMSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgICBwbGFjZW1lbnRPcHBvc2l0ZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG5cbiAgICB2YXIgcG9wcGVyT2Zmc2V0cyA9IGRhdGEub2Zmc2V0cy5wb3BwZXI7XG4gICAgdmFyIHJlZk9mZnNldHMgPSBkYXRhLm9mZnNldHMucmVmZXJlbmNlO1xuXG4gICAgLy8gdXNpbmcgZmxvb3IgYmVjYXVzZSB0aGUgcmVmZXJlbmNlIG9mZnNldHMgbWF5IGNvbnRhaW4gZGVjaW1hbHMgd2UgYXJlIG5vdCBnb2luZyB0byBjb25zaWRlciBoZXJlXG4gICAgdmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbiAgICB2YXIgb3ZlcmxhcHNSZWYgPSBwbGFjZW1lbnQgPT09ICdsZWZ0JyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLnJpZ2h0KSA+IGZsb29yKHJlZk9mZnNldHMubGVmdCkgfHwgcGxhY2VtZW50ID09PSAncmlnaHQnICYmIGZsb29yKHBvcHBlck9mZnNldHMubGVmdCkgPCBmbG9vcihyZWZPZmZzZXRzLnJpZ2h0KSB8fCBwbGFjZW1lbnQgPT09ICd0b3AnICYmIGZsb29yKHBvcHBlck9mZnNldHMuYm90dG9tKSA+IGZsb29yKHJlZk9mZnNldHMudG9wKSB8fCBwbGFjZW1lbnQgPT09ICdib3R0b20nICYmIGZsb29yKHBvcHBlck9mZnNldHMudG9wKSA8IGZsb29yKHJlZk9mZnNldHMuYm90dG9tKTtcblxuICAgIHZhciBvdmVyZmxvd3NMZWZ0ID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5sZWZ0KSA8IGZsb29yKGJvdW5kYXJpZXMubGVmdCk7XG4gICAgdmFyIG92ZXJmbG93c1JpZ2h0ID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5yaWdodCkgPiBmbG9vcihib3VuZGFyaWVzLnJpZ2h0KTtcbiAgICB2YXIgb3ZlcmZsb3dzVG9wID0gZmxvb3IocG9wcGVyT2Zmc2V0cy50b3ApIDwgZmxvb3IoYm91bmRhcmllcy50b3ApO1xuICAgIHZhciBvdmVyZmxvd3NCb3R0b20gPSBmbG9vcihwb3BwZXJPZmZzZXRzLmJvdHRvbSkgPiBmbG9vcihib3VuZGFyaWVzLmJvdHRvbSk7XG5cbiAgICB2YXIgb3ZlcmZsb3dzQm91bmRhcmllcyA9IHBsYWNlbWVudCA9PT0gJ2xlZnQnICYmIG92ZXJmbG93c0xlZnQgfHwgcGxhY2VtZW50ID09PSAncmlnaHQnICYmIG92ZXJmbG93c1JpZ2h0IHx8IHBsYWNlbWVudCA9PT0gJ3RvcCcgJiYgb3ZlcmZsb3dzVG9wIHx8IHBsYWNlbWVudCA9PT0gJ2JvdHRvbScgJiYgb3ZlcmZsb3dzQm90dG9tO1xuXG4gICAgLy8gZmxpcCB0aGUgdmFyaWF0aW9uIGlmIHJlcXVpcmVkXG4gICAgdmFyIGlzVmVydGljYWwgPSBbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuXG4gICAgLy8gZmxpcHMgdmFyaWF0aW9uIGlmIHJlZmVyZW5jZSBlbGVtZW50IG92ZXJmbG93cyBib3VuZGFyaWVzXG4gICAgdmFyIGZsaXBwZWRWYXJpYXRpb25CeVJlZiA9ICEhb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyAmJiAoaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdzdGFydCcgJiYgb3ZlcmZsb3dzTGVmdCB8fCBpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ2VuZCcgJiYgb3ZlcmZsb3dzUmlnaHQgfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c1RvcCB8fCAhaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c0JvdHRvbSk7XG5cbiAgICAvLyBmbGlwcyB2YXJpYXRpb24gaWYgcG9wcGVyIGNvbnRlbnQgb3ZlcmZsb3dzIGJvdW5kYXJpZXNcbiAgICB2YXIgZmxpcHBlZFZhcmlhdGlvbkJ5Q29udGVudCA9ICEhb3B0aW9ucy5mbGlwVmFyaWF0aW9uc0J5Q29udGVudCAmJiAoaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdzdGFydCcgJiYgb3ZlcmZsb3dzUmlnaHQgfHwgaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c0xlZnQgfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c0JvdHRvbSB8fCAhaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c1RvcCk7XG5cbiAgICB2YXIgZmxpcHBlZFZhcmlhdGlvbiA9IGZsaXBwZWRWYXJpYXRpb25CeVJlZiB8fCBmbGlwcGVkVmFyaWF0aW9uQnlDb250ZW50O1xuXG4gICAgaWYgKG92ZXJsYXBzUmVmIHx8IG92ZXJmbG93c0JvdW5kYXJpZXMgfHwgZmxpcHBlZFZhcmlhdGlvbikge1xuICAgICAgLy8gdGhpcyBib29sZWFuIHRvIGRldGVjdCBhbnkgZmxpcCBsb29wXG4gICAgICBkYXRhLmZsaXBwZWQgPSB0cnVlO1xuXG4gICAgICBpZiAob3ZlcmxhcHNSZWYgfHwgb3ZlcmZsb3dzQm91bmRhcmllcykge1xuICAgICAgICBwbGFjZW1lbnQgPSBmbGlwT3JkZXJbaW5kZXggKyAxXTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZsaXBwZWRWYXJpYXRpb24pIHtcbiAgICAgICAgdmFyaWF0aW9uID0gZ2V0T3Bwb3NpdGVWYXJpYXRpb24odmFyaWF0aW9uKTtcbiAgICAgIH1cblxuICAgICAgZGF0YS5wbGFjZW1lbnQgPSBwbGFjZW1lbnQgKyAodmFyaWF0aW9uID8gJy0nICsgdmFyaWF0aW9uIDogJycpO1xuXG4gICAgICAvLyB0aGlzIG9iamVjdCBjb250YWlucyBgcG9zaXRpb25gLCB3ZSB3YW50IHRvIHByZXNlcnZlIGl0IGFsb25nIHdpdGhcbiAgICAgIC8vIGFueSBhZGRpdGlvbmFsIHByb3BlcnR5IHdlIG1heSBhZGQgaW4gdGhlIGZ1dHVyZVxuICAgICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IF9leHRlbmRzKHt9LCBkYXRhLm9mZnNldHMucG9wcGVyLCBnZXRQb3BwZXJPZmZzZXRzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLm9mZnNldHMucmVmZXJlbmNlLCBkYXRhLnBsYWNlbWVudCkpO1xuXG4gICAgICBkYXRhID0gcnVuTW9kaWZpZXJzKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBkYXRhLCAnZmxpcCcpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24ga2VlcFRvZ2V0aGVyKGRhdGEpIHtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuICB2YXIgaXNWZXJ0aWNhbCA9IFsndG9wJywgJ2JvdHRvbSddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG4gIHZhciBzaWRlID0gaXNWZXJ0aWNhbCA/ICdyaWdodCcgOiAnYm90dG9tJztcbiAgdmFyIG9wU2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgdmFyIG1lYXN1cmVtZW50ID0gaXNWZXJ0aWNhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcblxuICBpZiAocG9wcGVyW3NpZGVdIDwgZmxvb3IocmVmZXJlbmNlW29wU2lkZV0pKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltvcFNpZGVdID0gZmxvb3IocmVmZXJlbmNlW29wU2lkZV0pIC0gcG9wcGVyW21lYXN1cmVtZW50XTtcbiAgfVxuICBpZiAocG9wcGVyW29wU2lkZV0gPiBmbG9vcihyZWZlcmVuY2Vbc2lkZV0pKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltvcFNpZGVdID0gZmxvb3IocmVmZXJlbmNlW3NpZGVdKTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgc3RyaW5nIGNvbnRhaW5pbmcgdmFsdWUgKyB1bml0IGludG8gYSBweCB2YWx1ZSBudW1iZXJcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIHttb2RpZmllcnN+b2Zmc2V0fVxuICogQHByaXZhdGVcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBzdHIgLSBWYWx1ZSArIHVuaXQgc3RyaW5nXG4gKiBAYXJndW1lbnQge1N0cmluZ30gbWVhc3VyZW1lbnQgLSBgaGVpZ2h0YCBvciBgd2lkdGhgXG4gKiBAYXJndW1lbnQge09iamVjdH0gcG9wcGVyT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHNcbiAqIEByZXR1cm5zIHtOdW1iZXJ8U3RyaW5nfVxuICogVmFsdWUgaW4gcGl4ZWxzLCBvciBvcmlnaW5hbCBzdHJpbmcgaWYgbm8gdmFsdWVzIHdlcmUgZXh0cmFjdGVkXG4gKi9cbmZ1bmN0aW9uIHRvVmFsdWUoc3RyLCBtZWFzdXJlbWVudCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cykge1xuICAvLyBzZXBhcmF0ZSB2YWx1ZSBmcm9tIHVuaXRcbiAgdmFyIHNwbGl0ID0gc3RyLm1hdGNoKC8oKD86XFwtfFxcKyk/XFxkKlxcLj9cXGQqKSguKikvKTtcbiAgdmFyIHZhbHVlID0gK3NwbGl0WzFdO1xuICB2YXIgdW5pdCA9IHNwbGl0WzJdO1xuXG4gIC8vIElmIGl0J3Mgbm90IGEgbnVtYmVyIGl0J3MgYW4gb3BlcmF0b3IsIEkgZ3Vlc3NcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHJldHVybiBzdHI7XG4gIH1cblxuICBpZiAodW5pdC5pbmRleE9mKCclJykgPT09IDApIHtcbiAgICB2YXIgZWxlbWVudCA9IHZvaWQgMDtcbiAgICBzd2l0Y2ggKHVuaXQpIHtcbiAgICAgIGNhc2UgJyVwJzpcbiAgICAgICAgZWxlbWVudCA9IHBvcHBlck9mZnNldHM7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnJSc6XG4gICAgICBjYXNlICclcic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBlbGVtZW50ID0gcmVmZXJlbmNlT2Zmc2V0cztcbiAgICB9XG5cbiAgICB2YXIgcmVjdCA9IGdldENsaWVudFJlY3QoZWxlbWVudCk7XG4gICAgcmV0dXJuIHJlY3RbbWVhc3VyZW1lbnRdIC8gMTAwICogdmFsdWU7XG4gIH0gZWxzZSBpZiAodW5pdCA9PT0gJ3ZoJyB8fCB1bml0ID09PSAndncnKSB7XG4gICAgLy8gaWYgaXMgYSB2aCBvciB2dywgd2UgY2FsY3VsYXRlIHRoZSBzaXplIGJhc2VkIG9uIHRoZSB2aWV3cG9ydFxuICAgIHZhciBzaXplID0gdm9pZCAwO1xuICAgIGlmICh1bml0ID09PSAndmgnKSB7XG4gICAgICBzaXplID0gTWF0aC5tYXgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCwgd2luZG93LmlubmVySGVpZ2h0IHx8IDApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzaXplID0gTWF0aC5tYXgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoLCB3aW5kb3cuaW5uZXJXaWR0aCB8fCAwKTtcbiAgICB9XG4gICAgcmV0dXJuIHNpemUgLyAxMDAgKiB2YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBpZiBpcyBhbiBleHBsaWNpdCBwaXhlbCB1bml0LCB3ZSBnZXQgcmlkIG9mIHRoZSB1bml0IGFuZCBrZWVwIHRoZSB2YWx1ZVxuICAgIC8vIGlmIGlzIGFuIGltcGxpY2l0IHVuaXQsIGl0J3MgcHgsIGFuZCB3ZSByZXR1cm4ganVzdCB0aGUgdmFsdWVcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cblxuLyoqXG4gKiBQYXJzZSBhbiBgb2Zmc2V0YCBzdHJpbmcgdG8gZXh0cmFwb2xhdGUgYHhgIGFuZCBgeWAgbnVtZXJpYyBvZmZzZXRzLlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2Yge21vZGlmaWVyc35vZmZzZXR9XG4gKiBAcHJpdmF0ZVxuICogQGFyZ3VtZW50IHtTdHJpbmd9IG9mZnNldFxuICogQGFyZ3VtZW50IHtPYmplY3R9IHBvcHBlck9mZnNldHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSByZWZlcmVuY2VPZmZzZXRzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gYmFzZVBsYWNlbWVudFxuICogQHJldHVybnMge0FycmF5fSBhIHR3byBjZWxscyBhcnJheSB3aXRoIHggYW5kIHkgb2Zmc2V0cyBpbiBudW1iZXJzXG4gKi9cbmZ1bmN0aW9uIHBhcnNlT2Zmc2V0KG9mZnNldCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cywgYmFzZVBsYWNlbWVudCkge1xuICB2YXIgb2Zmc2V0cyA9IFswLCAwXTtcblxuICAvLyBVc2UgaGVpZ2h0IGlmIHBsYWNlbWVudCBpcyBsZWZ0IG9yIHJpZ2h0IGFuZCBpbmRleCBpcyAwIG90aGVyd2lzZSB1c2Ugd2lkdGhcbiAgLy8gaW4gdGhpcyB3YXkgdGhlIGZpcnN0IG9mZnNldCB3aWxsIHVzZSBhbiBheGlzIGFuZCB0aGUgc2Vjb25kIG9uZVxuICAvLyB3aWxsIHVzZSB0aGUgb3RoZXIgb25lXG4gIHZhciB1c2VIZWlnaHQgPSBbJ3JpZ2h0JywgJ2xlZnQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcblxuICAvLyBTcGxpdCB0aGUgb2Zmc2V0IHN0cmluZyB0byBvYnRhaW4gYSBsaXN0IG9mIHZhbHVlcyBhbmQgb3BlcmFuZHNcbiAgLy8gVGhlIHJlZ2V4IGFkZHJlc3NlcyB2YWx1ZXMgd2l0aCB0aGUgcGx1cyBvciBtaW51cyBzaWduIGluIGZyb250ICgrMTAsIC0yMCwgZXRjKVxuICB2YXIgZnJhZ21lbnRzID0gb2Zmc2V0LnNwbGl0KC8oXFwrfFxcLSkvKS5tYXAoZnVuY3Rpb24gKGZyYWcpIHtcbiAgICByZXR1cm4gZnJhZy50cmltKCk7XG4gIH0pO1xuXG4gIC8vIERldGVjdCBpZiB0aGUgb2Zmc2V0IHN0cmluZyBjb250YWlucyBhIHBhaXIgb2YgdmFsdWVzIG9yIGEgc2luZ2xlIG9uZVxuICAvLyB0aGV5IGNvdWxkIGJlIHNlcGFyYXRlZCBieSBjb21tYSBvciBzcGFjZVxuICB2YXIgZGl2aWRlciA9IGZyYWdtZW50cy5pbmRleE9mKGZpbmQoZnJhZ21lbnRzLCBmdW5jdGlvbiAoZnJhZykge1xuICAgIHJldHVybiBmcmFnLnNlYXJjaCgvLHxcXHMvKSAhPT0gLTE7XG4gIH0pKTtcblxuICBpZiAoZnJhZ21lbnRzW2RpdmlkZXJdICYmIGZyYWdtZW50c1tkaXZpZGVyXS5pbmRleE9mKCcsJykgPT09IC0xKSB7XG4gICAgY29uc29sZS53YXJuKCdPZmZzZXRzIHNlcGFyYXRlZCBieSB3aGl0ZSBzcGFjZShzKSBhcmUgZGVwcmVjYXRlZCwgdXNlIGEgY29tbWEgKCwpIGluc3RlYWQuJyk7XG4gIH1cblxuICAvLyBJZiBkaXZpZGVyIGlzIGZvdW5kLCB3ZSBkaXZpZGUgdGhlIGxpc3Qgb2YgdmFsdWVzIGFuZCBvcGVyYW5kcyB0byBkaXZpZGVcbiAgLy8gdGhlbSBieSBvZnNldCBYIGFuZCBZLlxuICB2YXIgc3BsaXRSZWdleCA9IC9cXHMqLFxccyp8XFxzKy87XG4gIHZhciBvcHMgPSBkaXZpZGVyICE9PSAtMSA/IFtmcmFnbWVudHMuc2xpY2UoMCwgZGl2aWRlcikuY29uY2F0KFtmcmFnbWVudHNbZGl2aWRlcl0uc3BsaXQoc3BsaXRSZWdleClbMF1dKSwgW2ZyYWdtZW50c1tkaXZpZGVyXS5zcGxpdChzcGxpdFJlZ2V4KVsxXV0uY29uY2F0KGZyYWdtZW50cy5zbGljZShkaXZpZGVyICsgMSkpXSA6IFtmcmFnbWVudHNdO1xuXG4gIC8vIENvbnZlcnQgdGhlIHZhbHVlcyB3aXRoIHVuaXRzIHRvIGFic29sdXRlIHBpeGVscyB0byBhbGxvdyBvdXIgY29tcHV0YXRpb25zXG4gIG9wcyA9IG9wcy5tYXAoZnVuY3Rpb24gKG9wLCBpbmRleCkge1xuICAgIC8vIE1vc3Qgb2YgdGhlIHVuaXRzIHJlbHkgb24gdGhlIG9yaWVudGF0aW9uIG9mIHRoZSBwb3BwZXJcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSAoaW5kZXggPT09IDEgPyAhdXNlSGVpZ2h0IDogdXNlSGVpZ2h0KSA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgICB2YXIgbWVyZ2VXaXRoUHJldmlvdXMgPSBmYWxzZTtcbiAgICByZXR1cm4gb3BcbiAgICAvLyBUaGlzIGFnZ3JlZ2F0ZXMgYW55IGArYCBvciBgLWAgc2lnbiB0aGF0IGFyZW4ndCBjb25zaWRlcmVkIG9wZXJhdG9yc1xuICAgIC8vIGUuZy46IDEwICsgKzUgPT4gWzEwLCArLCArNV1cbiAgICAucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICBpZiAoYVthLmxlbmd0aCAtIDFdID09PSAnJyAmJiBbJysnLCAnLSddLmluZGV4T2YoYikgIT09IC0xKSB7XG4gICAgICAgIGFbYS5sZW5ndGggLSAxXSA9IGI7XG4gICAgICAgIG1lcmdlV2l0aFByZXZpb3VzID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9IGVsc2UgaWYgKG1lcmdlV2l0aFByZXZpb3VzKSB7XG4gICAgICAgIGFbYS5sZW5ndGggLSAxXSArPSBiO1xuICAgICAgICBtZXJnZVdpdGhQcmV2aW91cyA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBhLmNvbmNhdChiKTtcbiAgICAgIH1cbiAgICB9LCBbXSlcbiAgICAvLyBIZXJlIHdlIGNvbnZlcnQgdGhlIHN0cmluZyB2YWx1ZXMgaW50byBudW1iZXIgdmFsdWVzIChpbiBweClcbiAgICAubWFwKGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgIHJldHVybiB0b1ZhbHVlKHN0ciwgbWVhc3VyZW1lbnQsIHBvcHBlck9mZnNldHMsIHJlZmVyZW5jZU9mZnNldHMpO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyBMb29wIHRyb3VnaCB0aGUgb2Zmc2V0cyBhcnJheXMgYW5kIGV4ZWN1dGUgdGhlIG9wZXJhdGlvbnNcbiAgb3BzLmZvckVhY2goZnVuY3Rpb24gKG9wLCBpbmRleCkge1xuICAgIG9wLmZvckVhY2goZnVuY3Rpb24gKGZyYWcsIGluZGV4Mikge1xuICAgICAgaWYgKGlzTnVtZXJpYyhmcmFnKSkge1xuICAgICAgICBvZmZzZXRzW2luZGV4XSArPSBmcmFnICogKG9wW2luZGV4MiAtIDFdID09PSAnLScgPyAtMSA6IDEpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIG9mZnNldHM7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQGFyZ3VtZW50IHtOdW1iZXJ8U3RyaW5nfSBvcHRpb25zLm9mZnNldD0wXG4gKiBUaGUgb2Zmc2V0IHZhbHVlIGFzIGRlc2NyaWJlZCBpbiB0aGUgbW9kaWZpZXIgZGVzY3JpcHRpb25cbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gb2Zmc2V0KGRhdGEsIF9yZWYpIHtcbiAgdmFyIG9mZnNldCA9IF9yZWYub2Zmc2V0O1xuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQsXG4gICAgICBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuXG4gIHZhciBvZmZzZXRzID0gdm9pZCAwO1xuICBpZiAoaXNOdW1lcmljKCtvZmZzZXQpKSB7XG4gICAgb2Zmc2V0cyA9IFsrb2Zmc2V0LCAwXTtcbiAgfSBlbHNlIHtcbiAgICBvZmZzZXRzID0gcGFyc2VPZmZzZXQob2Zmc2V0LCBwb3BwZXIsIHJlZmVyZW5jZSwgYmFzZVBsYWNlbWVudCk7XG4gIH1cblxuICBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ2xlZnQnKSB7XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci5sZWZ0IC09IG9mZnNldHNbMV07XG4gIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ3JpZ2h0Jykge1xuICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzFdO1xuICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICd0b3AnKSB7XG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIudG9wIC09IG9mZnNldHNbMV07XG4gIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ2JvdHRvbScpIHtcbiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1sxXTtcbiAgfVxuXG4gIGRhdGEucG9wcGVyID0gcG9wcGVyO1xuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gcHJldmVudE92ZXJmbG93KGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIGJvdW5kYXJpZXNFbGVtZW50ID0gb3B0aW9ucy5ib3VuZGFyaWVzRWxlbWVudCB8fCBnZXRPZmZzZXRQYXJlbnQoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuXG4gIC8vIElmIG9mZnNldFBhcmVudCBpcyB0aGUgcmVmZXJlbmNlIGVsZW1lbnQsIHdlIHJlYWxseSB3YW50IHRvXG4gIC8vIGdvIG9uZSBzdGVwIHVwIGFuZCB1c2UgdGhlIG5leHQgb2Zmc2V0UGFyZW50IGFzIHJlZmVyZW5jZSB0b1xuICAvLyBhdm9pZCB0byBtYWtlIHRoaXMgbW9kaWZpZXIgY29tcGxldGVseSB1c2VsZXNzIGFuZCBsb29rIGxpa2UgYnJva2VuXG4gIGlmIChkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSA9PT0gYm91bmRhcmllc0VsZW1lbnQpIHtcbiAgICBib3VuZGFyaWVzRWxlbWVudCA9IGdldE9mZnNldFBhcmVudChib3VuZGFyaWVzRWxlbWVudCk7XG4gIH1cblxuICAvLyBOT1RFOiBET00gYWNjZXNzIGhlcmVcbiAgLy8gcmVzZXRzIHRoZSBwb3BwZXIncyBwb3NpdGlvbiBzbyB0aGF0IHRoZSBkb2N1bWVudCBzaXplIGNhbiBiZSBjYWxjdWxhdGVkIGV4Y2x1ZGluZ1xuICAvLyB0aGUgc2l6ZSBvZiB0aGUgcG9wcGVyIGVsZW1lbnQgaXRzZWxmXG4gIHZhciB0cmFuc2Zvcm1Qcm9wID0gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKTtcbiAgdmFyIHBvcHBlclN0eWxlcyA9IGRhdGEuaW5zdGFuY2UucG9wcGVyLnN0eWxlOyAvLyBhc3NpZ25tZW50IHRvIGhlbHAgbWluaWZpY2F0aW9uXG4gIHZhciB0b3AgPSBwb3BwZXJTdHlsZXMudG9wLFxuICAgICAgbGVmdCA9IHBvcHBlclN0eWxlcy5sZWZ0LFxuICAgICAgdHJhbnNmb3JtID0gcG9wcGVyU3R5bGVzW3RyYW5zZm9ybVByb3BdO1xuXG4gIHBvcHBlclN0eWxlcy50b3AgPSAnJztcbiAgcG9wcGVyU3R5bGVzLmxlZnQgPSAnJztcbiAgcG9wcGVyU3R5bGVzW3RyYW5zZm9ybVByb3BdID0gJyc7XG5cbiAgdmFyIGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSwgb3B0aW9ucy5wYWRkaW5nLCBib3VuZGFyaWVzRWxlbWVudCwgZGF0YS5wb3NpdGlvbkZpeGVkKTtcblxuICAvLyBOT1RFOiBET00gYWNjZXNzIGhlcmVcbiAgLy8gcmVzdG9yZXMgdGhlIG9yaWdpbmFsIHN0eWxlIHByb3BlcnRpZXMgYWZ0ZXIgdGhlIG9mZnNldHMgaGF2ZSBiZWVuIGNvbXB1dGVkXG4gIHBvcHBlclN0eWxlcy50b3AgPSB0b3A7XG4gIHBvcHBlclN0eWxlcy5sZWZ0ID0gbGVmdDtcbiAgcG9wcGVyU3R5bGVzW3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtO1xuXG4gIG9wdGlvbnMuYm91bmRhcmllcyA9IGJvdW5kYXJpZXM7XG5cbiAgdmFyIG9yZGVyID0gb3B0aW9ucy5wcmlvcml0eTtcbiAgdmFyIHBvcHBlciA9IGRhdGEub2Zmc2V0cy5wb3BwZXI7XG5cbiAgdmFyIGNoZWNrID0ge1xuICAgIHByaW1hcnk6IGZ1bmN0aW9uIHByaW1hcnkocGxhY2VtZW50KSB7XG4gICAgICB2YXIgdmFsdWUgPSBwb3BwZXJbcGxhY2VtZW50XTtcbiAgICAgIGlmIChwb3BwZXJbcGxhY2VtZW50XSA8IGJvdW5kYXJpZXNbcGxhY2VtZW50XSAmJiAhb3B0aW9ucy5lc2NhcGVXaXRoUmVmZXJlbmNlKSB7XG4gICAgICAgIHZhbHVlID0gTWF0aC5tYXgocG9wcGVyW3BsYWNlbWVudF0sIGJvdW5kYXJpZXNbcGxhY2VtZW50XSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoe30sIHBsYWNlbWVudCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2Vjb25kYXJ5OiBmdW5jdGlvbiBzZWNvbmRhcnkocGxhY2VtZW50KSB7XG4gICAgICB2YXIgbWFpblNpZGUgPSBwbGFjZW1lbnQgPT09ICdyaWdodCcgPyAnbGVmdCcgOiAndG9wJztcbiAgICAgIHZhciB2YWx1ZSA9IHBvcHBlclttYWluU2lkZV07XG4gICAgICBpZiAocG9wcGVyW3BsYWNlbWVudF0gPiBib3VuZGFyaWVzW3BsYWNlbWVudF0gJiYgIW9wdGlvbnMuZXNjYXBlV2l0aFJlZmVyZW5jZSkge1xuICAgICAgICB2YWx1ZSA9IE1hdGgubWluKHBvcHBlclttYWluU2lkZV0sIGJvdW5kYXJpZXNbcGxhY2VtZW50XSAtIChwbGFjZW1lbnQgPT09ICdyaWdodCcgPyBwb3BwZXIud2lkdGggOiBwb3BwZXIuaGVpZ2h0KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoe30sIG1haW5TaWRlLCB2YWx1ZSk7XG4gICAgfVxuICB9O1xuXG4gIG9yZGVyLmZvckVhY2goZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgIHZhciBzaWRlID0gWydsZWZ0JywgJ3RvcCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTEgPyAncHJpbWFyeScgOiAnc2Vjb25kYXJ5JztcbiAgICBwb3BwZXIgPSBfZXh0ZW5kcyh7fSwgcG9wcGVyLCBjaGVja1tzaWRlXShwbGFjZW1lbnQpKTtcbiAgfSk7XG5cbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IHBvcHBlcjtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gc2hpZnQoZGF0YSkge1xuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBzaGlmdHZhcmlhdGlvbiA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xuXG4gIC8vIGlmIHNoaWZ0IHNoaWZ0dmFyaWF0aW9uIGlzIHNwZWNpZmllZCwgcnVuIHRoZSBtb2RpZmllclxuICBpZiAoc2hpZnR2YXJpYXRpb24pIHtcbiAgICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2UsXG4gICAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyO1xuXG4gICAgdmFyIGlzVmVydGljYWwgPSBbJ2JvdHRvbScsICd0b3AnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcbiAgICB2YXIgc2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuXG4gICAgdmFyIHNoaWZ0T2Zmc2V0cyA9IHtcbiAgICAgIHN0YXJ0OiBkZWZpbmVQcm9wZXJ0eSh7fSwgc2lkZSwgcmVmZXJlbmNlW3NpZGVdKSxcbiAgICAgIGVuZDogZGVmaW5lUHJvcGVydHkoe30sIHNpZGUsIHJlZmVyZW5jZVtzaWRlXSArIHJlZmVyZW5jZVttZWFzdXJlbWVudF0gLSBwb3BwZXJbbWVhc3VyZW1lbnRdKVxuICAgIH07XG5cbiAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gX2V4dGVuZHMoe30sIHBvcHBlciwgc2hpZnRPZmZzZXRzW3NoaWZ0dmFyaWF0aW9uXSk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGhpZGUoZGF0YSkge1xuICBpZiAoIWlzTW9kaWZpZXJSZXF1aXJlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2hpZGUnLCAncHJldmVudE92ZXJmbG93JykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciByZWZSZWN0ID0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZTtcbiAgdmFyIGJvdW5kID0gZmluZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuIG1vZGlmaWVyLm5hbWUgPT09ICdwcmV2ZW50T3ZlcmZsb3cnO1xuICB9KS5ib3VuZGFyaWVzO1xuXG4gIGlmIChyZWZSZWN0LmJvdHRvbSA8IGJvdW5kLnRvcCB8fCByZWZSZWN0LmxlZnQgPiBib3VuZC5yaWdodCB8fCByZWZSZWN0LnRvcCA+IGJvdW5kLmJvdHRvbSB8fCByZWZSZWN0LnJpZ2h0IDwgYm91bmQubGVmdCkge1xuICAgIC8vIEF2b2lkIHVubmVjZXNzYXJ5IERPTSBhY2Nlc3MgaWYgdmlzaWJpbGl0eSBoYXNuJ3QgY2hhbmdlZFxuICAgIGlmIChkYXRhLmhpZGUgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIGRhdGEuaGlkZSA9IHRydWU7XG4gICAgZGF0YS5hdHRyaWJ1dGVzWyd4LW91dC1vZi1ib3VuZGFyaWVzJ10gPSAnJztcbiAgfSBlbHNlIHtcbiAgICAvLyBBdm9pZCB1bm5lY2Vzc2FyeSBET00gYWNjZXNzIGlmIHZpc2liaWxpdHkgaGFzbid0IGNoYW5nZWRcbiAgICBpZiAoZGF0YS5oaWRlID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgZGF0YS5oaWRlID0gZmFsc2U7XG4gICAgZGF0YS5hdHRyaWJ1dGVzWyd4LW91dC1vZi1ib3VuZGFyaWVzJ10gPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBpbm5lcihkYXRhKSB7XG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBpc0hvcml6ID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgdmFyIHN1YnRyYWN0TGVuZ3RoID0gWyd0b3AnLCAnbGVmdCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPT09IC0xO1xuXG4gIHBvcHBlcltpc0hvcml6ID8gJ2xlZnQnIDogJ3RvcCddID0gcmVmZXJlbmNlW2Jhc2VQbGFjZW1lbnRdIC0gKHN1YnRyYWN0TGVuZ3RoID8gcG9wcGVyW2lzSG9yaXogPyAnd2lkdGgnIDogJ2hlaWdodCddIDogMCk7XG5cbiAgZGF0YS5wbGFjZW1lbnQgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChwb3BwZXIpO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIE1vZGlmaWVyIGZ1bmN0aW9uLCBlYWNoIG1vZGlmaWVyIGNhbiBoYXZlIGEgZnVuY3Rpb24gb2YgdGhpcyB0eXBlIGFzc2lnbmVkXG4gKiB0byBpdHMgYGZuYCBwcm9wZXJ0eS48YnIgLz5cbiAqIFRoZXNlIGZ1bmN0aW9ucyB3aWxsIGJlIGNhbGxlZCBvbiBlYWNoIHVwZGF0ZSwgdGhpcyBtZWFucyB0aGF0IHlvdSBtdXN0XG4gKiBtYWtlIHN1cmUgdGhleSBhcmUgcGVyZm9ybWFudCBlbm91Z2ggdG8gYXZvaWQgcGVyZm9ybWFuY2UgYm90dGxlbmVja3MuXG4gKlxuICogQGZ1bmN0aW9uIE1vZGlmaWVyRm5cbiAqIEBhcmd1bWVudCB7ZGF0YU9iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7ZGF0YU9iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5cbi8qKlxuICogTW9kaWZpZXJzIGFyZSBwbHVnaW5zIHVzZWQgdG8gYWx0ZXIgdGhlIGJlaGF2aW9yIG9mIHlvdXIgcG9wcGVycy48YnIgLz5cbiAqIFBvcHBlci5qcyB1c2VzIGEgc2V0IG9mIDkgbW9kaWZpZXJzIHRvIHByb3ZpZGUgYWxsIHRoZSBiYXNpYyBmdW5jdGlvbmFsaXRpZXNcbiAqIG5lZWRlZCBieSB0aGUgbGlicmFyeS5cbiAqXG4gKiBVc3VhbGx5IHlvdSBkb24ndCB3YW50IHRvIG92ZXJyaWRlIHRoZSBgb3JkZXJgLCBgZm5gIGFuZCBgb25Mb2FkYCBwcm9wcy5cbiAqIEFsbCB0aGUgb3RoZXIgcHJvcGVydGllcyBhcmUgY29uZmlndXJhdGlvbnMgdGhhdCBjb3VsZCBiZSB0d2Vha2VkLlxuICogQG5hbWVzcGFjZSBtb2RpZmllcnNcbiAqL1xudmFyIG1vZGlmaWVycyA9IHtcbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gc2hpZnQgdGhlIHBvcHBlciBvbiB0aGUgc3RhcnQgb3IgZW5kIG9mIGl0cyByZWZlcmVuY2VcbiAgICogZWxlbWVudC48YnIgLz5cbiAgICogSXQgd2lsbCByZWFkIHRoZSB2YXJpYXRpb24gb2YgdGhlIGBwbGFjZW1lbnRgIHByb3BlcnR5LjxiciAvPlxuICAgKiBJdCBjYW4gYmUgb25lIGVpdGhlciBgLWVuZGAgb3IgYC1zdGFydGAuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBzaGlmdDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj0xMDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDEwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IHNoaWZ0XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoZSBgb2Zmc2V0YCBtb2RpZmllciBjYW4gc2hpZnQgeW91ciBwb3BwZXIgb24gYm90aCBpdHMgYXhpcy5cbiAgICpcbiAgICogSXQgYWNjZXB0cyB0aGUgZm9sbG93aW5nIHVuaXRzOlxuICAgKiAtIGBweGAgb3IgdW5pdC1sZXNzLCBpbnRlcnByZXRlZCBhcyBwaXhlbHNcbiAgICogLSBgJWAgb3IgYCVyYCwgcGVyY2VudGFnZSByZWxhdGl2ZSB0byB0aGUgbGVuZ3RoIG9mIHRoZSByZWZlcmVuY2UgZWxlbWVudFxuICAgKiAtIGAlcGAsIHBlcmNlbnRhZ2UgcmVsYXRpdmUgdG8gdGhlIGxlbmd0aCBvZiB0aGUgcG9wcGVyIGVsZW1lbnRcbiAgICogLSBgdndgLCBDU1Mgdmlld3BvcnQgd2lkdGggdW5pdFxuICAgKiAtIGB2aGAsIENTUyB2aWV3cG9ydCBoZWlnaHQgdW5pdFxuICAgKlxuICAgKiBGb3IgbGVuZ3RoIGlzIGludGVuZGVkIHRoZSBtYWluIGF4aXMgcmVsYXRpdmUgdG8gdGhlIHBsYWNlbWVudCBvZiB0aGUgcG9wcGVyLjxiciAvPlxuICAgKiBUaGlzIG1lYW5zIHRoYXQgaWYgdGhlIHBsYWNlbWVudCBpcyBgdG9wYCBvciBgYm90dG9tYCwgdGhlIGxlbmd0aCB3aWxsIGJlIHRoZVxuICAgKiBgd2lkdGhgLiBJbiBjYXNlIG9mIGBsZWZ0YCBvciBgcmlnaHRgLCBpdCB3aWxsIGJlIHRoZSBgaGVpZ2h0YC5cbiAgICpcbiAgICogWW91IGNhbiBwcm92aWRlIGEgc2luZ2xlIHZhbHVlIChhcyBgTnVtYmVyYCBvciBgU3RyaW5nYCksIG9yIGEgcGFpciBvZiB2YWx1ZXNcbiAgICogYXMgYFN0cmluZ2AgZGl2aWRlZCBieSBhIGNvbW1hIG9yIG9uZSAob3IgbW9yZSkgd2hpdGUgc3BhY2VzLjxiciAvPlxuICAgKiBUaGUgbGF0dGVyIGlzIGEgZGVwcmVjYXRlZCBtZXRob2QgYmVjYXVzZSBpdCBsZWFkcyB0byBjb25mdXNpb24gYW5kIHdpbGwgYmVcbiAgICogcmVtb3ZlZCBpbiB2Mi48YnIgLz5cbiAgICogQWRkaXRpb25hbGx5LCBpdCBhY2NlcHRzIGFkZGl0aW9ucyBhbmQgc3VidHJhY3Rpb25zIGJldHdlZW4gZGlmZmVyZW50IHVuaXRzLlxuICAgKiBOb3RlIHRoYXQgbXVsdGlwbGljYXRpb25zIGFuZCBkaXZpc2lvbnMgYXJlbid0IHN1cHBvcnRlZC5cbiAgICpcbiAgICogVmFsaWQgZXhhbXBsZXMgYXJlOlxuICAgKiBgYGBcbiAgICogMTBcbiAgICogJzEwJSdcbiAgICogJzEwLCAxMCdcbiAgICogJzEwJSwgMTAnXG4gICAqICcxMCArIDEwJSdcbiAgICogJzEwIC0gNXZoICsgMyUnXG4gICAqICctMTBweCArIDV2aCwgNXB4IC0gNiUnXG4gICAqIGBgYFxuICAgKiA+ICoqTkIqKjogSWYgeW91IGRlc2lyZSB0byBhcHBseSBvZmZzZXRzIHRvIHlvdXIgcG9wcGVycyBpbiBhIHdheSB0aGF0IG1heSBtYWtlIHRoZW0gb3ZlcmxhcFxuICAgKiA+IHdpdGggdGhlaXIgcmVmZXJlbmNlIGVsZW1lbnQsIHVuZm9ydHVuYXRlbHksIHlvdSB3aWxsIGhhdmUgdG8gZGlzYWJsZSB0aGUgYGZsaXBgIG1vZGlmaWVyLlxuICAgKiA+IFlvdSBjYW4gcmVhZCBtb3JlIG9uIHRoaXMgYXQgdGhpcyBbaXNzdWVdKGh0dHBzOi8vZ2l0aHViLmNvbS9GZXpWcmFzdGEvcG9wcGVyLmpzL2lzc3Vlcy8zNzMpLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgb2Zmc2V0OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTIwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMjAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogb2Zmc2V0LFxuICAgIC8qKiBAcHJvcCB7TnVtYmVyfFN0cmluZ30gb2Zmc2V0PTBcbiAgICAgKiBUaGUgb2Zmc2V0IHZhbHVlIGFzIGRlc2NyaWJlZCBpbiB0aGUgbW9kaWZpZXIgZGVzY3JpcHRpb25cbiAgICAgKi9cbiAgICBvZmZzZXQ6IDBcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBwcmV2ZW50IHRoZSBwb3BwZXIgZnJvbSBiZWluZyBwb3NpdGlvbmVkIG91dHNpZGUgdGhlIGJvdW5kYXJ5LlxuICAgKlxuICAgKiBBIHNjZW5hcmlvIGV4aXN0cyB3aGVyZSB0aGUgcmVmZXJlbmNlIGl0c2VsZiBpcyBub3Qgd2l0aGluIHRoZSBib3VuZGFyaWVzLjxiciAvPlxuICAgKiBXZSBjYW4gc2F5IGl0IGhhcyBcImVzY2FwZWQgdGhlIGJvdW5kYXJpZXNcIiDigJQgb3IganVzdCBcImVzY2FwZWRcIi48YnIgLz5cbiAgICogSW4gdGhpcyBjYXNlIHdlIG5lZWQgdG8gZGVjaWRlIHdoZXRoZXIgdGhlIHBvcHBlciBzaG91bGQgZWl0aGVyOlxuICAgKlxuICAgKiAtIGRldGFjaCBmcm9tIHRoZSByZWZlcmVuY2UgYW5kIHJlbWFpbiBcInRyYXBwZWRcIiBpbiB0aGUgYm91bmRhcmllcywgb3JcbiAgICogLSBpZiBpdCBzaG91bGQgaWdub3JlIHRoZSBib3VuZGFyeSBhbmQgXCJlc2NhcGUgd2l0aCBpdHMgcmVmZXJlbmNlXCJcbiAgICpcbiAgICogV2hlbiBgZXNjYXBlV2l0aFJlZmVyZW5jZWAgaXMgc2V0IHRvYHRydWVgIGFuZCByZWZlcmVuY2UgaXMgY29tcGxldGVseVxuICAgKiBvdXRzaWRlIGl0cyBib3VuZGFyaWVzLCB0aGUgcG9wcGVyIHdpbGwgb3ZlcmZsb3cgKG9yIGNvbXBsZXRlbHkgbGVhdmUpXG4gICAqIHRoZSBib3VuZGFyaWVzIGluIG9yZGVyIHRvIHJlbWFpbiBhdHRhY2hlZCB0byB0aGUgZWRnZSBvZiB0aGUgcmVmZXJlbmNlLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgcHJldmVudE92ZXJmbG93OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTMwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMzAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogcHJldmVudE92ZXJmbG93LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtBcnJheX0gW3ByaW9yaXR5PVsnbGVmdCcsJ3JpZ2h0JywndG9wJywnYm90dG9tJ11dXG4gICAgICogUG9wcGVyIHdpbGwgdHJ5IHRvIHByZXZlbnQgb3ZlcmZsb3cgZm9sbG93aW5nIHRoZXNlIHByaW9yaXRpZXMgYnkgZGVmYXVsdCxcbiAgICAgKiB0aGVuLCBpdCBjb3VsZCBvdmVyZmxvdyBvbiB0aGUgbGVmdCBhbmQgb24gdG9wIG9mIHRoZSBgYm91bmRhcmllc0VsZW1lbnRgXG4gICAgICovXG4gICAgcHJpb3JpdHk6IFsnbGVmdCcsICdyaWdodCcsICd0b3AnLCAnYm90dG9tJ10sXG4gICAgLyoqXG4gICAgICogQHByb3Age251bWJlcn0gcGFkZGluZz01XG4gICAgICogQW1vdW50IG9mIHBpeGVsIHVzZWQgdG8gZGVmaW5lIGEgbWluaW11bSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBib3VuZGFyaWVzXG4gICAgICogYW5kIHRoZSBwb3BwZXIuIFRoaXMgbWFrZXMgc3VyZSB0aGUgcG9wcGVyIGFsd2F5cyBoYXMgYSBsaXR0bGUgcGFkZGluZ1xuICAgICAqIGJldHdlZW4gdGhlIGVkZ2VzIG9mIGl0cyBjb250YWluZXJcbiAgICAgKi9cbiAgICBwYWRkaW5nOiA1LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50PSdzY3JvbGxQYXJlbnQnXG4gICAgICogQm91bmRhcmllcyB1c2VkIGJ5IHRoZSBtb2RpZmllci4gQ2FuIGJlIGBzY3JvbGxQYXJlbnRgLCBgd2luZG93YCxcbiAgICAgKiBgdmlld3BvcnRgIG9yIGFueSBET00gZWxlbWVudC5cbiAgICAgKi9cbiAgICBib3VuZGFyaWVzRWxlbWVudDogJ3Njcm9sbFBhcmVudCdcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBtYWtlIHN1cmUgdGhlIHJlZmVyZW5jZSBhbmQgaXRzIHBvcHBlciBzdGF5IG5lYXIgZWFjaCBvdGhlclxuICAgKiB3aXRob3V0IGxlYXZpbmcgYW55IGdhcCBiZXR3ZWVuIHRoZSB0d28uIEVzcGVjaWFsbHkgdXNlZnVsIHdoZW4gdGhlIGFycm93IGlzXG4gICAqIGVuYWJsZWQgYW5kIHlvdSB3YW50IHRvIGVuc3VyZSB0aGF0IGl0IHBvaW50cyB0byBpdHMgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEl0IGNhcmVzIG9ubHkgYWJvdXQgdGhlIGZpcnN0IGF4aXMuIFlvdSBjYW4gc3RpbGwgaGF2ZSBwb3BwZXJzIHdpdGggbWFyZ2luXG4gICAqIGJldHdlZW4gdGhlIHBvcHBlciBhbmQgaXRzIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAga2VlcFRvZ2V0aGVyOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTQwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNDAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjoga2VlcFRvZ2V0aGVyXG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoaXMgbW9kaWZpZXIgaXMgdXNlZCB0byBtb3ZlIHRoZSBgYXJyb3dFbGVtZW50YCBvZiB0aGUgcG9wcGVyIHRvIG1ha2VcbiAgICogc3VyZSBpdCBpcyBwb3NpdGlvbmVkIGJldHdlZW4gdGhlIHJlZmVyZW5jZSBlbGVtZW50IGFuZCBpdHMgcG9wcGVyIGVsZW1lbnQuXG4gICAqIEl0IHdpbGwgcmVhZCB0aGUgb3V0ZXIgc2l6ZSBvZiB0aGUgYGFycm93RWxlbWVudGAgbm9kZSB0byBkZXRlY3QgaG93IG1hbnlcbiAgICogcGl4ZWxzIG9mIGNvbmp1bmN0aW9uIGFyZSBuZWVkZWQuXG4gICAqXG4gICAqIEl0IGhhcyBubyBlZmZlY3QgaWYgbm8gYGFycm93RWxlbWVudGAgaXMgcHJvdmlkZWQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBhcnJvdzoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj01MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDUwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGFycm93LFxuICAgIC8qKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBlbGVtZW50PSdbeC1hcnJvd10nIC0gU2VsZWN0b3Igb3Igbm9kZSB1c2VkIGFzIGFycm93ICovXG4gICAgZWxlbWVudDogJ1t4LWFycm93XSdcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBmbGlwIHRoZSBwb3BwZXIncyBwbGFjZW1lbnQgd2hlbiBpdCBzdGFydHMgdG8gb3ZlcmxhcCBpdHNcbiAgICogcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqXG4gICAqIFJlcXVpcmVzIHRoZSBgcHJldmVudE92ZXJmbG93YCBtb2RpZmllciBiZWZvcmUgaXQgaW4gb3JkZXIgdG8gd29yay5cbiAgICpcbiAgICogKipOT1RFOioqIHRoaXMgbW9kaWZpZXIgd2lsbCBpbnRlcnJ1cHQgdGhlIGN1cnJlbnQgdXBkYXRlIGN5Y2xlIGFuZCB3aWxsXG4gICAqIHJlc3RhcnQgaXQgaWYgaXQgZGV0ZWN0cyB0aGUgbmVlZCB0byBmbGlwIHRoZSBwbGFjZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBmbGlwOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTYwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNjAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogZmxpcCxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7U3RyaW5nfEFycmF5fSBiZWhhdmlvcj0nZmxpcCdcbiAgICAgKiBUaGUgYmVoYXZpb3IgdXNlZCB0byBjaGFuZ2UgdGhlIHBvcHBlcidzIHBsYWNlbWVudC4gSXQgY2FuIGJlIG9uZSBvZlxuICAgICAqIGBmbGlwYCwgYGNsb2Nrd2lzZWAsIGBjb3VudGVyY2xvY2t3aXNlYCBvciBhbiBhcnJheSB3aXRoIGEgbGlzdCBvZiB2YWxpZFxuICAgICAqIHBsYWNlbWVudHMgKHdpdGggb3B0aW9uYWwgdmFyaWF0aW9ucylcbiAgICAgKi9cbiAgICBiZWhhdmlvcjogJ2ZsaXAnLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtudW1iZXJ9IHBhZGRpbmc9NVxuICAgICAqIFRoZSBwb3BwZXIgd2lsbCBmbGlwIGlmIGl0IGhpdHMgdGhlIGVkZ2VzIG9mIHRoZSBgYm91bmRhcmllc0VsZW1lbnRgXG4gICAgICovXG4gICAgcGFkZGluZzogNSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBib3VuZGFyaWVzRWxlbWVudD0ndmlld3BvcnQnXG4gICAgICogVGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBkZWZpbmUgdGhlIGJvdW5kYXJpZXMgb2YgdGhlIHBvcHBlciBwb3NpdGlvbi5cbiAgICAgKiBUaGUgcG9wcGVyIHdpbGwgbmV2ZXIgYmUgcGxhY2VkIG91dHNpZGUgb2YgdGhlIGRlZmluZWQgYm91bmRhcmllc1xuICAgICAqIChleGNlcHQgaWYgYGtlZXBUb2dldGhlcmAgaXMgZW5hYmxlZClcbiAgICAgKi9cbiAgICBib3VuZGFyaWVzRWxlbWVudDogJ3ZpZXdwb3J0JyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZmxpcFZhcmlhdGlvbnM9ZmFsc2VcbiAgICAgKiBUaGUgcG9wcGVyIHdpbGwgc3dpdGNoIHBsYWNlbWVudCB2YXJpYXRpb24gYmV0d2VlbiBgLXN0YXJ0YCBhbmQgYC1lbmRgIHdoZW5cbiAgICAgKiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgb3ZlcmxhcHMgaXRzIGJvdW5kYXJpZXMuXG4gICAgICpcbiAgICAgKiBUaGUgb3JpZ2luYWwgcGxhY2VtZW50IHNob3VsZCBoYXZlIGEgc2V0IHZhcmlhdGlvbi5cbiAgICAgKi9cbiAgICBmbGlwVmFyaWF0aW9uczogZmFsc2UsXG4gICAgLyoqXG4gICAgICogQHByb3Age0Jvb2xlYW59IGZsaXBWYXJpYXRpb25zQnlDb250ZW50PWZhbHNlXG4gICAgICogVGhlIHBvcHBlciB3aWxsIHN3aXRjaCBwbGFjZW1lbnQgdmFyaWF0aW9uIGJldHdlZW4gYC1zdGFydGAgYW5kIGAtZW5kYCB3aGVuXG4gICAgICogdGhlIHBvcHBlciBlbGVtZW50IG92ZXJsYXBzIGl0cyByZWZlcmVuY2UgYm91bmRhcmllcy5cbiAgICAgKlxuICAgICAqIFRoZSBvcmlnaW5hbCBwbGFjZW1lbnQgc2hvdWxkIGhhdmUgYSBzZXQgdmFyaWF0aW9uLlxuICAgICAqL1xuICAgIGZsaXBWYXJpYXRpb25zQnlDb250ZW50OiBmYWxzZVxuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIG1ha2UgdGhlIHBvcHBlciBmbG93IHRvd2FyZCB0aGUgaW5uZXIgb2YgdGhlIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBCeSBkZWZhdWx0LCB3aGVuIHRoaXMgbW9kaWZpZXIgaXMgZGlzYWJsZWQsIHRoZSBwb3BwZXIgd2lsbCBiZSBwbGFjZWQgb3V0c2lkZVxuICAgKiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBpbm5lcjoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj03MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDcwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9ZmFsc2UgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogaW5uZXJcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBoaWRlIHRoZSBwb3BwZXIgd2hlbiBpdHMgcmVmZXJlbmNlIGVsZW1lbnQgaXMgb3V0c2lkZSBvZiB0aGVcbiAgICogcG9wcGVyIGJvdW5kYXJpZXMuIEl0IHdpbGwgc2V0IGEgYHgtb3V0LW9mLWJvdW5kYXJpZXNgIGF0dHJpYnV0ZSB3aGljaCBjYW5cbiAgICogYmUgdXNlZCB0byBoaWRlIHdpdGggYSBDU1Mgc2VsZWN0b3IgdGhlIHBvcHBlciB3aGVuIGl0cyByZWZlcmVuY2UgaXNcbiAgICogb3V0IG9mIGJvdW5kYXJpZXMuXG4gICAqXG4gICAqIFJlcXVpcmVzIHRoZSBgcHJldmVudE92ZXJmbG93YCBtb2RpZmllciBiZWZvcmUgaXQgaW4gb3JkZXIgdG8gd29yay5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGhpZGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9ODAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA4MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBoaWRlXG4gIH0sXG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIHRoZSBzdHlsZSB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyIGVsZW1lbnQgdG8gZ2V0c1xuICAgKiBwcm9wZXJseSBwb3NpdGlvbmVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgdGhpcyBtb2RpZmllciB3aWxsIG5vdCB0b3VjaCB0aGUgRE9NLCBpdCBqdXN0IHByZXBhcmVzIHRoZSBzdHlsZXNcbiAgICogc28gdGhhdCBgYXBwbHlTdHlsZWAgbW9kaWZpZXIgY2FuIGFwcGx5IGl0LiBUaGlzIHNlcGFyYXRpb24gaXMgdXNlZnVsXG4gICAqIGluIGNhc2UgeW91IG5lZWQgdG8gcmVwbGFjZSBgYXBwbHlTdHlsZWAgd2l0aCBhIGN1c3RvbSBpbXBsZW1lbnRhdGlvbi5cbiAgICpcbiAgICogVGhpcyBtb2RpZmllciBoYXMgYDg1MGAgYXMgYG9yZGVyYCB2YWx1ZSB0byBtYWludGFpbiBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAqIHdpdGggcHJldmlvdXMgdmVyc2lvbnMgb2YgUG9wcGVyLmpzLiBFeHBlY3QgdGhlIG1vZGlmaWVycyBvcmRlcmluZyBtZXRob2RcbiAgICogdG8gY2hhbmdlIGluIGZ1dHVyZSBtYWpvciB2ZXJzaW9ucyBvZiB0aGUgbGlicmFyeS5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGNvbXB1dGVTdHlsZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj04NTAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDg1MCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGNvbXB1dGVTdHlsZSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZ3B1QWNjZWxlcmF0aW9uPXRydWVcbiAgICAgKiBJZiB0cnVlLCBpdCB1c2VzIHRoZSBDU1MgM0QgdHJhbnNmb3JtYXRpb24gdG8gcG9zaXRpb24gdGhlIHBvcHBlci5cbiAgICAgKiBPdGhlcndpc2UsIGl0IHdpbGwgdXNlIHRoZSBgdG9wYCBhbmQgYGxlZnRgIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBncHVBY2NlbGVyYXRpb246IHRydWUsXG4gICAgLyoqXG4gICAgICogQHByb3Age3N0cmluZ30gW3g9J2JvdHRvbSddXG4gICAgICogV2hlcmUgdG8gYW5jaG9yIHRoZSBYIGF4aXMgKGBib3R0b21gIG9yIGB0b3BgKS4gQUtBIFggb2Zmc2V0IG9yaWdpbi5cbiAgICAgKiBDaGFuZ2UgdGhpcyBpZiB5b3VyIHBvcHBlciBzaG91bGQgZ3JvdyBpbiBhIGRpcmVjdGlvbiBkaWZmZXJlbnQgZnJvbSBgYm90dG9tYFxuICAgICAqL1xuICAgIHg6ICdib3R0b20nLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtzdHJpbmd9IFt4PSdsZWZ0J11cbiAgICAgKiBXaGVyZSB0byBhbmNob3IgdGhlIFkgYXhpcyAoYGxlZnRgIG9yIGByaWdodGApLiBBS0EgWSBvZmZzZXQgb3JpZ2luLlxuICAgICAqIENoYW5nZSB0aGlzIGlmIHlvdXIgcG9wcGVyIHNob3VsZCBncm93IGluIGEgZGlyZWN0aW9uIGRpZmZlcmVudCBmcm9tIGByaWdodGBcbiAgICAgKi9cbiAgICB5OiAncmlnaHQnXG4gIH0sXG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgdGhlIGNvbXB1dGVkIHN0eWxlcyB0byB0aGUgcG9wcGVyIGVsZW1lbnQuXG4gICAqXG4gICAqIEFsbCB0aGUgRE9NIG1hbmlwdWxhdGlvbnMgYXJlIGxpbWl0ZWQgdG8gdGhpcyBtb2RpZmllci4gVGhpcyBpcyB1c2VmdWwgaW4gY2FzZVxuICAgKiB5b3Ugd2FudCB0byBpbnRlZ3JhdGUgUG9wcGVyLmpzIGluc2lkZSBhIGZyYW1ld29yayBvciB2aWV3IGxpYnJhcnkgYW5kIHlvdVxuICAgKiB3YW50IHRvIGRlbGVnYXRlIGFsbCB0aGUgRE9NIG1hbmlwdWxhdGlvbnMgdG8gaXQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBpZiB5b3UgZGlzYWJsZSB0aGlzIG1vZGlmaWVyLCB5b3UgbXVzdCBtYWtlIHN1cmUgdGhlIHBvcHBlciBlbGVtZW50XG4gICAqIGhhcyBpdHMgcG9zaXRpb24gc2V0IHRvIGBhYnNvbHV0ZWAgYmVmb3JlIFBvcHBlci5qcyBjYW4gZG8gaXRzIHdvcmshXG4gICAqXG4gICAqIEp1c3QgZGlzYWJsZSB0aGlzIG1vZGlmaWVyIGFuZCBkZWZpbmUgeW91ciBvd24gdG8gYWNoaWV2ZSB0aGUgZGVzaXJlZCBlZmZlY3QuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBhcHBseVN0eWxlOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTkwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogOTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogYXBwbHlTdHlsZSxcbiAgICAvKiogQHByb3Age0Z1bmN0aW9ufSAqL1xuICAgIG9uTG9hZDogYXBwbHlTdHlsZU9uTG9hZCxcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDEuMTAuMCwgdGhlIHByb3BlcnR5IG1vdmVkIHRvIGBjb21wdXRlU3R5bGVgIG1vZGlmaWVyXG4gICAgICogQHByb3Age0Jvb2xlYW59IGdwdUFjY2VsZXJhdGlvbj10cnVlXG4gICAgICogSWYgdHJ1ZSwgaXQgdXNlcyB0aGUgQ1NTIDNEIHRyYW5zZm9ybWF0aW9uIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIuXG4gICAgICogT3RoZXJ3aXNlLCBpdCB3aWxsIHVzZSB0aGUgYHRvcGAgYW5kIGBsZWZ0YCBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgZ3B1QWNjZWxlcmF0aW9uOiB1bmRlZmluZWRcbiAgfVxufTtcblxuLyoqXG4gKiBUaGUgYGRhdGFPYmplY3RgIGlzIGFuIG9iamVjdCBjb250YWluaW5nIGFsbCB0aGUgaW5mb3JtYXRpb24gdXNlZCBieSBQb3BwZXIuanMuXG4gKiBUaGlzIG9iamVjdCBpcyBwYXNzZWQgdG8gbW9kaWZpZXJzIGFuZCB0byB0aGUgYG9uQ3JlYXRlYCBhbmQgYG9uVXBkYXRlYCBjYWxsYmFja3MuXG4gKiBAbmFtZSBkYXRhT2JqZWN0XG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5pbnN0YW5jZSBUaGUgUG9wcGVyLmpzIGluc3RhbmNlXG4gKiBAcHJvcGVydHkge1N0cmluZ30gZGF0YS5wbGFjZW1lbnQgUGxhY2VtZW50IGFwcGxpZWQgdG8gcG9wcGVyXG4gKiBAcHJvcGVydHkge1N0cmluZ30gZGF0YS5vcmlnaW5hbFBsYWNlbWVudCBQbGFjZW1lbnQgb3JpZ2luYWxseSBkZWZpbmVkIG9uIGluaXRcbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gZGF0YS5mbGlwcGVkIFRydWUgaWYgcG9wcGVyIGhhcyBiZWVuIGZsaXBwZWQgYnkgZmxpcCBtb2RpZmllclxuICogQHByb3BlcnR5IHtCb29sZWFufSBkYXRhLmhpZGUgVHJ1ZSBpZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgaXMgb3V0IG9mIGJvdW5kYXJpZXMsIHVzZWZ1bCB0byBrbm93IHdoZW4gdG8gaGlkZSB0aGUgcG9wcGVyXG4gKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSBkYXRhLmFycm93RWxlbWVudCBOb2RlIHVzZWQgYXMgYXJyb3cgYnkgYXJyb3cgbW9kaWZpZXJcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLnN0eWxlcyBBbnkgQ1NTIHByb3BlcnR5IGRlZmluZWQgaGVyZSB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlci4gSXQgZXhwZWN0cyB0aGUgSmF2YVNjcmlwdCBub21lbmNsYXR1cmUgKGVnLiBgbWFyZ2luQm90dG9tYClcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmFycm93U3R5bGVzIEFueSBDU1MgcHJvcGVydHkgZGVmaW5lZCBoZXJlIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyIGFycm93LiBJdCBleHBlY3RzIHRoZSBKYXZhU2NyaXB0IG5vbWVuY2xhdHVyZSAoZWcuIGBtYXJnaW5Cb3R0b21gKVxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuYm91bmRhcmllcyBPZmZzZXRzIG9mIHRoZSBwb3BwZXIgYm91bmRhcmllc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cyBUaGUgbWVhc3VyZW1lbnRzIG9mIHBvcHBlciwgcmVmZXJlbmNlIGFuZCBhcnJvdyBlbGVtZW50c1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5wb3BwZXIgYHRvcGAsIGBsZWZ0YCwgYHdpZHRoYCwgYGhlaWdodGAgdmFsdWVzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSBgdG9wYCwgYGxlZnRgLCBgd2lkdGhgLCBgaGVpZ2h0YCB2YWx1ZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMuYXJyb3ddIGB0b3BgIGFuZCBgbGVmdGAgb2Zmc2V0cywgb25seSBvbmUgb2YgdGhlbSB3aWxsIGJlIGRpZmZlcmVudCBmcm9tIDBcbiAqL1xuXG4vKipcbiAqIERlZmF1bHQgb3B0aW9ucyBwcm92aWRlZCB0byBQb3BwZXIuanMgY29uc3RydWN0b3IuPGJyIC8+XG4gKiBUaGVzZSBjYW4gYmUgb3ZlcnJpZGRlbiB1c2luZyB0aGUgYG9wdGlvbnNgIGFyZ3VtZW50IG9mIFBvcHBlci5qcy48YnIgLz5cbiAqIFRvIG92ZXJyaWRlIGFuIG9wdGlvbiwgc2ltcGx5IHBhc3MgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWVcbiAqIHN0cnVjdHVyZSBvZiB0aGUgYG9wdGlvbnNgIG9iamVjdCwgYXMgdGhlIDNyZCBhcmd1bWVudC4gRm9yIGV4YW1wbGU6XG4gKiBgYGBcbiAqIG5ldyBQb3BwZXIocmVmLCBwb3AsIHtcbiAqICAgbW9kaWZpZXJzOiB7XG4gKiAgICAgcHJldmVudE92ZXJmbG93OiB7IGVuYWJsZWQ6IGZhbHNlIH1cbiAqICAgfVxuICogfSlcbiAqIGBgYFxuICogQHR5cGUge09iamVjdH1cbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xudmFyIERlZmF1bHRzID0ge1xuICAvKipcbiAgICogUG9wcGVyJ3MgcGxhY2VtZW50LlxuICAgKiBAcHJvcCB7UG9wcGVyLnBsYWNlbWVudHN9IHBsYWNlbWVudD0nYm90dG9tJ1xuICAgKi9cbiAgcGxhY2VtZW50OiAnYm90dG9tJyxcblxuICAvKipcbiAgICogU2V0IHRoaXMgdG8gdHJ1ZSBpZiB5b3Ugd2FudCBwb3BwZXIgdG8gcG9zaXRpb24gaXQgc2VsZiBpbiAnZml4ZWQnIG1vZGVcbiAgICogQHByb3Age0Jvb2xlYW59IHBvc2l0aW9uRml4ZWQ9ZmFsc2VcbiAgICovXG4gIHBvc2l0aW9uRml4ZWQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIGV2ZW50cyAocmVzaXplLCBzY3JvbGwpIGFyZSBpbml0aWFsbHkgZW5hYmxlZC5cbiAgICogQHByb3Age0Jvb2xlYW59IGV2ZW50c0VuYWJsZWQ9dHJ1ZVxuICAgKi9cbiAgZXZlbnRzRW5hYmxlZDogdHJ1ZSxcblxuICAvKipcbiAgICogU2V0IHRvIHRydWUgaWYgeW91IHdhbnQgdG8gYXV0b21hdGljYWxseSByZW1vdmUgdGhlIHBvcHBlciB3aGVuXG4gICAqIHlvdSBjYWxsIHRoZSBgZGVzdHJveWAgbWV0aG9kLlxuICAgKiBAcHJvcCB7Qm9vbGVhbn0gcmVtb3ZlT25EZXN0cm95PWZhbHNlXG4gICAqL1xuICByZW1vdmVPbkRlc3Ryb3k6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBjYWxsZWQgd2hlbiB0aGUgcG9wcGVyIGlzIGNyZWF0ZWQuPGJyIC8+XG4gICAqIEJ5IGRlZmF1bHQsIGl0IGlzIHNldCB0byBuby1vcC48YnIgLz5cbiAgICogQWNjZXNzIFBvcHBlci5qcyBpbnN0YW5jZSB3aXRoIGBkYXRhLmluc3RhbmNlYC5cbiAgICogQHByb3Age29uQ3JlYXRlfVxuICAgKi9cbiAgb25DcmVhdGU6IGZ1bmN0aW9uIG9uQ3JlYXRlKCkge30sXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGNhbGxlZCB3aGVuIHRoZSBwb3BwZXIgaXMgdXBkYXRlZC4gVGhpcyBjYWxsYmFjayBpcyBub3QgY2FsbGVkXG4gICAqIG9uIHRoZSBpbml0aWFsaXphdGlvbi9jcmVhdGlvbiBvZiB0aGUgcG9wcGVyLCBidXQgb25seSBvbiBzdWJzZXF1ZW50XG4gICAqIHVwZGF0ZXMuPGJyIC8+XG4gICAqIEJ5IGRlZmF1bHQsIGl0IGlzIHNldCB0byBuby1vcC48YnIgLz5cbiAgICogQWNjZXNzIFBvcHBlci5qcyBpbnN0YW5jZSB3aXRoIGBkYXRhLmluc3RhbmNlYC5cbiAgICogQHByb3Age29uVXBkYXRlfVxuICAgKi9cbiAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKCkge30sXG5cbiAgLyoqXG4gICAqIExpc3Qgb2YgbW9kaWZpZXJzIHVzZWQgdG8gbW9kaWZ5IHRoZSBvZmZzZXRzIGJlZm9yZSB0aGV5IGFyZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIuXG4gICAqIFRoZXkgcHJvdmlkZSBtb3N0IG9mIHRoZSBmdW5jdGlvbmFsaXRpZXMgb2YgUG9wcGVyLmpzLlxuICAgKiBAcHJvcCB7bW9kaWZpZXJzfVxuICAgKi9cbiAgbW9kaWZpZXJzOiBtb2RpZmllcnNcbn07XG5cbi8qKlxuICogQGNhbGxiYWNrIG9uQ3JlYXRlXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqL1xuXG4vKipcbiAqIEBjYWxsYmFjayBvblVwZGF0ZVxuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKi9cblxuLy8gVXRpbHNcbi8vIE1ldGhvZHNcbnZhciBQb3BwZXIgPSBmdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IFBvcHBlci5qcyBpbnN0YW5jZS5cbiAgICogQGNsYXNzIFBvcHBlclxuICAgKiBAcGFyYW0ge0VsZW1lbnR8cmVmZXJlbmNlT2JqZWN0fSByZWZlcmVuY2UgLSBUaGUgcmVmZXJlbmNlIGVsZW1lbnQgdXNlZCB0byBwb3NpdGlvbiB0aGUgcG9wcGVyXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gcG9wcGVyIC0gVGhlIEhUTUwgLyBYTUwgZWxlbWVudCB1c2VkIGFzIHRoZSBwb3BwZXJcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBZb3VyIGN1c3RvbSBvcHRpb25zIHRvIG92ZXJyaWRlIHRoZSBvbmVzIGRlZmluZWQgaW4gW0RlZmF1bHRzXSgjZGVmYXVsdHMpXG4gICAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2UgLSBUaGUgZ2VuZXJhdGVkIFBvcHBlci5qcyBpbnN0YW5jZVxuICAgKi9cbiAgZnVuY3Rpb24gUG9wcGVyKHJlZmVyZW5jZSwgcG9wcGVyKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBQb3BwZXIpO1xuXG4gICAgdGhpcy5zY2hlZHVsZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoX3RoaXMudXBkYXRlKTtcbiAgICB9O1xuXG4gICAgLy8gbWFrZSB1cGRhdGUoKSBkZWJvdW5jZWQsIHNvIHRoYXQgaXQgb25seSBydW5zIGF0IG1vc3Qgb25jZS1wZXItdGlja1xuICAgIHRoaXMudXBkYXRlID0gZGVib3VuY2UodGhpcy51cGRhdGUuYmluZCh0aGlzKSk7XG5cbiAgICAvLyB3aXRoIHt9IHdlIGNyZWF0ZSBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgb3B0aW9ucyBpbnNpZGUgaXRcbiAgICB0aGlzLm9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgUG9wcGVyLkRlZmF1bHRzLCBvcHRpb25zKTtcblxuICAgIC8vIGluaXQgc3RhdGVcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaXNEZXN0cm95ZWQ6IGZhbHNlLFxuICAgICAgaXNDcmVhdGVkOiBmYWxzZSxcbiAgICAgIHNjcm9sbFBhcmVudHM6IFtdXG4gICAgfTtcblxuICAgIC8vIGdldCByZWZlcmVuY2UgYW5kIHBvcHBlciBlbGVtZW50cyAoYWxsb3cgalF1ZXJ5IHdyYXBwZXJzKVxuICAgIHRoaXMucmVmZXJlbmNlID0gcmVmZXJlbmNlICYmIHJlZmVyZW5jZS5qcXVlcnkgPyByZWZlcmVuY2VbMF0gOiByZWZlcmVuY2U7XG4gICAgdGhpcy5wb3BwZXIgPSBwb3BwZXIgJiYgcG9wcGVyLmpxdWVyeSA/IHBvcHBlclswXSA6IHBvcHBlcjtcblxuICAgIC8vIERlZXAgbWVyZ2UgbW9kaWZpZXJzIG9wdGlvbnNcbiAgICB0aGlzLm9wdGlvbnMubW9kaWZpZXJzID0ge307XG4gICAgT2JqZWN0LmtleXMoX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cy5tb2RpZmllcnMsIG9wdGlvbnMubW9kaWZpZXJzKSkuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgX3RoaXMub3B0aW9ucy5tb2RpZmllcnNbbmFtZV0gPSBfZXh0ZW5kcyh7fSwgUG9wcGVyLkRlZmF1bHRzLm1vZGlmaWVyc1tuYW1lXSB8fCB7fSwgb3B0aW9ucy5tb2RpZmllcnMgPyBvcHRpb25zLm1vZGlmaWVyc1tuYW1lXSA6IHt9KTtcbiAgICB9KTtcblxuICAgIC8vIFJlZmFjdG9yaW5nIG1vZGlmaWVycycgbGlzdCAoT2JqZWN0ID0+IEFycmF5KVxuICAgIHRoaXMubW9kaWZpZXJzID0gT2JqZWN0LmtleXModGhpcy5vcHRpb25zLm1vZGlmaWVycykubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgICBuYW1lOiBuYW1lXG4gICAgICB9LCBfdGhpcy5vcHRpb25zLm1vZGlmaWVyc1tuYW1lXSk7XG4gICAgfSlcbiAgICAvLyBzb3J0IHRoZSBtb2RpZmllcnMgYnkgb3JkZXJcbiAgICAuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGEub3JkZXIgLSBiLm9yZGVyO1xuICAgIH0pO1xuXG4gICAgLy8gbW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgY29kZSB3aGVuIFBvcHBlci5qcyBnZXQgaW5pdGVkXG4gICAgLy8gc3VjaCBjb2RlIGlzIGV4ZWN1dGVkIGluIHRoZSBzYW1lIG9yZGVyIG9mIGl0cyBtb2RpZmllclxuICAgIC8vIHRoZXkgY291bGQgYWRkIG5ldyBwcm9wZXJ0aWVzIHRvIHRoZWlyIG9wdGlvbnMgY29uZmlndXJhdGlvblxuICAgIC8vIEJFIEFXQVJFOiBkb24ndCBhZGQgb3B0aW9ucyB0byBgb3B0aW9ucy5tb2RpZmllcnMubmFtZWAgYnV0IHRvIGBtb2RpZmllck9wdGlvbnNgIVxuICAgIHRoaXMubW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyT3B0aW9ucykge1xuICAgICAgaWYgKG1vZGlmaWVyT3B0aW9ucy5lbmFibGVkICYmIGlzRnVuY3Rpb24obW9kaWZpZXJPcHRpb25zLm9uTG9hZCkpIHtcbiAgICAgICAgbW9kaWZpZXJPcHRpb25zLm9uTG9hZChfdGhpcy5yZWZlcmVuY2UsIF90aGlzLnBvcHBlciwgX3RoaXMub3B0aW9ucywgbW9kaWZpZXJPcHRpb25zLCBfdGhpcy5zdGF0ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBmaXJlIHRoZSBmaXJzdCB1cGRhdGUgdG8gcG9zaXRpb24gdGhlIHBvcHBlciBpbiB0aGUgcmlnaHQgcGxhY2VcbiAgICB0aGlzLnVwZGF0ZSgpO1xuXG4gICAgdmFyIGV2ZW50c0VuYWJsZWQgPSB0aGlzLm9wdGlvbnMuZXZlbnRzRW5hYmxlZDtcbiAgICBpZiAoZXZlbnRzRW5hYmxlZCkge1xuICAgICAgLy8gc2V0dXAgZXZlbnQgbGlzdGVuZXJzLCB0aGV5IHdpbGwgdGFrZSBjYXJlIG9mIHVwZGF0ZSB0aGUgcG9zaXRpb24gaW4gc3BlY2lmaWMgc2l0dWF0aW9uc1xuICAgICAgdGhpcy5lbmFibGVFdmVudExpc3RlbmVycygpO1xuICAgIH1cblxuICAgIHRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCA9IGV2ZW50c0VuYWJsZWQ7XG4gIH1cblxuICAvLyBXZSBjYW4ndCB1c2UgY2xhc3MgcHJvcGVydGllcyBiZWNhdXNlIHRoZXkgZG9uJ3QgZ2V0IGxpc3RlZCBpbiB0aGVcbiAgLy8gY2xhc3MgcHJvdG90eXBlIGFuZCBicmVhayBzdHVmZiBsaWtlIFNpbm9uIHN0dWJzXG5cblxuICBjcmVhdGVDbGFzcyhQb3BwZXIsIFt7XG4gICAga2V5OiAndXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlJCQxKCkge1xuICAgICAgcmV0dXJuIHVwZGF0ZS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95JCQxKCkge1xuICAgICAgcmV0dXJuIGRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdlbmFibGVFdmVudExpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZUV2ZW50TGlzdGVuZXJzJCQxKCkge1xuICAgICAgcmV0dXJuIGVuYWJsZUV2ZW50TGlzdGVuZXJzLmNhbGwodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGlzYWJsZUV2ZW50TGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzYWJsZUV2ZW50TGlzdGVuZXJzJCQxKCkge1xuICAgICAgcmV0dXJuIGRpc2FibGVFdmVudExpc3RlbmVycy5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNjaGVkdWxlcyBhbiB1cGRhdGUuIEl0IHdpbGwgcnVuIG9uIHRoZSBuZXh0IFVJIHVwZGF0ZSBhdmFpbGFibGUuXG4gICAgICogQG1ldGhvZCBzY2hlZHVsZVVwZGF0ZVxuICAgICAqIEBtZW1iZXJvZiBQb3BwZXJcbiAgICAgKi9cblxuXG4gICAgLyoqXG4gICAgICogQ29sbGVjdGlvbiBvZiB1dGlsaXRpZXMgdXNlZnVsIHdoZW4gd3JpdGluZyBjdXN0b20gbW9kaWZpZXJzLlxuICAgICAqIFN0YXJ0aW5nIGZyb20gdmVyc2lvbiAxLjcsIHRoaXMgbWV0aG9kIGlzIGF2YWlsYWJsZSBvbmx5IGlmIHlvdVxuICAgICAqIGluY2x1ZGUgYHBvcHBlci11dGlscy5qc2AgYmVmb3JlIGBwb3BwZXIuanNgLlxuICAgICAqXG4gICAgICogKipERVBSRUNBVElPTioqOiBUaGlzIHdheSB0byBhY2Nlc3MgUG9wcGVyVXRpbHMgaXMgZGVwcmVjYXRlZFxuICAgICAqIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdjIhIFVzZSB0aGUgUG9wcGVyVXRpbHMgbW9kdWxlIGRpcmVjdGx5IGluc3RlYWQuXG4gICAgICogRHVlIHRvIHRoZSBoaWdoIGluc3RhYmlsaXR5IG9mIHRoZSBtZXRob2RzIGNvbnRhaW5lZCBpbiBVdGlscywgd2UgY2FuJ3RcbiAgICAgKiBndWFyYW50ZWUgdGhlbSB0byBmb2xsb3cgc2VtdmVyLiBVc2UgdGhlbSBhdCB5b3VyIG93biByaXNrIVxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAxLjhcbiAgICAgKiBAbWVtYmVyIFV0aWxzXG4gICAgICogQG1lbWJlcm9mIFBvcHBlclxuICAgICAqL1xuXG4gIH1dKTtcbiAgcmV0dXJuIFBvcHBlcjtcbn0oKTtcblxuLyoqXG4gKiBUaGUgYHJlZmVyZW5jZU9iamVjdGAgaXMgYW4gb2JqZWN0IHRoYXQgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIGNvbXBhdGlibGUgd2l0aCBQb3BwZXIuanNcbiAqIGFuZCBsZXRzIHlvdSB1c2UgaXQgYXMgcmVwbGFjZW1lbnQgb2YgYSByZWFsIERPTSBub2RlLjxiciAvPlxuICogWW91IGNhbiB1c2UgdGhpcyBtZXRob2QgdG8gcG9zaXRpb24gYSBwb3BwZXIgcmVsYXRpdmVseSB0byBhIHNldCBvZiBjb29yZGluYXRlc1xuICogaW4gY2FzZSB5b3UgZG9uJ3QgaGF2ZSBhIERPTSBub2RlIHRvIHVzZSBhcyByZWZlcmVuY2UuXG4gKlxuICogYGBgXG4gKiBuZXcgUG9wcGVyKHJlZmVyZW5jZU9iamVjdCwgcG9wcGVyTm9kZSk7XG4gKiBgYGBcbiAqXG4gKiBOQjogVGhpcyBmZWF0dXJlIGlzbid0IHN1cHBvcnRlZCBpbiBJbnRlcm5ldCBFeHBsb3JlciAxMC5cbiAqIEBuYW1lIHJlZmVyZW5jZU9iamVjdFxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZGF0YS5nZXRCb3VuZGluZ0NsaWVudFJlY3RcbiAqIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgc2V0IG9mIGNvb3JkaW5hdGVzIGNvbXBhdGlibGUgd2l0aCB0aGUgbmF0aXZlIGBnZXRCb3VuZGluZ0NsaWVudFJlY3RgIG1ldGhvZC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkYXRhLmNsaWVudFdpZHRoXG4gKiBBbiBFUzYgZ2V0dGVyIHRoYXQgd2lsbCByZXR1cm4gdGhlIHdpZHRoIG9mIHRoZSB2aXJ0dWFsIHJlZmVyZW5jZSBlbGVtZW50LlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGRhdGEuY2xpZW50SGVpZ2h0XG4gKiBBbiBFUzYgZ2V0dGVyIHRoYXQgd2lsbCByZXR1cm4gdGhlIGhlaWdodCBvZiB0aGUgdmlydHVhbCByZWZlcmVuY2UgZWxlbWVudC5cbiAqL1xuXG5cblBvcHBlci5VdGlscyA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbCkuUG9wcGVyVXRpbHM7XG5Qb3BwZXIucGxhY2VtZW50cyA9IHBsYWNlbWVudHM7XG5Qb3BwZXIuRGVmYXVsdHMgPSBEZWZhdWx0cztcblxucmV0dXJuIFBvcHBlcjtcblxufSkpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBvcHBlci5qcy5tYXBcbiIsIi8qIVxuICAqIEJvb3RzdHJhcCB1dGlsLmpzIHY0LjQuMSAoaHR0cHM6Ly9nZXRib290c3RyYXAuY29tLylcbiAgKiBDb3B5cmlnaHQgMjAxMS0yMDE5IFRoZSBCb290c3RyYXAgQXV0aG9ycyAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2dyYXBocy9jb250cmlidXRvcnMpXG4gICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAgKi9cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSkgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSkgOlxuICAoZ2xvYmFsID0gZ2xvYmFsIHx8IHNlbGYsIGdsb2JhbC5VdGlsID0gZmFjdG9yeShnbG9iYWwualF1ZXJ5KSk7XG59KHRoaXMsIChmdW5jdGlvbiAoJCkgeyAndXNlIHN0cmljdCc7XG5cbiAgJCA9ICQgJiYgJC5oYXNPd25Qcm9wZXJ0eSgnZGVmYXVsdCcpID8gJFsnZGVmYXVsdCddIDogJDtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQm9vdHN0cmFwICh2NC40LjEpOiB1dGlsLmpzXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIFByaXZhdGUgVHJhbnNpdGlvbkVuZCBIZWxwZXJzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgVFJBTlNJVElPTl9FTkQgPSAndHJhbnNpdGlvbmVuZCc7XG4gIHZhciBNQVhfVUlEID0gMTAwMDAwMDtcbiAgdmFyIE1JTExJU0VDT05EU19NVUxUSVBMSUVSID0gMTAwMDsgLy8gU2hvdXRvdXQgQW5ndXNDcm9sbCAoaHR0cHM6Ly9nb28uZ2wvcHh3UUdwKVxuXG4gIGZ1bmN0aW9uIHRvVHlwZShvYmopIHtcbiAgICByZXR1cm4ge30udG9TdHJpbmcuY2FsbChvYmopLm1hdGNoKC9cXHMoW2Etel0rKS9pKVsxXS50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0U3BlY2lhbFRyYW5zaXRpb25FbmRFdmVudCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYmluZFR5cGU6IFRSQU5TSVRJT05fRU5ELFxuICAgICAgZGVsZWdhdGVUeXBlOiBUUkFOU0lUSU9OX0VORCxcbiAgICAgIGhhbmRsZTogZnVuY3Rpb24gaGFuZGxlKGV2ZW50KSB7XG4gICAgICAgIGlmICgkKGV2ZW50LnRhcmdldCkuaXModGhpcykpIHtcbiAgICAgICAgICByZXR1cm4gZXZlbnQuaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZpbmVkXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25FbmRFbXVsYXRvcihkdXJhdGlvbikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gICAgJCh0aGlzKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghY2FsbGVkKSB7XG4gICAgICAgIFV0aWwudHJpZ2dlclRyYW5zaXRpb25FbmQoX3RoaXMpO1xuICAgICAgfVxuICAgIH0sIGR1cmF0aW9uKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFRyYW5zaXRpb25FbmRTdXBwb3J0KCkge1xuICAgICQuZm4uZW11bGF0ZVRyYW5zaXRpb25FbmQgPSB0cmFuc2l0aW9uRW5kRW11bGF0b3I7XG4gICAgJC5ldmVudC5zcGVjaWFsW1V0aWwuVFJBTlNJVElPTl9FTkRdID0gZ2V0U3BlY2lhbFRyYW5zaXRpb25FbmRFdmVudCgpO1xuICB9XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBQdWJsaWMgVXRpbCBBcGlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cblxuICB2YXIgVXRpbCA9IHtcbiAgICBUUkFOU0lUSU9OX0VORDogJ2JzVHJhbnNpdGlvbkVuZCcsXG4gICAgZ2V0VUlEOiBmdW5jdGlvbiBnZXRVSUQocHJlZml4KSB7XG4gICAgICBkbyB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG4gICAgICAgIHByZWZpeCArPSB+fihNYXRoLnJhbmRvbSgpICogTUFYX1VJRCk7IC8vIFwifn5cIiBhY3RzIGxpa2UgYSBmYXN0ZXIgTWF0aC5mbG9vcigpIGhlcmVcbiAgICAgIH0gd2hpbGUgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHByZWZpeCkpO1xuXG4gICAgICByZXR1cm4gcHJlZml4O1xuICAgIH0sXG4gICAgZ2V0U2VsZWN0b3JGcm9tRWxlbWVudDogZnVuY3Rpb24gZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KSB7XG4gICAgICB2YXIgc2VsZWN0b3IgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS10YXJnZXQnKTtcblxuICAgICAgaWYgKCFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gJyMnKSB7XG4gICAgICAgIHZhciBocmVmQXR0ciA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdocmVmJyk7XG4gICAgICAgIHNlbGVjdG9yID0gaHJlZkF0dHIgJiYgaHJlZkF0dHIgIT09ICcjJyA/IGhyZWZBdHRyLnRyaW0oKSA6ICcnO1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikgPyBzZWxlY3RvciA6IG51bGw7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfSxcbiAgICBnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudDogZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfSAvLyBHZXQgdHJhbnNpdGlvbi1kdXJhdGlvbiBvZiB0aGUgZWxlbWVudFxuXG5cbiAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSAkKGVsZW1lbnQpLmNzcygndHJhbnNpdGlvbi1kdXJhdGlvbicpO1xuICAgICAgdmFyIHRyYW5zaXRpb25EZWxheSA9ICQoZWxlbWVudCkuY3NzKCd0cmFuc2l0aW9uLWRlbGF5Jyk7XG4gICAgICB2YXIgZmxvYXRUcmFuc2l0aW9uRHVyYXRpb24gPSBwYXJzZUZsb2F0KHRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgICB2YXIgZmxvYXRUcmFuc2l0aW9uRGVsYXkgPSBwYXJzZUZsb2F0KHRyYW5zaXRpb25EZWxheSk7IC8vIFJldHVybiAwIGlmIGVsZW1lbnQgb3IgdHJhbnNpdGlvbiBkdXJhdGlvbiBpcyBub3QgZm91bmRcblxuICAgICAgaWYgKCFmbG9hdFRyYW5zaXRpb25EdXJhdGlvbiAmJiAhZmxvYXRUcmFuc2l0aW9uRGVsYXkpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9IC8vIElmIG11bHRpcGxlIGR1cmF0aW9ucyBhcmUgZGVmaW5lZCwgdGFrZSB0aGUgZmlyc3RcblxuXG4gICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb24uc3BsaXQoJywnKVswXTtcbiAgICAgIHRyYW5zaXRpb25EZWxheSA9IHRyYW5zaXRpb25EZWxheS5zcGxpdCgnLCcpWzBdO1xuICAgICAgcmV0dXJuIChwYXJzZUZsb2F0KHRyYW5zaXRpb25EdXJhdGlvbikgKyBwYXJzZUZsb2F0KHRyYW5zaXRpb25EZWxheSkpICogTUlMTElTRUNPTkRTX01VTFRJUExJRVI7XG4gICAgfSxcbiAgICByZWZsb3c6IGZ1bmN0aW9uIHJlZmxvdyhlbGVtZW50KSB7XG4gICAgICByZXR1cm4gZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgfSxcbiAgICB0cmlnZ2VyVHJhbnNpdGlvbkVuZDogZnVuY3Rpb24gdHJpZ2dlclRyYW5zaXRpb25FbmQoZWxlbWVudCkge1xuICAgICAgJChlbGVtZW50KS50cmlnZ2VyKFRSQU5TSVRJT05fRU5EKTtcbiAgICB9LFxuICAgIC8vIFRPRE86IFJlbW92ZSBpbiB2NVxuICAgIHN1cHBvcnRzVHJhbnNpdGlvbkVuZDogZnVuY3Rpb24gc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkge1xuICAgICAgcmV0dXJuIEJvb2xlYW4oVFJBTlNJVElPTl9FTkQpO1xuICAgIH0sXG4gICAgaXNFbGVtZW50OiBmdW5jdGlvbiBpc0VsZW1lbnQob2JqKSB7XG4gICAgICByZXR1cm4gKG9ialswXSB8fCBvYmopLm5vZGVUeXBlO1xuICAgIH0sXG4gICAgdHlwZUNoZWNrQ29uZmlnOiBmdW5jdGlvbiB0eXBlQ2hlY2tDb25maWcoY29tcG9uZW50TmFtZSwgY29uZmlnLCBjb25maWdUeXBlcykge1xuICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gY29uZmlnVHlwZXMpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChjb25maWdUeXBlcywgcHJvcGVydHkpKSB7XG4gICAgICAgICAgdmFyIGV4cGVjdGVkVHlwZXMgPSBjb25maWdUeXBlc1twcm9wZXJ0eV07XG4gICAgICAgICAgdmFyIHZhbHVlID0gY29uZmlnW3Byb3BlcnR5XTtcbiAgICAgICAgICB2YXIgdmFsdWVUeXBlID0gdmFsdWUgJiYgVXRpbC5pc0VsZW1lbnQodmFsdWUpID8gJ2VsZW1lbnQnIDogdG9UeXBlKHZhbHVlKTtcblxuICAgICAgICAgIGlmICghbmV3IFJlZ0V4cChleHBlY3RlZFR5cGVzKS50ZXN0KHZhbHVlVHlwZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihjb21wb25lbnROYW1lLnRvVXBwZXJDYXNlKCkgKyBcIjogXCIgKyAoXCJPcHRpb24gXFxcIlwiICsgcHJvcGVydHkgKyBcIlxcXCIgcHJvdmlkZWQgdHlwZSBcXFwiXCIgKyB2YWx1ZVR5cGUgKyBcIlxcXCIgXCIpICsgKFwiYnV0IGV4cGVjdGVkIHR5cGUgXFxcIlwiICsgZXhwZWN0ZWRUeXBlcyArIFwiXFxcIi5cIikpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgZmluZFNoYWRvd1Jvb3Q6IGZ1bmN0aW9uIGZpbmRTaGFkb3dSb290KGVsZW1lbnQpIHtcbiAgICAgIGlmICghZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmF0dGFjaFNoYWRvdykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0gLy8gQ2FuIGZpbmQgdGhlIHNoYWRvdyByb290IG90aGVyd2lzZSBpdCdsbCByZXR1cm4gdGhlIGRvY3VtZW50XG5cblxuICAgICAgaWYgKHR5cGVvZiBlbGVtZW50LmdldFJvb3ROb2RlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciByb290ID0gZWxlbWVudC5nZXRSb290Tm9kZSgpO1xuICAgICAgICByZXR1cm4gcm9vdCBpbnN0YW5jZW9mIFNoYWRvd1Jvb3QgPyByb290IDogbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBTaGFkb3dSb290KSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgICAgfSAvLyB3aGVuIHdlIGRvbid0IGZpbmQgYSBzaGFkb3cgcm9vdFxuXG5cbiAgICAgIGlmICghZWxlbWVudC5wYXJlbnROb2RlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gVXRpbC5maW5kU2hhZG93Um9vdChlbGVtZW50LnBhcmVudE5vZGUpO1xuICAgIH0sXG4gICAgalF1ZXJ5RGV0ZWN0aW9uOiBmdW5jdGlvbiBqUXVlcnlEZXRlY3Rpb24oKSB7XG4gICAgICBpZiAodHlwZW9mICQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Jvb3RzdHJhcFxcJ3MgSmF2YVNjcmlwdCByZXF1aXJlcyBqUXVlcnkuIGpRdWVyeSBtdXN0IGJlIGluY2x1ZGVkIGJlZm9yZSBCb290c3RyYXBcXCdzIEphdmFTY3JpcHQuJyk7XG4gICAgICB9XG5cbiAgICAgIHZhciB2ZXJzaW9uID0gJC5mbi5qcXVlcnkuc3BsaXQoJyAnKVswXS5zcGxpdCgnLicpO1xuICAgICAgdmFyIG1pbk1ham9yID0gMTtcbiAgICAgIHZhciBsdE1ham9yID0gMjtcbiAgICAgIHZhciBtaW5NaW5vciA9IDk7XG4gICAgICB2YXIgbWluUGF0Y2ggPSAxO1xuICAgICAgdmFyIG1heE1ham9yID0gNDtcblxuICAgICAgaWYgKHZlcnNpb25bMF0gPCBsdE1ham9yICYmIHZlcnNpb25bMV0gPCBtaW5NaW5vciB8fCB2ZXJzaW9uWzBdID09PSBtaW5NYWpvciAmJiB2ZXJzaW9uWzFdID09PSBtaW5NaW5vciAmJiB2ZXJzaW9uWzJdIDwgbWluUGF0Y2ggfHwgdmVyc2lvblswXSA+PSBtYXhNYWpvcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Jvb3RzdHJhcFxcJ3MgSmF2YVNjcmlwdCByZXF1aXJlcyBhdCBsZWFzdCBqUXVlcnkgdjEuOS4xIGJ1dCBsZXNzIHRoYW4gdjQuMC4wJyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBVdGlsLmpRdWVyeURldGVjdGlvbigpO1xuICBzZXRUcmFuc2l0aW9uRW5kU3VwcG9ydCgpO1xuXG4gIHJldHVybiBVdGlsO1xuXG59KSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC5qcy5tYXBcbiIsIi8qIVxuICAqIEJvb3RzdHJhcCBhbGVydC5qcyB2NC40LjEgKGh0dHBzOi8vZ2V0Ym9vdHN0cmFwLmNvbS8pXG4gICogQ29weXJpZ2h0IDIwMTEtMjAxOSBUaGUgQm9vdHN0cmFwIEF1dGhvcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ncmFwaHMvY29udHJpYnV0b3JzKVxuICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gICovXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZSgnanF1ZXJ5JyksIHJlcXVpcmUoJy4vdXRpbC5qcycpKSA6XG4gIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJ2pxdWVyeScsICcuL3V0aWwuanMnXSwgZmFjdG9yeSkgOlxuICAoZ2xvYmFsID0gZ2xvYmFsIHx8IHNlbGYsIGdsb2JhbC5BbGVydCA9IGZhY3RvcnkoZ2xvYmFsLmpRdWVyeSwgZ2xvYmFsLlV0aWwpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgkLCBVdGlsKSB7ICd1c2Ugc3RyaWN0JztcblxuICAkID0gJCAmJiAkLmhhc093blByb3BlcnR5KCdkZWZhdWx0JykgPyAkWydkZWZhdWx0J10gOiAkO1xuICBVdGlsID0gVXRpbCAmJiBVdGlsLmhhc093blByb3BlcnR5KCdkZWZhdWx0JykgPyBVdGlsWydkZWZhdWx0J10gOiBVdGlsO1xuXG4gIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29uc3RhbnRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgTkFNRSA9ICdhbGVydCc7XG4gIHZhciBWRVJTSU9OID0gJzQuNC4xJztcbiAgdmFyIERBVEFfS0VZID0gJ2JzLmFsZXJ0JztcbiAgdmFyIEVWRU5UX0tFWSA9IFwiLlwiICsgREFUQV9LRVk7XG4gIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJztcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCA9ICQuZm5bTkFNRV07XG4gIHZhciBTZWxlY3RvciA9IHtcbiAgICBESVNNSVNTOiAnW2RhdGEtZGlzbWlzcz1cImFsZXJ0XCJdJ1xuICB9O1xuICB2YXIgRXZlbnQgPSB7XG4gICAgQ0xPU0U6IFwiY2xvc2VcIiArIEVWRU5UX0tFWSxcbiAgICBDTE9TRUQ6IFwiY2xvc2VkXCIgKyBFVkVOVF9LRVksXG4gICAgQ0xJQ0tfREFUQV9BUEk6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWVxuICB9O1xuICB2YXIgQ2xhc3NOYW1lID0ge1xuICAgIEFMRVJUOiAnYWxlcnQnLFxuICAgIEZBREU6ICdmYWRlJyxcbiAgICBTSE9XOiAnc2hvdydcbiAgfTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgQWxlcnQgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBbGVydChlbGVtZW50KSB7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICB9IC8vIEdldHRlcnNcblxuXG4gICAgdmFyIF9wcm90byA9IEFsZXJ0LnByb3RvdHlwZTtcblxuICAgIC8vIFB1YmxpY1xuICAgIF9wcm90by5jbG9zZSA9IGZ1bmN0aW9uIGNsb3NlKGVsZW1lbnQpIHtcbiAgICAgIHZhciByb290RWxlbWVudCA9IHRoaXMuX2VsZW1lbnQ7XG5cbiAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgIHJvb3RFbGVtZW50ID0gdGhpcy5fZ2V0Um9vdEVsZW1lbnQoZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBjdXN0b21FdmVudCA9IHRoaXMuX3RyaWdnZXJDbG9zZUV2ZW50KHJvb3RFbGVtZW50KTtcblxuICAgICAgaWYgKGN1c3RvbUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcmVtb3ZlRWxlbWVudChyb290RWxlbWVudCk7XG4gICAgfTtcblxuICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSk7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICB9IC8vIFByaXZhdGVcbiAgICA7XG5cbiAgICBfcHJvdG8uX2dldFJvb3RFbGVtZW50ID0gZnVuY3Rpb24gX2dldFJvb3RFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KTtcbiAgICAgIHZhciBwYXJlbnQgPSBmYWxzZTtcblxuICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIHBhcmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXBhcmVudCkge1xuICAgICAgICBwYXJlbnQgPSAkKGVsZW1lbnQpLmNsb3Nlc3QoXCIuXCIgKyBDbGFzc05hbWUuQUxFUlQpWzBdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGFyZW50O1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3RyaWdnZXJDbG9zZUV2ZW50ID0gZnVuY3Rpb24gX3RyaWdnZXJDbG9zZUV2ZW50KGVsZW1lbnQpIHtcbiAgICAgIHZhciBjbG9zZUV2ZW50ID0gJC5FdmVudChFdmVudC5DTE9TRSk7XG4gICAgICAkKGVsZW1lbnQpLnRyaWdnZXIoY2xvc2VFdmVudCk7XG4gICAgICByZXR1cm4gY2xvc2VFdmVudDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9yZW1vdmVFbGVtZW50ID0gZnVuY3Rpb24gX3JlbW92ZUVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgJChlbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cbiAgICAgIGlmICghJChlbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkpIHtcbiAgICAgICAgdGhpcy5fZGVzdHJveUVsZW1lbnQoZWxlbWVudCk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudChlbGVtZW50KTtcbiAgICAgICQoZWxlbWVudCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuX2Rlc3Ryb3lFbGVtZW50KGVsZW1lbnQsIGV2ZW50KTtcbiAgICAgIH0pLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgfTtcblxuICAgIF9wcm90by5fZGVzdHJveUVsZW1lbnQgPSBmdW5jdGlvbiBfZGVzdHJveUVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgJChlbGVtZW50KS5kZXRhY2goKS50cmlnZ2VyKEV2ZW50LkNMT1NFRCkucmVtb3ZlKCk7XG4gICAgfSAvLyBTdGF0aWNcbiAgICA7XG5cbiAgICBBbGVydC5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgJGVsZW1lbnQgPSAkKHRoaXMpO1xuICAgICAgICB2YXIgZGF0YSA9ICRlbGVtZW50LmRhdGEoREFUQV9LRVkpO1xuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgQWxlcnQodGhpcyk7XG4gICAgICAgICAgJGVsZW1lbnQuZGF0YShEQVRBX0tFWSwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29uZmlnID09PSAnY2xvc2UnKSB7XG4gICAgICAgICAgZGF0YVtjb25maWddKHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgQWxlcnQuX2hhbmRsZURpc21pc3MgPSBmdW5jdGlvbiBfaGFuZGxlRGlzbWlzcyhhbGVydEluc3RhbmNlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBhbGVydEluc3RhbmNlLmNsb3NlKHRoaXMpO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgX2NyZWF0ZUNsYXNzKEFsZXJ0LCBudWxsLCBbe1xuICAgICAga2V5OiBcIlZFUlNJT05cIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gVkVSU0lPTjtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQWxlcnQ7XG4gIH0oKTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cblxuICAkKGRvY3VtZW50KS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuRElTTUlTUywgQWxlcnQuX2hhbmRsZURpc21pc3MobmV3IEFsZXJ0KCkpKTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQuZm5bTkFNRV0gPSBBbGVydC5falF1ZXJ5SW50ZXJmYWNlO1xuICAkLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gQWxlcnQ7XG5cbiAgJC5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgcmV0dXJuIEFsZXJ0Ll9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgcmV0dXJuIEFsZXJ0O1xuXG59KSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWxlcnQuanMubWFwXG4iLCIvKiFcbiAgKiBCb290c3RyYXAgYnV0dG9uLmpzIHY0LjQuMSAoaHR0cHM6Ly9nZXRib290c3RyYXAuY29tLylcbiAgKiBDb3B5cmlnaHQgMjAxMS0yMDE5IFRoZSBCb290c3RyYXAgQXV0aG9ycyAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2dyYXBocy9jb250cmlidXRvcnMpXG4gICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAgKi9cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSkgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSkgOlxuICAoZ2xvYmFsID0gZ2xvYmFsIHx8IHNlbGYsIGdsb2JhbC5CdXR0b24gPSBmYWN0b3J5KGdsb2JhbC5qUXVlcnkpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgkKSB7ICd1c2Ugc3RyaWN0JztcblxuICAkID0gJCAmJiAkLmhhc093blByb3BlcnR5KCdkZWZhdWx0JykgPyAkWydkZWZhdWx0J10gOiAkO1xuXG4gIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29uc3RhbnRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgTkFNRSA9ICdidXR0b24nO1xuICB2YXIgVkVSU0lPTiA9ICc0LjQuMSc7XG4gIHZhciBEQVRBX0tFWSA9ICdicy5idXR0b24nO1xuICB2YXIgRVZFTlRfS0VZID0gXCIuXCIgKyBEQVRBX0tFWTtcbiAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJC5mbltOQU1FXTtcbiAgdmFyIENsYXNzTmFtZSA9IHtcbiAgICBBQ1RJVkU6ICdhY3RpdmUnLFxuICAgIEJVVFRPTjogJ2J0bicsXG4gICAgRk9DVVM6ICdmb2N1cydcbiAgfTtcbiAgdmFyIFNlbGVjdG9yID0ge1xuICAgIERBVEFfVE9HR0xFX0NBUlJPVDogJ1tkYXRhLXRvZ2dsZV49XCJidXR0b25cIl0nLFxuICAgIERBVEFfVE9HR0xFUzogJ1tkYXRhLXRvZ2dsZT1cImJ1dHRvbnNcIl0nLFxuICAgIERBVEFfVE9HR0xFOiAnW2RhdGEtdG9nZ2xlPVwiYnV0dG9uXCJdJyxcbiAgICBEQVRBX1RPR0dMRVNfQlVUVE9OUzogJ1tkYXRhLXRvZ2dsZT1cImJ1dHRvbnNcIl0gLmJ0bicsXG4gICAgSU5QVVQ6ICdpbnB1dDpub3QoW3R5cGU9XCJoaWRkZW5cIl0pJyxcbiAgICBBQ1RJVkU6ICcuYWN0aXZlJyxcbiAgICBCVVRUT046ICcuYnRuJ1xuICB9O1xuICB2YXIgRXZlbnQgPSB7XG4gICAgQ0xJQ0tfREFUQV9BUEk6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWSxcbiAgICBGT0NVU19CTFVSX0RBVEFfQVBJOiBcImZvY3VzXCIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVkgKyBcIiBcIiArIChcImJsdXJcIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWSksXG4gICAgTE9BRF9EQVRBX0FQSTogXCJsb2FkXCIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVlcbiAgfTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgQnV0dG9uID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQnV0dG9uKGVsZW1lbnQpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgIH0gLy8gR2V0dGVyc1xuXG5cbiAgICB2YXIgX3Byb3RvID0gQnV0dG9uLnByb3RvdHlwZTtcblxuICAgIC8vIFB1YmxpY1xuICAgIF9wcm90by50b2dnbGUgPSBmdW5jdGlvbiB0b2dnbGUoKSB7XG4gICAgICB2YXIgdHJpZ2dlckNoYW5nZUV2ZW50ID0gdHJ1ZTtcbiAgICAgIHZhciBhZGRBcmlhUHJlc3NlZCA9IHRydWU7XG4gICAgICB2YXIgcm9vdEVsZW1lbnQgPSAkKHRoaXMuX2VsZW1lbnQpLmNsb3Nlc3QoU2VsZWN0b3IuREFUQV9UT0dHTEVTKVswXTtcblxuICAgICAgaWYgKHJvb3RFbGVtZW50KSB7XG4gICAgICAgIHZhciBpbnB1dCA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5JTlBVVCk7XG5cbiAgICAgICAgaWYgKGlucHV0KSB7XG4gICAgICAgICAgaWYgKGlucHV0LnR5cGUgPT09ICdyYWRpbycpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC5jaGVja2VkICYmIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENsYXNzTmFtZS5BQ1RJVkUpKSB7XG4gICAgICAgICAgICAgIHRyaWdnZXJDaGFuZ2VFdmVudCA9IGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIGFjdGl2ZUVsZW1lbnQgPSByb290RWxlbWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLkFDVElWRSk7XG5cbiAgICAgICAgICAgICAgaWYgKGFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAkKGFjdGl2ZUVsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChpbnB1dC50eXBlID09PSAnY2hlY2tib3gnKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fZWxlbWVudC50YWdOYW1lID09PSAnTEFCRUwnICYmIGlucHV0LmNoZWNrZWQgPT09IHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENsYXNzTmFtZS5BQ1RJVkUpKSB7XG4gICAgICAgICAgICAgIHRyaWdnZXJDaGFuZ2VFdmVudCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpZiBpdCdzIG5vdCBhIHJhZGlvIGJ1dHRvbiBvciBjaGVja2JveCBkb24ndCBhZGQgYSBwb2ludGxlc3MvaW52YWxpZCBjaGVja2VkIHByb3BlcnR5IHRvIHRoZSBpbnB1dFxuICAgICAgICAgICAgdHJpZ2dlckNoYW5nZUV2ZW50ID0gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRyaWdnZXJDaGFuZ2VFdmVudCkge1xuICAgICAgICAgICAgaW5wdXQuY2hlY2tlZCA9ICF0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDbGFzc05hbWUuQUNUSVZFKTtcbiAgICAgICAgICAgICQoaW5wdXQpLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlucHV0LmZvY3VzKCk7XG4gICAgICAgICAgYWRkQXJpYVByZXNzZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoISh0aGlzLl9lbGVtZW50Lmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSB8fCB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnZGlzYWJsZWQnKSkpIHtcbiAgICAgICAgaWYgKGFkZEFyaWFQcmVzc2VkKSB7XG4gICAgICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtcHJlc3NlZCcsICF0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDbGFzc05hbWUuQUNUSVZFKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJpZ2dlckNoYW5nZUV2ZW50KSB7XG4gICAgICAgICAgJCh0aGlzLl9lbGVtZW50KS50b2dnbGVDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAkLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgfSAvLyBTdGF0aWNcbiAgICA7XG5cbiAgICBCdXR0b24uX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSAkKHRoaXMpLmRhdGEoREFUQV9LRVkpO1xuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgQnV0dG9uKHRoaXMpO1xuICAgICAgICAgICQodGhpcykuZGF0YShEQVRBX0tFWSwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29uZmlnID09PSAndG9nZ2xlJykge1xuICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX2NyZWF0ZUNsYXNzKEJ1dHRvbiwgbnVsbCwgW3tcbiAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT047XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEJ1dHRvbjtcbiAgfSgpO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuXG4gICQoZG9jdW1lbnQpLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRV9DQVJST1QsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciBidXR0b24gPSBldmVudC50YXJnZXQ7XG5cbiAgICBpZiAoISQoYnV0dG9uKS5oYXNDbGFzcyhDbGFzc05hbWUuQlVUVE9OKSkge1xuICAgICAgYnV0dG9uID0gJChidXR0b24pLmNsb3Nlc3QoU2VsZWN0b3IuQlVUVE9OKVswXTtcbiAgICB9XG5cbiAgICBpZiAoIWJ1dHRvbiB8fCBidXR0b24uaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpIHx8IGJ1dHRvbi5jbGFzc0xpc3QuY29udGFpbnMoJ2Rpc2FibGVkJykpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIHdvcmsgYXJvdW5kIEZpcmVmb3ggYnVnICMxNTQwOTk1XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBpbnB1dEJ0biA9IGJ1dHRvbi5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLklOUFVUKTtcblxuICAgICAgaWYgKGlucHV0QnRuICYmIChpbnB1dEJ0bi5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykgfHwgaW5wdXRCdG4uY2xhc3NMaXN0LmNvbnRhaW5zKCdkaXNhYmxlZCcpKSkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyB3b3JrIGFyb3VuZCBGaXJlZm94IGJ1ZyAjMTU0MDk5NVxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgQnV0dG9uLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkKGJ1dHRvbiksICd0b2dnbGUnKTtcbiAgICB9XG4gIH0pLm9uKEV2ZW50LkZPQ1VTX0JMVVJfREFUQV9BUEksIFNlbGVjdG9yLkRBVEFfVE9HR0xFX0NBUlJPVCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIGJ1dHRvbiA9ICQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KFNlbGVjdG9yLkJVVFRPTilbMF07XG4gICAgJChidXR0b24pLnRvZ2dsZUNsYXNzKENsYXNzTmFtZS5GT0NVUywgL15mb2N1cyhpbik/JC8udGVzdChldmVudC50eXBlKSk7XG4gIH0pO1xuICAkKHdpbmRvdykub24oRXZlbnQuTE9BRF9EQVRBX0FQSSwgZnVuY3Rpb24gKCkge1xuICAgIC8vIGVuc3VyZSBjb3JyZWN0IGFjdGl2ZSBjbGFzcyBpcyBzZXQgdG8gbWF0Y2ggdGhlIGNvbnRyb2xzJyBhY3R1YWwgdmFsdWVzL3N0YXRlc1xuICAgIC8vIGZpbmQgYWxsIGNoZWNrYm94ZXMvcmVhZGlvIGJ1dHRvbnMgaW5zaWRlIGRhdGEtdG9nZ2xlIGdyb3Vwc1xuICAgIHZhciBidXR0b25zID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLkRBVEFfVE9HR0xFU19CVVRUT05TKSk7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYnV0dG9ucy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIGJ1dHRvbiA9IGJ1dHRvbnNbaV07XG4gICAgICB2YXIgaW5wdXQgPSBidXR0b24ucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5JTlBVVCk7XG5cbiAgICAgIGlmIChpbnB1dC5jaGVja2VkIHx8IGlucHV0Lmhhc0F0dHJpYnV0ZSgnY2hlY2tlZCcpKSB7XG4gICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICB9XG4gICAgfSAvLyBmaW5kIGFsbCBidXR0b24gdG9nZ2xlc1xuXG5cbiAgICBidXR0b25zID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLkRBVEFfVE9HR0xFKSk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDAsIF9sZW4gPSBidXR0b25zLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7XG4gICAgICB2YXIgX2J1dHRvbiA9IGJ1dHRvbnNbX2ldO1xuXG4gICAgICBpZiAoX2J1dHRvbi5nZXRBdHRyaWJ1dGUoJ2FyaWEtcHJlc3NlZCcpID09PSAndHJ1ZScpIHtcbiAgICAgICAgX2J1dHRvbi5jbGFzc0xpc3QuYWRkKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2J1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogalF1ZXJ5XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkLmZuW05BTUVdID0gQnV0dG9uLl9qUXVlcnlJbnRlcmZhY2U7XG4gICQuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBCdXR0b247XG5cbiAgJC5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgcmV0dXJuIEJ1dHRvbi5falF1ZXJ5SW50ZXJmYWNlO1xuICB9O1xuXG4gIHJldHVybiBCdXR0b247XG5cbn0pKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idXR0b24uanMubWFwXG4iLCIvKiFcbiAgKiBCb290c3RyYXAgY2Fyb3VzZWwuanMgdjQuNC4xIChodHRwczovL2dldGJvb3RzdHJhcC5jb20vKVxuICAqIENvcHlyaWdodCAyMDExLTIwMTkgVGhlIEJvb3RzdHJhcCBBdXRob3JzIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvZ3JhcGhzL2NvbnRyaWJ1dG9ycylcbiAgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICAqL1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpLCByZXF1aXJlKCcuL3V0aWwuanMnKSkgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydqcXVlcnknLCAnLi91dGlsLmpzJ10sIGZhY3RvcnkpIDpcbiAgKGdsb2JhbCA9IGdsb2JhbCB8fCBzZWxmLCBnbG9iYWwuQ2Fyb3VzZWwgPSBmYWN0b3J5KGdsb2JhbC5qUXVlcnksIGdsb2JhbC5VdGlsKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoJCwgVXRpbCkgeyAndXNlIHN0cmljdCc7XG5cbiAgJCA9ICQgJiYgJC5oYXNPd25Qcm9wZXJ0eSgnZGVmYXVsdCcpID8gJFsnZGVmYXVsdCddIDogJDtcbiAgVXRpbCA9IFV0aWwgJiYgVXRpbC5oYXNPd25Qcm9wZXJ0eSgnZGVmYXVsdCcpID8gVXRpbFsnZGVmYXVsdCddIDogVXRpbDtcblxuICBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH1cblxuICBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgaWYgKGtleSBpbiBvYmopIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICBmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG4gICAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICAgICAgfSk7XG4gICAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGtleXM7XG4gIH1cblxuICBmdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG5cbiAgICAgIGlmIChpICUgMikge1xuICAgICAgICBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29uc3RhbnRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgTkFNRSA9ICdjYXJvdXNlbCc7XG4gIHZhciBWRVJTSU9OID0gJzQuNC4xJztcbiAgdmFyIERBVEFfS0VZID0gJ2JzLmNhcm91c2VsJztcbiAgdmFyIEVWRU5UX0tFWSA9IFwiLlwiICsgREFUQV9LRVk7XG4gIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJztcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCA9ICQuZm5bTkFNRV07XG4gIHZhciBBUlJPV19MRUZUX0tFWUNPREUgPSAzNzsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgbGVmdCBhcnJvdyBrZXlcblxuICB2YXIgQVJST1dfUklHSFRfS0VZQ09ERSA9IDM5OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciByaWdodCBhcnJvdyBrZXlcblxuICB2YXIgVE9VQ0hFVkVOVF9DT01QQVRfV0FJVCA9IDUwMDsgLy8gVGltZSBmb3IgbW91c2UgY29tcGF0IGV2ZW50cyB0byBmaXJlIGFmdGVyIHRvdWNoXG5cbiAgdmFyIFNXSVBFX1RIUkVTSE9MRCA9IDQwO1xuICB2YXIgRGVmYXVsdCA9IHtcbiAgICBpbnRlcnZhbDogNTAwMCxcbiAgICBrZXlib2FyZDogdHJ1ZSxcbiAgICBzbGlkZTogZmFsc2UsXG4gICAgcGF1c2U6ICdob3ZlcicsXG4gICAgd3JhcDogdHJ1ZSxcbiAgICB0b3VjaDogdHJ1ZVxuICB9O1xuICB2YXIgRGVmYXVsdFR5cGUgPSB7XG4gICAgaW50ZXJ2YWw6ICcobnVtYmVyfGJvb2xlYW4pJyxcbiAgICBrZXlib2FyZDogJ2Jvb2xlYW4nLFxuICAgIHNsaWRlOiAnKGJvb2xlYW58c3RyaW5nKScsXG4gICAgcGF1c2U6ICcoc3RyaW5nfGJvb2xlYW4pJyxcbiAgICB3cmFwOiAnYm9vbGVhbicsXG4gICAgdG91Y2g6ICdib29sZWFuJ1xuICB9O1xuICB2YXIgRGlyZWN0aW9uID0ge1xuICAgIE5FWFQ6ICduZXh0JyxcbiAgICBQUkVWOiAncHJldicsXG4gICAgTEVGVDogJ2xlZnQnLFxuICAgIFJJR0hUOiAncmlnaHQnXG4gIH07XG4gIHZhciBFdmVudCA9IHtcbiAgICBTTElERTogXCJzbGlkZVwiICsgRVZFTlRfS0VZLFxuICAgIFNMSUQ6IFwic2xpZFwiICsgRVZFTlRfS0VZLFxuICAgIEtFWURPV046IFwia2V5ZG93blwiICsgRVZFTlRfS0VZLFxuICAgIE1PVVNFRU5URVI6IFwibW91c2VlbnRlclwiICsgRVZFTlRfS0VZLFxuICAgIE1PVVNFTEVBVkU6IFwibW91c2VsZWF2ZVwiICsgRVZFTlRfS0VZLFxuICAgIFRPVUNIU1RBUlQ6IFwidG91Y2hzdGFydFwiICsgRVZFTlRfS0VZLFxuICAgIFRPVUNITU9WRTogXCJ0b3VjaG1vdmVcIiArIEVWRU5UX0tFWSxcbiAgICBUT1VDSEVORDogXCJ0b3VjaGVuZFwiICsgRVZFTlRfS0VZLFxuICAgIFBPSU5URVJET1dOOiBcInBvaW50ZXJkb3duXCIgKyBFVkVOVF9LRVksXG4gICAgUE9JTlRFUlVQOiBcInBvaW50ZXJ1cFwiICsgRVZFTlRfS0VZLFxuICAgIERSQUdfU1RBUlQ6IFwiZHJhZ3N0YXJ0XCIgKyBFVkVOVF9LRVksXG4gICAgTE9BRF9EQVRBX0FQSTogXCJsb2FkXCIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVksXG4gICAgQ0xJQ0tfREFUQV9BUEk6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWVxuICB9O1xuICB2YXIgQ2xhc3NOYW1lID0ge1xuICAgIENBUk9VU0VMOiAnY2Fyb3VzZWwnLFxuICAgIEFDVElWRTogJ2FjdGl2ZScsXG4gICAgU0xJREU6ICdzbGlkZScsXG4gICAgUklHSFQ6ICdjYXJvdXNlbC1pdGVtLXJpZ2h0JyxcbiAgICBMRUZUOiAnY2Fyb3VzZWwtaXRlbS1sZWZ0JyxcbiAgICBORVhUOiAnY2Fyb3VzZWwtaXRlbS1uZXh0JyxcbiAgICBQUkVWOiAnY2Fyb3VzZWwtaXRlbS1wcmV2JyxcbiAgICBJVEVNOiAnY2Fyb3VzZWwtaXRlbScsXG4gICAgUE9JTlRFUl9FVkVOVDogJ3BvaW50ZXItZXZlbnQnXG4gIH07XG4gIHZhciBTZWxlY3RvciA9IHtcbiAgICBBQ1RJVkU6ICcuYWN0aXZlJyxcbiAgICBBQ1RJVkVfSVRFTTogJy5hY3RpdmUuY2Fyb3VzZWwtaXRlbScsXG4gICAgSVRFTTogJy5jYXJvdXNlbC1pdGVtJyxcbiAgICBJVEVNX0lNRzogJy5jYXJvdXNlbC1pdGVtIGltZycsXG4gICAgTkVYVF9QUkVWOiAnLmNhcm91c2VsLWl0ZW0tbmV4dCwgLmNhcm91c2VsLWl0ZW0tcHJldicsXG4gICAgSU5ESUNBVE9SUzogJy5jYXJvdXNlbC1pbmRpY2F0b3JzJyxcbiAgICBEQVRBX1NMSURFOiAnW2RhdGEtc2xpZGVdLCBbZGF0YS1zbGlkZS10b10nLFxuICAgIERBVEFfUklERTogJ1tkYXRhLXJpZGU9XCJjYXJvdXNlbFwiXSdcbiAgfTtcbiAgdmFyIFBvaW50ZXJUeXBlID0ge1xuICAgIFRPVUNIOiAndG91Y2gnLFxuICAgIFBFTjogJ3BlbidcbiAgfTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgQ2Fyb3VzZWwgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDYXJvdXNlbChlbGVtZW50LCBjb25maWcpIHtcbiAgICAgIHRoaXMuX2l0ZW1zID0gbnVsbDtcbiAgICAgIHRoaXMuX2ludGVydmFsID0gbnVsbDtcbiAgICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnQgPSBudWxsO1xuICAgICAgdGhpcy5faXNQYXVzZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2lzU2xpZGluZyA9IGZhbHNlO1xuICAgICAgdGhpcy50b3VjaFRpbWVvdXQgPSBudWxsO1xuICAgICAgdGhpcy50b3VjaFN0YXJ0WCA9IDA7XG4gICAgICB0aGlzLnRvdWNoRGVsdGFYID0gMDtcbiAgICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5JTkRJQ0FUT1JTKTtcbiAgICAgIHRoaXMuX3RvdWNoU3VwcG9ydGVkID0gJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IHx8IG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDA7XG4gICAgICB0aGlzLl9wb2ludGVyRXZlbnQgPSBCb29sZWFuKHdpbmRvdy5Qb2ludGVyRXZlbnQgfHwgd2luZG93Lk1TUG9pbnRlckV2ZW50KTtcblxuICAgICAgdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9IC8vIEdldHRlcnNcblxuXG4gICAgdmFyIF9wcm90byA9IENhcm91c2VsLnByb3RvdHlwZTtcblxuICAgIC8vIFB1YmxpY1xuICAgIF9wcm90by5uZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIGlmICghdGhpcy5faXNTbGlkaW5nKSB7XG4gICAgICAgIHRoaXMuX3NsaWRlKERpcmVjdGlvbi5ORVhUKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLm5leHRXaGVuVmlzaWJsZSA9IGZ1bmN0aW9uIG5leHRXaGVuVmlzaWJsZSgpIHtcbiAgICAgIC8vIERvbid0IGNhbGwgbmV4dCB3aGVuIHRoZSBwYWdlIGlzbid0IHZpc2libGVcbiAgICAgIC8vIG9yIHRoZSBjYXJvdXNlbCBvciBpdHMgcGFyZW50IGlzbid0IHZpc2libGVcbiAgICAgIGlmICghZG9jdW1lbnQuaGlkZGVuICYmICQodGhpcy5fZWxlbWVudCkuaXMoJzp2aXNpYmxlJykgJiYgJCh0aGlzLl9lbGVtZW50KS5jc3MoJ3Zpc2liaWxpdHknKSAhPT0gJ2hpZGRlbicpIHtcbiAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5wcmV2ID0gZnVuY3Rpb24gcHJldigpIHtcbiAgICAgIGlmICghdGhpcy5faXNTbGlkaW5nKSB7XG4gICAgICAgIHRoaXMuX3NsaWRlKERpcmVjdGlvbi5QUkVWKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLnBhdXNlID0gZnVuY3Rpb24gcGF1c2UoZXZlbnQpIHtcbiAgICAgIGlmICghZXZlbnQpIHtcbiAgICAgICAgdGhpcy5faXNQYXVzZWQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLk5FWFRfUFJFVikpIHtcbiAgICAgICAgVXRpbC50cmlnZ2VyVHJhbnNpdGlvbkVuZCh0aGlzLl9lbGVtZW50KTtcbiAgICAgICAgdGhpcy5jeWNsZSh0cnVlKTtcbiAgICAgIH1cblxuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbCk7XG4gICAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGw7XG4gICAgfTtcblxuICAgIF9wcm90by5jeWNsZSA9IGZ1bmN0aW9uIGN5Y2xlKGV2ZW50KSB7XG4gICAgICBpZiAoIWV2ZW50KSB7XG4gICAgICAgIHRoaXMuX2lzUGF1c2VkID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9pbnRlcnZhbCkge1xuICAgICAgICBjbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsKTtcbiAgICAgICAgdGhpcy5faW50ZXJ2YWwgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmludGVydmFsICYmICF0aGlzLl9pc1BhdXNlZCkge1xuICAgICAgICB0aGlzLl9pbnRlcnZhbCA9IHNldEludGVydmFsKChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPyB0aGlzLm5leHRXaGVuVmlzaWJsZSA6IHRoaXMubmV4dCkuYmluZCh0aGlzKSwgdGhpcy5fY29uZmlnLmludGVydmFsKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLnRvID0gZnVuY3Rpb24gdG8oaW5kZXgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnQgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3IuQUNUSVZFX0lURU0pO1xuXG4gICAgICB2YXIgYWN0aXZlSW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgodGhpcy5fYWN0aXZlRWxlbWVudCk7XG5cbiAgICAgIGlmIChpbmRleCA+IHRoaXMuX2l0ZW1zLmxlbmd0aCAtIDEgfHwgaW5kZXggPCAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2lzU2xpZGluZykge1xuICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uZShFdmVudC5TTElELCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnRvKGluZGV4KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGFjdGl2ZUluZGV4ID09PSBpbmRleCkge1xuICAgICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICAgIHRoaXMuY3ljbGUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGlyZWN0aW9uID0gaW5kZXggPiBhY3RpdmVJbmRleCA/IERpcmVjdGlvbi5ORVhUIDogRGlyZWN0aW9uLlBSRVY7XG5cbiAgICAgIHRoaXMuX3NsaWRlKGRpcmVjdGlvbiwgdGhpcy5faXRlbXNbaW5kZXhdKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgJCh0aGlzLl9lbGVtZW50KS5vZmYoRVZFTlRfS0VZKTtcbiAgICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSk7XG4gICAgICB0aGlzLl9pdGVtcyA9IG51bGw7XG4gICAgICB0aGlzLl9jb25maWcgPSBudWxsO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGw7XG4gICAgICB0aGlzLl9pc1BhdXNlZCA9IG51bGw7XG4gICAgICB0aGlzLl9pc1NsaWRpbmcgPSBudWxsO1xuICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCA9IG51bGw7XG4gICAgfSAvLyBQcml2YXRlXG4gICAgO1xuXG4gICAgX3Byb3RvLl9nZXRDb25maWcgPSBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgICAgY29uZmlnID0gX29iamVjdFNwcmVhZDIoe30sIERlZmF1bHQsIHt9LCBjb25maWcpO1xuICAgICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCBEZWZhdWx0VHlwZSk7XG4gICAgICByZXR1cm4gY29uZmlnO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2hhbmRsZVN3aXBlID0gZnVuY3Rpb24gX2hhbmRsZVN3aXBlKCkge1xuICAgICAgdmFyIGFic0RlbHRheCA9IE1hdGguYWJzKHRoaXMudG91Y2hEZWx0YVgpO1xuXG4gICAgICBpZiAoYWJzRGVsdGF4IDw9IFNXSVBFX1RIUkVTSE9MRCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBkaXJlY3Rpb24gPSBhYnNEZWx0YXggLyB0aGlzLnRvdWNoRGVsdGFYO1xuICAgICAgdGhpcy50b3VjaERlbHRhWCA9IDA7IC8vIHN3aXBlIGxlZnRcblxuICAgICAgaWYgKGRpcmVjdGlvbiA+IDApIHtcbiAgICAgICAgdGhpcy5wcmV2KCk7XG4gICAgICB9IC8vIHN3aXBlIHJpZ2h0XG5cblxuICAgICAgaWYgKGRpcmVjdGlvbiA8IDApIHtcbiAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fYWRkRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBfYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5rZXlib2FyZCkge1xuICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50LktFWURPV04sIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczIuX2tleWRvd24oZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5wYXVzZSA9PT0gJ2hvdmVyJykge1xuICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50Lk1PVVNFRU5URVIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczIucGF1c2UoZXZlbnQpO1xuICAgICAgICB9KS5vbihFdmVudC5NT1VTRUxFQVZFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLmN5Y2xlKGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcudG91Y2gpIHtcbiAgICAgICAgdGhpcy5fYWRkVG91Y2hFdmVudExpc3RlbmVycygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX2FkZFRvdWNoRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBfYWRkVG91Y2hFdmVudExpc3RlbmVycygpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICBpZiAoIXRoaXMuX3RvdWNoU3VwcG9ydGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHN0YXJ0ID0gZnVuY3Rpb24gc3RhcnQoZXZlbnQpIHtcbiAgICAgICAgaWYgKF90aGlzMy5fcG9pbnRlckV2ZW50ICYmIFBvaW50ZXJUeXBlW2V2ZW50Lm9yaWdpbmFsRXZlbnQucG9pbnRlclR5cGUudG9VcHBlckNhc2UoKV0pIHtcbiAgICAgICAgICBfdGhpczMudG91Y2hTdGFydFggPSBldmVudC5vcmlnaW5hbEV2ZW50LmNsaWVudFg7XG4gICAgICAgIH0gZWxzZSBpZiAoIV90aGlzMy5fcG9pbnRlckV2ZW50KSB7XG4gICAgICAgICAgX3RoaXMzLnRvdWNoU3RhcnRYID0gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzWzBdLmNsaWVudFg7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHZhciBtb3ZlID0gZnVuY3Rpb24gbW92ZShldmVudCkge1xuICAgICAgICAvLyBlbnN1cmUgc3dpcGluZyB3aXRoIG9uZSB0b3VjaCBhbmQgbm90IHBpbmNoaW5nXG4gICAgICAgIGlmIChldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMgJiYgZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBfdGhpczMudG91Y2hEZWx0YVggPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzMy50b3VjaERlbHRhWCA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXS5jbGllbnRYIC0gX3RoaXMzLnRvdWNoU3RhcnRYO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB2YXIgZW5kID0gZnVuY3Rpb24gZW5kKGV2ZW50KSB7XG4gICAgICAgIGlmIChfdGhpczMuX3BvaW50ZXJFdmVudCAmJiBQb2ludGVyVHlwZVtldmVudC5vcmlnaW5hbEV2ZW50LnBvaW50ZXJUeXBlLnRvVXBwZXJDYXNlKCldKSB7XG4gICAgICAgICAgX3RoaXMzLnRvdWNoRGVsdGFYID0gZXZlbnQub3JpZ2luYWxFdmVudC5jbGllbnRYIC0gX3RoaXMzLnRvdWNoU3RhcnRYO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMzLl9oYW5kbGVTd2lwZSgpO1xuXG4gICAgICAgIGlmIChfdGhpczMuX2NvbmZpZy5wYXVzZSA9PT0gJ2hvdmVyJykge1xuICAgICAgICAgIC8vIElmIGl0J3MgYSB0b3VjaC1lbmFibGVkIGRldmljZSwgbW91c2VlbnRlci9sZWF2ZSBhcmUgZmlyZWQgYXNcbiAgICAgICAgICAvLyBwYXJ0IG9mIHRoZSBtb3VzZSBjb21wYXRpYmlsaXR5IGV2ZW50cyBvbiBmaXJzdCB0YXAgLSB0aGUgY2Fyb3VzZWxcbiAgICAgICAgICAvLyB3b3VsZCBzdG9wIGN5Y2xpbmcgdW50aWwgdXNlciB0YXBwZWQgb3V0IG9mIGl0O1xuICAgICAgICAgIC8vIGhlcmUsIHdlIGxpc3RlbiBmb3IgdG91Y2hlbmQsIGV4cGxpY2l0bHkgcGF1c2UgdGhlIGNhcm91c2VsXG4gICAgICAgICAgLy8gKGFzIGlmIGl0J3MgdGhlIHNlY29uZCB0aW1lIHdlIHRhcCBvbiBpdCwgbW91c2VlbnRlciBjb21wYXQgZXZlbnRcbiAgICAgICAgICAvLyBpcyBOT1QgZmlyZWQpIGFuZCBhZnRlciBhIHRpbWVvdXQgKHRvIGFsbG93IGZvciBtb3VzZSBjb21wYXRpYmlsaXR5XG4gICAgICAgICAgLy8gZXZlbnRzIHRvIGZpcmUpIHdlIGV4cGxpY2l0bHkgcmVzdGFydCBjeWNsaW5nXG4gICAgICAgICAgX3RoaXMzLnBhdXNlKCk7XG5cbiAgICAgICAgICBpZiAoX3RoaXMzLnRvdWNoVGltZW91dCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzMy50b3VjaFRpbWVvdXQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF90aGlzMy50b3VjaFRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5jeWNsZShldmVudCk7XG4gICAgICAgICAgfSwgVE9VQ0hFVkVOVF9DT01QQVRfV0FJVCArIF90aGlzMy5fY29uZmlnLmludGVydmFsKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgJCh0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IuSVRFTV9JTUcpKS5vbihFdmVudC5EUkFHX1NUQVJULCBmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLl9wb2ludGVyRXZlbnQpIHtcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbihFdmVudC5QT0lOVEVSRE9XTiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXJ0KGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQuUE9JTlRFUlVQLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gZW5kKGV2ZW50KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENsYXNzTmFtZS5QT0lOVEVSX0VWRU5UKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQuVE9VQ0hTVEFSVCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXJ0KGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgICQodGhpcy5fZWxlbWVudCkub24oRXZlbnQuVE9VQ0hNT1ZFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gbW92ZShldmVudCk7XG4gICAgICAgIH0pO1xuICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50LlRPVUNIRU5ELCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gZW5kKGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fa2V5ZG93biA9IGZ1bmN0aW9uIF9rZXlkb3duKGV2ZW50KSB7XG4gICAgICBpZiAoL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKGV2ZW50LndoaWNoKSB7XG4gICAgICAgIGNhc2UgQVJST1dfTEVGVF9LRVlDT0RFOlxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgdGhpcy5wcmV2KCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBBUlJPV19SSUdIVF9LRVlDT0RFOlxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0SXRlbUluZGV4ID0gZnVuY3Rpb24gX2dldEl0ZW1JbmRleChlbGVtZW50KSB7XG4gICAgICB0aGlzLl9pdGVtcyA9IGVsZW1lbnQgJiYgZWxlbWVudC5wYXJlbnROb2RlID8gW10uc2xpY2UuY2FsbChlbGVtZW50LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5JVEVNKSkgOiBbXTtcbiAgICAgIHJldHVybiB0aGlzLl9pdGVtcy5pbmRleE9mKGVsZW1lbnQpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldEl0ZW1CeURpcmVjdGlvbiA9IGZ1bmN0aW9uIF9nZXRJdGVtQnlEaXJlY3Rpb24oZGlyZWN0aW9uLCBhY3RpdmVFbGVtZW50KSB7XG4gICAgICB2YXIgaXNOZXh0RGlyZWN0aW9uID0gZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uTkVYVDtcbiAgICAgIHZhciBpc1ByZXZEaXJlY3Rpb24gPSBkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5QUkVWO1xuXG4gICAgICB2YXIgYWN0aXZlSW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgoYWN0aXZlRWxlbWVudCk7XG5cbiAgICAgIHZhciBsYXN0SXRlbUluZGV4ID0gdGhpcy5faXRlbXMubGVuZ3RoIC0gMTtcbiAgICAgIHZhciBpc0dvaW5nVG9XcmFwID0gaXNQcmV2RGlyZWN0aW9uICYmIGFjdGl2ZUluZGV4ID09PSAwIHx8IGlzTmV4dERpcmVjdGlvbiAmJiBhY3RpdmVJbmRleCA9PT0gbGFzdEl0ZW1JbmRleDtcblxuICAgICAgaWYgKGlzR29pbmdUb1dyYXAgJiYgIXRoaXMuX2NvbmZpZy53cmFwKSB7XG4gICAgICAgIHJldHVybiBhY3RpdmVFbGVtZW50O1xuICAgICAgfVxuXG4gICAgICB2YXIgZGVsdGEgPSBkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5QUkVWID8gLTEgOiAxO1xuICAgICAgdmFyIGl0ZW1JbmRleCA9IChhY3RpdmVJbmRleCArIGRlbHRhKSAlIHRoaXMuX2l0ZW1zLmxlbmd0aDtcbiAgICAgIHJldHVybiBpdGVtSW5kZXggPT09IC0xID8gdGhpcy5faXRlbXNbdGhpcy5faXRlbXMubGVuZ3RoIC0gMV0gOiB0aGlzLl9pdGVtc1tpdGVtSW5kZXhdO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3RyaWdnZXJTbGlkZUV2ZW50ID0gZnVuY3Rpb24gX3RyaWdnZXJTbGlkZUV2ZW50KHJlbGF0ZWRUYXJnZXQsIGV2ZW50RGlyZWN0aW9uTmFtZSkge1xuICAgICAgdmFyIHRhcmdldEluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KHJlbGF0ZWRUYXJnZXQpO1xuXG4gICAgICB2YXIgZnJvbUluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5BQ1RJVkVfSVRFTSkpO1xuXG4gICAgICB2YXIgc2xpZGVFdmVudCA9ICQuRXZlbnQoRXZlbnQuU0xJREUsIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogcmVsYXRlZFRhcmdldCxcbiAgICAgICAgZGlyZWN0aW9uOiBldmVudERpcmVjdGlvbk5hbWUsXG4gICAgICAgIGZyb206IGZyb21JbmRleCxcbiAgICAgICAgdG86IHRhcmdldEluZGV4XG4gICAgICB9KTtcbiAgICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzbGlkZUV2ZW50KTtcbiAgICAgIHJldHVybiBzbGlkZUV2ZW50O1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQgPSBmdW5jdGlvbiBfc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudChlbGVtZW50KSB7XG4gICAgICBpZiAodGhpcy5faW5kaWNhdG9yc0VsZW1lbnQpIHtcbiAgICAgICAgdmFyIGluZGljYXRvcnMgPSBbXS5zbGljZS5jYWxsKHRoaXMuX2luZGljYXRvcnNFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IuQUNUSVZFKSk7XG4gICAgICAgICQoaW5kaWNhdG9ycykucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG5cbiAgICAgICAgdmFyIG5leHRJbmRpY2F0b3IgPSB0aGlzLl9pbmRpY2F0b3JzRWxlbWVudC5jaGlsZHJlblt0aGlzLl9nZXRJdGVtSW5kZXgoZWxlbWVudCldO1xuXG4gICAgICAgIGlmIChuZXh0SW5kaWNhdG9yKSB7XG4gICAgICAgICAgJChuZXh0SW5kaWNhdG9yKS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX3NsaWRlID0gZnVuY3Rpb24gX3NsaWRlKGRpcmVjdGlvbiwgZWxlbWVudCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIHZhciBhY3RpdmVFbGVtZW50ID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLkFDVElWRV9JVEVNKTtcblxuICAgICAgdmFyIGFjdGl2ZUVsZW1lbnRJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleChhY3RpdmVFbGVtZW50KTtcblxuICAgICAgdmFyIG5leHRFbGVtZW50ID0gZWxlbWVudCB8fCBhY3RpdmVFbGVtZW50ICYmIHRoaXMuX2dldEl0ZW1CeURpcmVjdGlvbihkaXJlY3Rpb24sIGFjdGl2ZUVsZW1lbnQpO1xuXG4gICAgICB2YXIgbmV4dEVsZW1lbnRJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleChuZXh0RWxlbWVudCk7XG5cbiAgICAgIHZhciBpc0N5Y2xpbmcgPSBCb29sZWFuKHRoaXMuX2ludGVydmFsKTtcbiAgICAgIHZhciBkaXJlY3Rpb25hbENsYXNzTmFtZTtcbiAgICAgIHZhciBvcmRlckNsYXNzTmFtZTtcbiAgICAgIHZhciBldmVudERpcmVjdGlvbk5hbWU7XG5cbiAgICAgIGlmIChkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5ORVhUKSB7XG4gICAgICAgIGRpcmVjdGlvbmFsQ2xhc3NOYW1lID0gQ2xhc3NOYW1lLkxFRlQ7XG4gICAgICAgIG9yZGVyQ2xhc3NOYW1lID0gQ2xhc3NOYW1lLk5FWFQ7XG4gICAgICAgIGV2ZW50RGlyZWN0aW9uTmFtZSA9IERpcmVjdGlvbi5MRUZUO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGlyZWN0aW9uYWxDbGFzc05hbWUgPSBDbGFzc05hbWUuUklHSFQ7XG4gICAgICAgIG9yZGVyQ2xhc3NOYW1lID0gQ2xhc3NOYW1lLlBSRVY7XG4gICAgICAgIGV2ZW50RGlyZWN0aW9uTmFtZSA9IERpcmVjdGlvbi5SSUdIVDtcbiAgICAgIH1cblxuICAgICAgaWYgKG5leHRFbGVtZW50ICYmICQobmV4dEVsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5BQ1RJVkUpKSB7XG4gICAgICAgIHRoaXMuX2lzU2xpZGluZyA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBzbGlkZUV2ZW50ID0gdGhpcy5fdHJpZ2dlclNsaWRlRXZlbnQobmV4dEVsZW1lbnQsIGV2ZW50RGlyZWN0aW9uTmFtZSk7XG5cbiAgICAgIGlmIChzbGlkZUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFhY3RpdmVFbGVtZW50IHx8ICFuZXh0RWxlbWVudCkge1xuICAgICAgICAvLyBTb21lIHdlaXJkbmVzcyBpcyBoYXBwZW5pbmcsIHNvIHdlIGJhaWxcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pc1NsaWRpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAoaXNDeWNsaW5nKSB7XG4gICAgICAgIHRoaXMucGF1c2UoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudChuZXh0RWxlbWVudCk7XG5cbiAgICAgIHZhciBzbGlkRXZlbnQgPSAkLkV2ZW50KEV2ZW50LlNMSUQsIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogbmV4dEVsZW1lbnQsXG4gICAgICAgIGRpcmVjdGlvbjogZXZlbnREaXJlY3Rpb25OYW1lLFxuICAgICAgICBmcm9tOiBhY3RpdmVFbGVtZW50SW5kZXgsXG4gICAgICAgIHRvOiBuZXh0RWxlbWVudEluZGV4XG4gICAgICB9KTtcblxuICAgICAgaWYgKCQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNMSURFKSkge1xuICAgICAgICAkKG5leHRFbGVtZW50KS5hZGRDbGFzcyhvcmRlckNsYXNzTmFtZSk7XG4gICAgICAgIFV0aWwucmVmbG93KG5leHRFbGVtZW50KTtcbiAgICAgICAgJChhY3RpdmVFbGVtZW50KS5hZGRDbGFzcyhkaXJlY3Rpb25hbENsYXNzTmFtZSk7XG4gICAgICAgICQobmV4dEVsZW1lbnQpLmFkZENsYXNzKGRpcmVjdGlvbmFsQ2xhc3NOYW1lKTtcbiAgICAgICAgdmFyIG5leHRFbGVtZW50SW50ZXJ2YWwgPSBwYXJzZUludChuZXh0RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW50ZXJ2YWwnKSwgMTApO1xuXG4gICAgICAgIGlmIChuZXh0RWxlbWVudEludGVydmFsKSB7XG4gICAgICAgICAgdGhpcy5fY29uZmlnLmRlZmF1bHRJbnRlcnZhbCA9IHRoaXMuX2NvbmZpZy5kZWZhdWx0SW50ZXJ2YWwgfHwgdGhpcy5fY29uZmlnLmludGVydmFsO1xuICAgICAgICAgIHRoaXMuX2NvbmZpZy5pbnRlcnZhbCA9IG5leHRFbGVtZW50SW50ZXJ2YWw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fY29uZmlnLmludGVydmFsID0gdGhpcy5fY29uZmlnLmRlZmF1bHRJbnRlcnZhbCB8fCB0aGlzLl9jb25maWcuaW50ZXJ2YWw7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudChhY3RpdmVFbGVtZW50KTtcbiAgICAgICAgJChhY3RpdmVFbGVtZW50KS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICQobmV4dEVsZW1lbnQpLnJlbW92ZUNsYXNzKGRpcmVjdGlvbmFsQ2xhc3NOYW1lICsgXCIgXCIgKyBvcmRlckNsYXNzTmFtZSkuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICAgICAgJChhY3RpdmVFbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQUNUSVZFICsgXCIgXCIgKyBvcmRlckNsYXNzTmFtZSArIFwiIFwiICsgZGlyZWN0aW9uYWxDbGFzc05hbWUpO1xuICAgICAgICAgIF90aGlzNC5faXNTbGlkaW5nID0gZmFsc2U7XG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJChfdGhpczQuX2VsZW1lbnQpLnRyaWdnZXIoc2xpZEV2ZW50KTtcbiAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfSkuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQoYWN0aXZlRWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICAgICQobmV4dEVsZW1lbnQpLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgICB0aGlzLl9pc1NsaWRpbmcgPSBmYWxzZTtcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHNsaWRFdmVudCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0N5Y2xpbmcpIHtcbiAgICAgICAgdGhpcy5jeWNsZSgpO1xuICAgICAgfVxuICAgIH0gLy8gU3RhdGljXG4gICAgO1xuXG4gICAgQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSAkKHRoaXMpLmRhdGEoREFUQV9LRVkpO1xuXG4gICAgICAgIHZhciBfY29uZmlnID0gX29iamVjdFNwcmVhZDIoe30sIERlZmF1bHQsIHt9LCAkKHRoaXMpLmRhdGEoKSk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgX2NvbmZpZyA9IF9vYmplY3RTcHJlYWQyKHt9LCBfY29uZmlnLCB7fSwgY29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhY3Rpb24gPSB0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJyA/IGNvbmZpZyA6IF9jb25maWcuc2xpZGU7XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBDYXJvdXNlbCh0aGlzLCBfY29uZmlnKTtcbiAgICAgICAgICAkKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgZGF0YS50byhjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2FjdGlvbl0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTm8gbWV0aG9kIG5hbWVkIFxcXCJcIiArIGFjdGlvbiArIFwiXFxcIlwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkYXRhW2FjdGlvbl0oKTtcbiAgICAgICAgfSBlbHNlIGlmIChfY29uZmlnLmludGVydmFsICYmIF9jb25maWcucmlkZSkge1xuICAgICAgICAgIGRhdGEucGF1c2UoKTtcbiAgICAgICAgICBkYXRhLmN5Y2xlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBDYXJvdXNlbC5fZGF0YUFwaUNsaWNrSGFuZGxlciA9IGZ1bmN0aW9uIF9kYXRhQXBpQ2xpY2tIYW5kbGVyKGV2ZW50KSB7XG4gICAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodGhpcyk7XG5cbiAgICAgIGlmICghc2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGFyZ2V0ID0gJChzZWxlY3RvcilbMF07XG5cbiAgICAgIGlmICghdGFyZ2V0IHx8ICEkKHRhcmdldCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkNBUk9VU0VMKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBjb25maWcgPSBfb2JqZWN0U3ByZWFkMih7fSwgJCh0YXJnZXQpLmRhdGEoKSwge30sICQodGhpcykuZGF0YSgpKTtcblxuICAgICAgdmFyIHNsaWRlSW5kZXggPSB0aGlzLmdldEF0dHJpYnV0ZSgnZGF0YS1zbGlkZS10bycpO1xuXG4gICAgICBpZiAoc2xpZGVJbmRleCkge1xuICAgICAgICBjb25maWcuaW50ZXJ2YWwgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZS5jYWxsKCQodGFyZ2V0KSwgY29uZmlnKTtcblxuICAgICAgaWYgKHNsaWRlSW5kZXgpIHtcbiAgICAgICAgJCh0YXJnZXQpLmRhdGEoREFUQV9LRVkpLnRvKHNsaWRlSW5kZXgpO1xuICAgICAgfVxuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoQ2Fyb3VzZWwsIG51bGwsIFt7XG4gICAgICBrZXk6IFwiVkVSU0lPTlwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEZWZhdWx0XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHQ7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIENhcm91c2VsO1xuICB9KCk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG5cbiAgJChkb2N1bWVudCkub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkRBVEFfU0xJREUsIENhcm91c2VsLl9kYXRhQXBpQ2xpY2tIYW5kbGVyKTtcbiAgJCh3aW5kb3cpLm9uKEV2ZW50LkxPQURfREFUQV9BUEksIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY2Fyb3VzZWxzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLkRBVEFfUklERSkpO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNhcm91c2Vscy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyICRjYXJvdXNlbCA9ICQoY2Fyb3VzZWxzW2ldKTtcblxuICAgICAgQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZS5jYWxsKCRjYXJvdXNlbCwgJGNhcm91c2VsLmRhdGEoKSk7XG4gICAgfVxuICB9KTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQuZm5bTkFNRV0gPSBDYXJvdXNlbC5falF1ZXJ5SW50ZXJmYWNlO1xuICAkLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gQ2Fyb3VzZWw7XG5cbiAgJC5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgcmV0dXJuIENhcm91c2VsLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgcmV0dXJuIENhcm91c2VsO1xuXG59KSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2Fyb3VzZWwuanMubWFwXG4iLCIvKiFcbiAgKiBCb290c3RyYXAgY29sbGFwc2UuanMgdjQuNC4xIChodHRwczovL2dldGJvb3RzdHJhcC5jb20vKVxuICAqIENvcHlyaWdodCAyMDExLTIwMTkgVGhlIEJvb3RzdHJhcCBBdXRob3JzIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvZ3JhcGhzL2NvbnRyaWJ1dG9ycylcbiAgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICAqL1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpLCByZXF1aXJlKCcuL3V0aWwuanMnKSkgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydqcXVlcnknLCAnLi91dGlsLmpzJ10sIGZhY3RvcnkpIDpcbiAgKGdsb2JhbCA9IGdsb2JhbCB8fCBzZWxmLCBnbG9iYWwuQ29sbGFwc2UgPSBmYWN0b3J5KGdsb2JhbC5qUXVlcnksIGdsb2JhbC5VdGlsKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoJCwgVXRpbCkgeyAndXNlIHN0cmljdCc7XG5cbiAgJCA9ICQgJiYgJC5oYXNPd25Qcm9wZXJ0eSgnZGVmYXVsdCcpID8gJFsnZGVmYXVsdCddIDogJDtcbiAgVXRpbCA9IFV0aWwgJiYgVXRpbC5oYXNPd25Qcm9wZXJ0eSgnZGVmYXVsdCcpID8gVXRpbFsnZGVmYXVsdCddIDogVXRpbDtcblxuICBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH1cblxuICBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgaWYgKGtleSBpbiBvYmopIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICBmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG4gICAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICAgICAgfSk7XG4gICAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGtleXM7XG4gIH1cblxuICBmdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG5cbiAgICAgIGlmIChpICUgMikge1xuICAgICAgICBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29uc3RhbnRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgTkFNRSA9ICdjb2xsYXBzZSc7XG4gIHZhciBWRVJTSU9OID0gJzQuNC4xJztcbiAgdmFyIERBVEFfS0VZID0gJ2JzLmNvbGxhcHNlJztcbiAgdmFyIEVWRU5UX0tFWSA9IFwiLlwiICsgREFUQV9LRVk7XG4gIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJztcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCA9ICQuZm5bTkFNRV07XG4gIHZhciBEZWZhdWx0ID0ge1xuICAgIHRvZ2dsZTogdHJ1ZSxcbiAgICBwYXJlbnQ6ICcnXG4gIH07XG4gIHZhciBEZWZhdWx0VHlwZSA9IHtcbiAgICB0b2dnbGU6ICdib29sZWFuJyxcbiAgICBwYXJlbnQ6ICcoc3RyaW5nfGVsZW1lbnQpJ1xuICB9O1xuICB2YXIgRXZlbnQgPSB7XG4gICAgU0hPVzogXCJzaG93XCIgKyBFVkVOVF9LRVksXG4gICAgU0hPV046IFwic2hvd25cIiArIEVWRU5UX0tFWSxcbiAgICBISURFOiBcImhpZGVcIiArIEVWRU5UX0tFWSxcbiAgICBISURERU46IFwiaGlkZGVuXCIgKyBFVkVOVF9LRVksXG4gICAgQ0xJQ0tfREFUQV9BUEk6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWVxuICB9O1xuICB2YXIgQ2xhc3NOYW1lID0ge1xuICAgIFNIT1c6ICdzaG93JyxcbiAgICBDT0xMQVBTRTogJ2NvbGxhcHNlJyxcbiAgICBDT0xMQVBTSU5HOiAnY29sbGFwc2luZycsXG4gICAgQ09MTEFQU0VEOiAnY29sbGFwc2VkJ1xuICB9O1xuICB2YXIgRGltZW5zaW9uID0ge1xuICAgIFdJRFRIOiAnd2lkdGgnLFxuICAgIEhFSUdIVDogJ2hlaWdodCdcbiAgfTtcbiAgdmFyIFNlbGVjdG9yID0ge1xuICAgIEFDVElWRVM6ICcuc2hvdywgLmNvbGxhcHNpbmcnLFxuICAgIERBVEFfVE9HR0xFOiAnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl0nXG4gIH07XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIENvbGxhcHNlID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29sbGFwc2UoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgICB0aGlzLl90cmlnZ2VyQXJyYXkgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS10b2dnbGU9XFxcImNvbGxhcHNlXFxcIl1baHJlZj1cXFwiI1wiICsgZWxlbWVudC5pZCArIFwiXFxcIl0sXCIgKyAoXCJbZGF0YS10b2dnbGU9XFxcImNvbGxhcHNlXFxcIl1bZGF0YS10YXJnZXQ9XFxcIiNcIiArIGVsZW1lbnQuaWQgKyBcIlxcXCJdXCIpKSk7XG4gICAgICB2YXIgdG9nZ2xlTGlzdCA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5EQVRBX1RPR0dMRSkpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdG9nZ2xlTGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICB2YXIgZWxlbSA9IHRvZ2dsZUxpc3RbaV07XG4gICAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtKTtcbiAgICAgICAgdmFyIGZpbHRlckVsZW1lbnQgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKS5maWx0ZXIoZnVuY3Rpb24gKGZvdW5kRWxlbSkge1xuICAgICAgICAgIHJldHVybiBmb3VuZEVsZW0gPT09IGVsZW1lbnQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChzZWxlY3RvciAhPT0gbnVsbCAmJiBmaWx0ZXJFbGVtZW50Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB0aGlzLl9zZWxlY3RvciA9IHNlbGVjdG9yO1xuXG4gICAgICAgICAgdGhpcy5fdHJpZ2dlckFycmF5LnB1c2goZWxlbSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fcGFyZW50ID0gdGhpcy5fY29uZmlnLnBhcmVudCA/IHRoaXMuX2dldFBhcmVudCgpIDogbnVsbDtcblxuICAgICAgaWYgKCF0aGlzLl9jb25maWcucGFyZW50KSB7XG4gICAgICAgIHRoaXMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyh0aGlzLl9lbGVtZW50LCB0aGlzLl90cmlnZ2VyQXJyYXkpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLnRvZ2dsZSkge1xuICAgICAgICB0aGlzLnRvZ2dsZSgpO1xuICAgICAgfVxuICAgIH0gLy8gR2V0dGVyc1xuXG5cbiAgICB2YXIgX3Byb3RvID0gQ29sbGFwc2UucHJvdG90eXBlO1xuXG4gICAgLy8gUHVibGljXG4gICAgX3Byb3RvLnRvZ2dsZSA9IGZ1bmN0aW9uIHRvZ2dsZSgpIHtcbiAgICAgIGlmICgkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uc2hvdyA9IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uaW5nIHx8ICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGFjdGl2ZXM7XG4gICAgICB2YXIgYWN0aXZlc0RhdGE7XG5cbiAgICAgIGlmICh0aGlzLl9wYXJlbnQpIHtcbiAgICAgICAgYWN0aXZlcyA9IFtdLnNsaWNlLmNhbGwodGhpcy5fcGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IuQUNUSVZFUykpLmZpbHRlcihmdW5jdGlvbiAoZWxlbSkge1xuICAgICAgICAgIGlmICh0eXBlb2YgX3RoaXMuX2NvbmZpZy5wYXJlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGFyZW50JykgPT09IF90aGlzLl9jb25maWcucGFyZW50O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBlbGVtLmNsYXNzTGlzdC5jb250YWlucyhDbGFzc05hbWUuQ09MTEFQU0UpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoYWN0aXZlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBhY3RpdmVzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYWN0aXZlcykge1xuICAgICAgICBhY3RpdmVzRGF0YSA9ICQoYWN0aXZlcykubm90KHRoaXMuX3NlbGVjdG9yKS5kYXRhKERBVEFfS0VZKTtcblxuICAgICAgICBpZiAoYWN0aXZlc0RhdGEgJiYgYWN0aXZlc0RhdGEuX2lzVHJhbnNpdGlvbmluZykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgc3RhcnRFdmVudCA9ICQuRXZlbnQoRXZlbnQuU0hPVyk7XG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc3RhcnRFdmVudCk7XG5cbiAgICAgIGlmIChzdGFydEV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGFjdGl2ZXMpIHtcbiAgICAgICAgQ29sbGFwc2UuX2pRdWVyeUludGVyZmFjZS5jYWxsKCQoYWN0aXZlcykubm90KHRoaXMuX3NlbGVjdG9yKSwgJ2hpZGUnKTtcblxuICAgICAgICBpZiAoIWFjdGl2ZXNEYXRhKSB7XG4gICAgICAgICAgJChhY3RpdmVzKS5kYXRhKERBVEFfS0VZLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgZGltZW5zaW9uID0gdGhpcy5fZ2V0RGltZW5zaW9uKCk7XG5cbiAgICAgICQodGhpcy5fZWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNFKS5hZGRDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0lORyk7XG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSAwO1xuXG4gICAgICBpZiAodGhpcy5fdHJpZ2dlckFycmF5Lmxlbmd0aCkge1xuICAgICAgICAkKHRoaXMuX3RyaWdnZXJBcnJheSkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNFRCkuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNldFRyYW5zaXRpb25pbmcodHJ1ZSk7XG5cbiAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICAkKF90aGlzLl9lbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0lORykuYWRkQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNFKS5hZGRDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG4gICAgICAgIF90aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSAnJztcblxuICAgICAgICBfdGhpcy5zZXRUcmFuc2l0aW9uaW5nKGZhbHNlKTtcblxuICAgICAgICAkKF90aGlzLl9lbGVtZW50KS50cmlnZ2VyKEV2ZW50LlNIT1dOKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBjYXBpdGFsaXplZERpbWVuc2lvbiA9IGRpbWVuc2lvblswXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKDEpO1xuICAgICAgdmFyIHNjcm9sbFNpemUgPSBcInNjcm9sbFwiICsgY2FwaXRhbGl6ZWREaW1lbnNpb247XG4gICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtcbiAgICAgICQodGhpcy5fZWxlbWVudCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gdGhpcy5fZWxlbWVudFtzY3JvbGxTaXplXSArIFwicHhcIjtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmhpZGUgPSBmdW5jdGlvbiBoaWRlKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLl9pc1RyYW5zaXRpb25pbmcgfHwgISQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHN0YXJ0RXZlbnQgPSAkLkV2ZW50KEV2ZW50LkhJREUpO1xuICAgICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHN0YXJ0RXZlbnQpO1xuXG4gICAgICBpZiAoc3RhcnRFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBkaW1lbnNpb24gPSB0aGlzLl9nZXREaW1lbnNpb24oKTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gdGhpcy5fZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtkaW1lbnNpb25dICsgXCJweFwiO1xuICAgICAgVXRpbC5yZWZsb3codGhpcy5fZWxlbWVudCk7XG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLmFkZENsYXNzKENsYXNzTmFtZS5DT0xMQVBTSU5HKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0UpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKTtcbiAgICAgIHZhciB0cmlnZ2VyQXJyYXlMZW5ndGggPSB0aGlzLl90cmlnZ2VyQXJyYXkubGVuZ3RoO1xuXG4gICAgICBpZiAodHJpZ2dlckFycmF5TGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyaWdnZXJBcnJheUxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIHRyaWdnZXIgPSB0aGlzLl90cmlnZ2VyQXJyYXlbaV07XG4gICAgICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KHRyaWdnZXIpO1xuXG4gICAgICAgICAgaWYgKHNlbGVjdG9yICE9PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgJGVsZW0gPSAkKFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpKTtcblxuICAgICAgICAgICAgaWYgKCEkZWxlbS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykpIHtcbiAgICAgICAgICAgICAgJCh0cmlnZ2VyKS5hZGRDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0VEKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnNldFRyYW5zaXRpb25pbmcodHJ1ZSk7XG5cbiAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICBfdGhpczIuc2V0VHJhbnNpdGlvbmluZyhmYWxzZSk7XG5cbiAgICAgICAgJChfdGhpczIuX2VsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTSU5HKS5hZGRDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0UpLnRyaWdnZXIoRXZlbnQuSElEREVOKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9ICcnO1xuICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSkuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnNldFRyYW5zaXRpb25pbmcgPSBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uaW5nKGlzVHJhbnNpdGlvbmluZykge1xuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gaXNUcmFuc2l0aW9uaW5nO1xuICAgIH07XG5cbiAgICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAkLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpO1xuICAgICAgdGhpcy5fY29uZmlnID0gbnVsbDtcbiAgICAgIHRoaXMuX3BhcmVudCA9IG51bGw7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX3RyaWdnZXJBcnJheSA9IG51bGw7XG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBudWxsO1xuICAgIH0gLy8gUHJpdmF0ZVxuICAgIDtcblxuICAgIF9wcm90by5fZ2V0Q29uZmlnID0gZnVuY3Rpb24gX2dldENvbmZpZyhjb25maWcpIHtcbiAgICAgIGNvbmZpZyA9IF9vYmplY3RTcHJlYWQyKHt9LCBEZWZhdWx0LCB7fSwgY29uZmlnKTtcbiAgICAgIGNvbmZpZy50b2dnbGUgPSBCb29sZWFuKGNvbmZpZy50b2dnbGUpOyAvLyBDb2VyY2Ugc3RyaW5nIHZhbHVlc1xuXG4gICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FLCBjb25maWcsIERlZmF1bHRUeXBlKTtcbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0RGltZW5zaW9uID0gZnVuY3Rpb24gX2dldERpbWVuc2lvbigpIHtcbiAgICAgIHZhciBoYXNXaWR0aCA9ICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoRGltZW5zaW9uLldJRFRIKTtcbiAgICAgIHJldHVybiBoYXNXaWR0aCA/IERpbWVuc2lvbi5XSURUSCA6IERpbWVuc2lvbi5IRUlHSFQ7XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0UGFyZW50ID0gZnVuY3Rpb24gX2dldFBhcmVudCgpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgcGFyZW50O1xuXG4gICAgICBpZiAoVXRpbC5pc0VsZW1lbnQodGhpcy5fY29uZmlnLnBhcmVudCkpIHtcbiAgICAgICAgcGFyZW50ID0gdGhpcy5fY29uZmlnLnBhcmVudDsgLy8gSXQncyBhIGpRdWVyeSBvYmplY3RcblxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX2NvbmZpZy5wYXJlbnQuanF1ZXJ5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHBhcmVudCA9IHRoaXMuX2NvbmZpZy5wYXJlbnRbMF07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5fY29uZmlnLnBhcmVudCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBzZWxlY3RvciA9IFwiW2RhdGEtdG9nZ2xlPVxcXCJjb2xsYXBzZVxcXCJdW2RhdGEtcGFyZW50PVxcXCJcIiArIHRoaXMuX2NvbmZpZy5wYXJlbnQgKyBcIlxcXCJdXCI7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBbXS5zbGljZS5jYWxsKHBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7XG4gICAgICAkKGNoaWxkcmVuKS5lYWNoKGZ1bmN0aW9uIChpLCBlbGVtZW50KSB7XG4gICAgICAgIF90aGlzMy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKENvbGxhcHNlLl9nZXRUYXJnZXRGcm9tRWxlbWVudChlbGVtZW50KSwgW2VsZW1lbnRdKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHBhcmVudDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MgPSBmdW5jdGlvbiBfYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKGVsZW1lbnQsIHRyaWdnZXJBcnJheSkge1xuICAgICAgdmFyIGlzT3BlbiA9ICQoZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuXG4gICAgICBpZiAodHJpZ2dlckFycmF5Lmxlbmd0aCkge1xuICAgICAgICAkKHRyaWdnZXJBcnJheSkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNFRCwgIWlzT3BlbikuYXR0cignYXJpYS1leHBhbmRlZCcsIGlzT3Blbik7XG4gICAgICB9XG4gICAgfSAvLyBTdGF0aWNcbiAgICA7XG5cbiAgICBDb2xsYXBzZS5fZ2V0VGFyZ2V0RnJvbUVsZW1lbnQgPSBmdW5jdGlvbiBfZ2V0VGFyZ2V0RnJvbUVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpO1xuICAgICAgcmV0dXJuIHNlbGVjdG9yID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikgOiBudWxsO1xuICAgIH07XG5cbiAgICBDb2xsYXBzZS5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xuICAgICAgICB2YXIgZGF0YSA9ICR0aGlzLmRhdGEoREFUQV9LRVkpO1xuXG4gICAgICAgIHZhciBfY29uZmlnID0gX29iamVjdFNwcmVhZDIoe30sIERlZmF1bHQsIHt9LCAkdGhpcy5kYXRhKCksIHt9LCB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyAmJiBjb25maWcgPyBjb25maWcgOiB7fSk7XG5cbiAgICAgICAgaWYgKCFkYXRhICYmIF9jb25maWcudG9nZ2xlICYmIC9zaG93fGhpZGUvLnRlc3QoY29uZmlnKSkge1xuICAgICAgICAgIF9jb25maWcudG9nZ2xlID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IENvbGxhcHNlKHRoaXMsIF9jb25maWcpO1xuICAgICAgICAgICR0aGlzLmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTm8gbWV0aG9kIG5hbWVkIFxcXCJcIiArIGNvbmZpZyArIFwiXFxcIlwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhDb2xsYXBzZSwgbnVsbCwgW3tcbiAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT047XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQ29sbGFwc2U7XG4gIH0oKTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cblxuICAkKGRvY3VtZW50KS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vIHByZXZlbnREZWZhdWx0IG9ubHkgZm9yIDxhPiBlbGVtZW50cyAod2hpY2ggY2hhbmdlIHRoZSBVUkwpIG5vdCBpbnNpZGUgdGhlIGNvbGxhcHNpYmxlIGVsZW1lbnRcbiAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldC50YWdOYW1lID09PSAnQScpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgdmFyICR0cmlnZ2VyID0gJCh0aGlzKTtcbiAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodGhpcyk7XG4gICAgdmFyIHNlbGVjdG9ycyA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpO1xuICAgICQoc2VsZWN0b3JzKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGFyZ2V0ID0gJCh0aGlzKTtcbiAgICAgIHZhciBkYXRhID0gJHRhcmdldC5kYXRhKERBVEFfS0VZKTtcbiAgICAgIHZhciBjb25maWcgPSBkYXRhID8gJ3RvZ2dsZScgOiAkdHJpZ2dlci5kYXRhKCk7XG5cbiAgICAgIENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkdGFyZ2V0LCBjb25maWcpO1xuICAgIH0pO1xuICB9KTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQuZm5bTkFNRV0gPSBDb2xsYXBzZS5falF1ZXJ5SW50ZXJmYWNlO1xuICAkLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gQ29sbGFwc2U7XG5cbiAgJC5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgcmV0dXJuIENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgcmV0dXJuIENvbGxhcHNlO1xuXG59KSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29sbGFwc2UuanMubWFwXG4iLCIvKiFcbiAgKiBCb290c3RyYXAgZHJvcGRvd24uanMgdjQuNC4xIChodHRwczovL2dldGJvb3RzdHJhcC5jb20vKVxuICAqIENvcHlyaWdodCAyMDExLTIwMTkgVGhlIEJvb3RzdHJhcCBBdXRob3JzIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvZ3JhcGhzL2NvbnRyaWJ1dG9ycylcbiAgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICAqL1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpLCByZXF1aXJlKCdwb3BwZXIuanMnKSwgcmVxdWlyZSgnLi91dGlsLmpzJykpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnanF1ZXJ5JywgJ3BvcHBlci5qcycsICcuL3V0aWwuanMnXSwgZmFjdG9yeSkgOlxuICAoZ2xvYmFsID0gZ2xvYmFsIHx8IHNlbGYsIGdsb2JhbC5Ecm9wZG93biA9IGZhY3RvcnkoZ2xvYmFsLmpRdWVyeSwgZ2xvYmFsLlBvcHBlciwgZ2xvYmFsLlV0aWwpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgkLCBQb3BwZXIsIFV0aWwpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICQgPSAkICYmICQuaGFzT3duUHJvcGVydHkoJ2RlZmF1bHQnKSA/ICRbJ2RlZmF1bHQnXSA6ICQ7XG4gIFBvcHBlciA9IFBvcHBlciAmJiBQb3BwZXIuaGFzT3duUHJvcGVydHkoJ2RlZmF1bHQnKSA/IFBvcHBlclsnZGVmYXVsdCddIDogUG9wcGVyO1xuICBVdGlsID0gVXRpbCAmJiBVdGlsLmhhc093blByb3BlcnR5KCdkZWZhdWx0JykgPyBVdGlsWydkZWZhdWx0J10gOiBVdGlsO1xuXG4gIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBpZiAoa2V5IGluIG9iaikge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ialtrZXldID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIGZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcbiAgICAgIGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgICB9KTtcbiAgICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTtcbiAgICB9XG5cbiAgICByZXR1cm4ga2V5cztcbiAgfVxuXG4gIGZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcblxuICAgICAgaWYgKGkgJSAyKSB7XG4gICAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBOQU1FID0gJ2Ryb3Bkb3duJztcbiAgdmFyIFZFUlNJT04gPSAnNC40LjEnO1xuICB2YXIgREFUQV9LRVkgPSAnYnMuZHJvcGRvd24nO1xuICB2YXIgRVZFTlRfS0VZID0gXCIuXCIgKyBEQVRBX0tFWTtcbiAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJC5mbltOQU1FXTtcbiAgdmFyIEVTQ0FQRV9LRVlDT0RFID0gMjc7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIEVzY2FwZSAoRXNjKSBrZXlcblxuICB2YXIgU1BBQ0VfS0VZQ09ERSA9IDMyOyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBzcGFjZSBrZXlcblxuICB2YXIgVEFCX0tFWUNPREUgPSA5OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciB0YWIga2V5XG5cbiAgdmFyIEFSUk9XX1VQX0tFWUNPREUgPSAzODsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgdXAgYXJyb3cga2V5XG5cbiAgdmFyIEFSUk9XX0RPV05fS0VZQ09ERSA9IDQwOyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBkb3duIGFycm93IGtleVxuXG4gIHZhciBSSUdIVF9NT1VTRV9CVVRUT05fV0hJQ0ggPSAzOyAvLyBNb3VzZUV2ZW50LndoaWNoIHZhbHVlIGZvciB0aGUgcmlnaHQgYnV0dG9uIChhc3N1bWluZyBhIHJpZ2h0LWhhbmRlZCBtb3VzZSlcblxuICB2YXIgUkVHRVhQX0tFWURPV04gPSBuZXcgUmVnRXhwKEFSUk9XX1VQX0tFWUNPREUgKyBcInxcIiArIEFSUk9XX0RPV05fS0VZQ09ERSArIFwifFwiICsgRVNDQVBFX0tFWUNPREUpO1xuICB2YXIgRXZlbnQgPSB7XG4gICAgSElERTogXCJoaWRlXCIgKyBFVkVOVF9LRVksXG4gICAgSElEREVOOiBcImhpZGRlblwiICsgRVZFTlRfS0VZLFxuICAgIFNIT1c6IFwic2hvd1wiICsgRVZFTlRfS0VZLFxuICAgIFNIT1dOOiBcInNob3duXCIgKyBFVkVOVF9LRVksXG4gICAgQ0xJQ0s6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSxcbiAgICBDTElDS19EQVRBX0FQSTogXCJjbGlja1wiICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZLFxuICAgIEtFWURPV05fREFUQV9BUEk6IFwia2V5ZG93blwiICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZLFxuICAgIEtFWVVQX0RBVEFfQVBJOiBcImtleXVwXCIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVlcbiAgfTtcbiAgdmFyIENsYXNzTmFtZSA9IHtcbiAgICBESVNBQkxFRDogJ2Rpc2FibGVkJyxcbiAgICBTSE9XOiAnc2hvdycsXG4gICAgRFJPUFVQOiAnZHJvcHVwJyxcbiAgICBEUk9QUklHSFQ6ICdkcm9wcmlnaHQnLFxuICAgIERST1BMRUZUOiAnZHJvcGxlZnQnLFxuICAgIE1FTlVSSUdIVDogJ2Ryb3Bkb3duLW1lbnUtcmlnaHQnLFxuICAgIE1FTlVMRUZUOiAnZHJvcGRvd24tbWVudS1sZWZ0JyxcbiAgICBQT1NJVElPTl9TVEFUSUM6ICdwb3NpdGlvbi1zdGF0aWMnXG4gIH07XG4gIHZhciBTZWxlY3RvciA9IHtcbiAgICBEQVRBX1RPR0dMRTogJ1tkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCJdJyxcbiAgICBGT1JNX0NISUxEOiAnLmRyb3Bkb3duIGZvcm0nLFxuICAgIE1FTlU6ICcuZHJvcGRvd24tbWVudScsXG4gICAgTkFWQkFSX05BVjogJy5uYXZiYXItbmF2JyxcbiAgICBWSVNJQkxFX0lURU1TOiAnLmRyb3Bkb3duLW1lbnUgLmRyb3Bkb3duLWl0ZW06bm90KC5kaXNhYmxlZCk6bm90KDpkaXNhYmxlZCknXG4gIH07XG4gIHZhciBBdHRhY2htZW50TWFwID0ge1xuICAgIFRPUDogJ3RvcC1zdGFydCcsXG4gICAgVE9QRU5EOiAndG9wLWVuZCcsXG4gICAgQk9UVE9NOiAnYm90dG9tLXN0YXJ0JyxcbiAgICBCT1RUT01FTkQ6ICdib3R0b20tZW5kJyxcbiAgICBSSUdIVDogJ3JpZ2h0LXN0YXJ0JyxcbiAgICBSSUdIVEVORDogJ3JpZ2h0LWVuZCcsXG4gICAgTEVGVDogJ2xlZnQtc3RhcnQnLFxuICAgIExFRlRFTkQ6ICdsZWZ0LWVuZCdcbiAgfTtcbiAgdmFyIERlZmF1bHQgPSB7XG4gICAgb2Zmc2V0OiAwLFxuICAgIGZsaXA6IHRydWUsXG4gICAgYm91bmRhcnk6ICdzY3JvbGxQYXJlbnQnLFxuICAgIHJlZmVyZW5jZTogJ3RvZ2dsZScsXG4gICAgZGlzcGxheTogJ2R5bmFtaWMnLFxuICAgIHBvcHBlckNvbmZpZzogbnVsbFxuICB9O1xuICB2YXIgRGVmYXVsdFR5cGUgPSB7XG4gICAgb2Zmc2V0OiAnKG51bWJlcnxzdHJpbmd8ZnVuY3Rpb24pJyxcbiAgICBmbGlwOiAnYm9vbGVhbicsXG4gICAgYm91bmRhcnk6ICcoc3RyaW5nfGVsZW1lbnQpJyxcbiAgICByZWZlcmVuY2U6ICcoc3RyaW5nfGVsZW1lbnQpJyxcbiAgICBkaXNwbGF5OiAnc3RyaW5nJyxcbiAgICBwb3BwZXJDb25maWc6ICcobnVsbHxvYmplY3QpJ1xuICB9O1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENsYXNzIERlZmluaXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBEcm9wZG93biA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERyb3Bkb3duKGVsZW1lbnQsIGNvbmZpZykge1xuICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLl9wb3BwZXIgPSBudWxsO1xuICAgICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgICB0aGlzLl9tZW51ID0gdGhpcy5fZ2V0TWVudUVsZW1lbnQoKTtcbiAgICAgIHRoaXMuX2luTmF2YmFyID0gdGhpcy5fZGV0ZWN0TmF2YmFyKCk7XG5cbiAgICAgIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfSAvLyBHZXR0ZXJzXG5cblxuICAgIHZhciBfcHJvdG8gPSBEcm9wZG93bi5wcm90b3R5cGU7XG5cbiAgICAvLyBQdWJsaWNcbiAgICBfcHJvdG8udG9nZ2xlID0gZnVuY3Rpb24gdG9nZ2xlKCkge1xuICAgICAgaWYgKHRoaXMuX2VsZW1lbnQuZGlzYWJsZWQgfHwgJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRElTQUJMRUQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGlzQWN0aXZlID0gJCh0aGlzLl9tZW51KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cbiAgICAgIERyb3Bkb3duLl9jbGVhck1lbnVzKCk7XG5cbiAgICAgIGlmIChpc0FjdGl2ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2hvdyh0cnVlKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnNob3cgPSBmdW5jdGlvbiBzaG93KHVzZVBvcHBlcikge1xuICAgICAgaWYgKHVzZVBvcHBlciA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHVzZVBvcHBlciA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fZWxlbWVudC5kaXNhYmxlZCB8fCAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5ESVNBQkxFRCkgfHwgJCh0aGlzLl9tZW51KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVsYXRlZFRhcmdldCA9IHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogdGhpcy5fZWxlbWVudFxuICAgICAgfTtcbiAgICAgIHZhciBzaG93RXZlbnQgPSAkLkV2ZW50KEV2ZW50LlNIT1csIHJlbGF0ZWRUYXJnZXQpO1xuXG4gICAgICB2YXIgcGFyZW50ID0gRHJvcGRvd24uX2dldFBhcmVudEZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO1xuXG4gICAgICAkKHBhcmVudCkudHJpZ2dlcihzaG93RXZlbnQpO1xuXG4gICAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gRGlzYWJsZSB0b3RhbGx5IFBvcHBlci5qcyBmb3IgRHJvcGRvd24gaW4gTmF2YmFyXG5cblxuICAgICAgaWYgKCF0aGlzLl9pbk5hdmJhciAmJiB1c2VQb3BwZXIpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENoZWNrIGZvciBQb3BwZXIgZGVwZW5kZW5jeVxuICAgICAgICAgKiBQb3BwZXIgLSBodHRwczovL3BvcHBlci5qcy5vcmdcbiAgICAgICAgICovXG4gICAgICAgIGlmICh0eXBlb2YgUG9wcGVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Jvb3RzdHJhcFxcJ3MgZHJvcGRvd25zIHJlcXVpcmUgUG9wcGVyLmpzIChodHRwczovL3BvcHBlci5qcy5vcmcvKScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlZmVyZW5jZUVsZW1lbnQgPSB0aGlzLl9lbGVtZW50O1xuXG4gICAgICAgIGlmICh0aGlzLl9jb25maWcucmVmZXJlbmNlID09PSAncGFyZW50Jykge1xuICAgICAgICAgIHJlZmVyZW5jZUVsZW1lbnQgPSBwYXJlbnQ7XG4gICAgICAgIH0gZWxzZSBpZiAoVXRpbC5pc0VsZW1lbnQodGhpcy5fY29uZmlnLnJlZmVyZW5jZSkpIHtcbiAgICAgICAgICByZWZlcmVuY2VFbGVtZW50ID0gdGhpcy5fY29uZmlnLnJlZmVyZW5jZTsgLy8gQ2hlY2sgaWYgaXQncyBqUXVlcnkgZWxlbWVudFxuXG4gICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9jb25maWcucmVmZXJlbmNlLmpxdWVyeSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJlZmVyZW5jZUVsZW1lbnQgPSB0aGlzLl9jb25maWcucmVmZXJlbmNlWzBdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBJZiBib3VuZGFyeSBpcyBub3QgYHNjcm9sbFBhcmVudGAsIHRoZW4gc2V0IHBvc2l0aW9uIHRvIGBzdGF0aWNgXG4gICAgICAgIC8vIHRvIGFsbG93IHRoZSBtZW51IHRvIFwiZXNjYXBlXCIgdGhlIHNjcm9sbCBwYXJlbnQncyBib3VuZGFyaWVzXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9pc3N1ZXMvMjQyNTFcblxuXG4gICAgICAgIGlmICh0aGlzLl9jb25maWcuYm91bmRhcnkgIT09ICdzY3JvbGxQYXJlbnQnKSB7XG4gICAgICAgICAgJChwYXJlbnQpLmFkZENsYXNzKENsYXNzTmFtZS5QT1NJVElPTl9TVEFUSUMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcG9wcGVyID0gbmV3IFBvcHBlcihyZWZlcmVuY2VFbGVtZW50LCB0aGlzLl9tZW51LCB0aGlzLl9nZXRQb3BwZXJDb25maWcoKSk7XG4gICAgICB9IC8vIElmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSBhZGQgZXh0cmFcbiAgICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgdG8gdGhlIGJvZHkncyBpbW1lZGlhdGUgY2hpbGRyZW47XG4gICAgICAvLyBvbmx5IG5lZWRlZCBiZWNhdXNlIG9mIGJyb2tlbiBldmVudCBkZWxlZ2F0aW9uIG9uIGlPU1xuICAgICAgLy8gaHR0cHM6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDE0LzAyL21vdXNlX2V2ZW50X2J1Yi5odG1sXG5cblxuICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiAkKHBhcmVudCkuY2xvc2VzdChTZWxlY3Rvci5OQVZCQVJfTkFWKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgJChkb2N1bWVudC5ib2R5KS5jaGlsZHJlbigpLm9uKCdtb3VzZW92ZXInLCBudWxsLCAkLm5vb3ApO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9lbGVtZW50LmZvY3VzKCk7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XG5cbiAgICAgICQodGhpcy5fbWVudSkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuICAgICAgJChwYXJlbnQpLnRvZ2dsZUNsYXNzKENsYXNzTmFtZS5TSE9XKS50cmlnZ2VyKCQuRXZlbnQoRXZlbnQuU0hPV04sIHJlbGF0ZWRUYXJnZXQpKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmhpZGUgPSBmdW5jdGlvbiBoaWRlKCkge1xuICAgICAgaWYgKHRoaXMuX2VsZW1lbnQuZGlzYWJsZWQgfHwgJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRElTQUJMRUQpIHx8ICEkKHRoaXMuX21lbnUpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciByZWxhdGVkVGFyZ2V0ID0ge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50XG4gICAgICB9O1xuICAgICAgdmFyIGhpZGVFdmVudCA9ICQuRXZlbnQoRXZlbnQuSElERSwgcmVsYXRlZFRhcmdldCk7XG5cbiAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG5cbiAgICAgICQocGFyZW50KS50cmlnZ2VyKGhpZGVFdmVudCk7XG5cbiAgICAgIGlmIChoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fcG9wcGVyKSB7XG4gICAgICAgIHRoaXMuX3BvcHBlci5kZXN0cm95KCk7XG4gICAgICB9XG5cbiAgICAgICQodGhpcy5fbWVudSkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuICAgICAgJChwYXJlbnQpLnRvZ2dsZUNsYXNzKENsYXNzTmFtZS5TSE9XKS50cmlnZ2VyKCQuRXZlbnQoRXZlbnQuSElEREVOLCByZWxhdGVkVGFyZ2V0KSk7XG4gICAgfTtcblxuICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSk7XG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLm9mZihFVkVOVF9LRVkpO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLl9tZW51ID0gbnVsbDtcblxuICAgICAgaWYgKHRoaXMuX3BvcHBlciAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9wb3BwZXIuZGVzdHJveSgpO1xuXG4gICAgICAgIHRoaXMuX3BvcHBlciA9IG51bGw7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICB0aGlzLl9pbk5hdmJhciA9IHRoaXMuX2RldGVjdE5hdmJhcigpO1xuXG4gICAgICBpZiAodGhpcy5fcG9wcGVyICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX3BvcHBlci5zY2hlZHVsZVVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH0gLy8gUHJpdmF0ZVxuICAgIDtcblxuICAgIF9wcm90by5fYWRkRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBfYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50LkNMSUNLLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgX3RoaXMudG9nZ2xlKCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRDb25maWcgPSBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgICAgY29uZmlnID0gX29iamVjdFNwcmVhZDIoe30sIHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdCwge30sICQodGhpcy5fZWxlbWVudCkuZGF0YSgpLCB7fSwgY29uZmlnKTtcbiAgICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0VHlwZSk7XG4gICAgICByZXR1cm4gY29uZmlnO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldE1lbnVFbGVtZW50ID0gZnVuY3Rpb24gX2dldE1lbnVFbGVtZW50KCkge1xuICAgICAgaWYgKCF0aGlzLl9tZW51KSB7XG4gICAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG5cbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgIHRoaXMuX21lbnUgPSBwYXJlbnQucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5NRU5VKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fbWVudTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRQbGFjZW1lbnQgPSBmdW5jdGlvbiBfZ2V0UGxhY2VtZW50KCkge1xuICAgICAgdmFyICRwYXJlbnREcm9wZG93biA9ICQodGhpcy5fZWxlbWVudC5wYXJlbnROb2RlKTtcbiAgICAgIHZhciBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLkJPVFRPTTsgLy8gSGFuZGxlIGRyb3B1cFxuXG4gICAgICBpZiAoJHBhcmVudERyb3Bkb3duLmhhc0NsYXNzKENsYXNzTmFtZS5EUk9QVVApKSB7XG4gICAgICAgIHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuVE9QO1xuXG4gICAgICAgIGlmICgkKHRoaXMuX21lbnUpLmhhc0NsYXNzKENsYXNzTmFtZS5NRU5VUklHSFQpKSB7XG4gICAgICAgICAgcGxhY2VtZW50ID0gQXR0YWNobWVudE1hcC5UT1BFTkQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoJHBhcmVudERyb3Bkb3duLmhhc0NsYXNzKENsYXNzTmFtZS5EUk9QUklHSFQpKSB7XG4gICAgICAgIHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuUklHSFQ7XG4gICAgICB9IGVsc2UgaWYgKCRwYXJlbnREcm9wZG93bi5oYXNDbGFzcyhDbGFzc05hbWUuRFJPUExFRlQpKSB7XG4gICAgICAgIHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuTEVGVDtcbiAgICAgIH0gZWxzZSBpZiAoJCh0aGlzLl9tZW51KS5oYXNDbGFzcyhDbGFzc05hbWUuTUVOVVJJR0hUKSkge1xuICAgICAgICBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLkJPVFRPTUVORDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBsYWNlbWVudDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9kZXRlY3ROYXZiYXIgPSBmdW5jdGlvbiBfZGV0ZWN0TmF2YmFyKCkge1xuICAgICAgcmV0dXJuICQodGhpcy5fZWxlbWVudCkuY2xvc2VzdCgnLm5hdmJhcicpLmxlbmd0aCA+IDA7XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0T2Zmc2V0ID0gZnVuY3Rpb24gX2dldE9mZnNldCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgb2Zmc2V0ID0ge307XG5cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5fY29uZmlnLm9mZnNldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBvZmZzZXQuZm4gPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIGRhdGEub2Zmc2V0cyA9IF9vYmplY3RTcHJlYWQyKHt9LCBkYXRhLm9mZnNldHMsIHt9LCBfdGhpczIuX2NvbmZpZy5vZmZzZXQoZGF0YS5vZmZzZXRzLCBfdGhpczIuX2VsZW1lbnQpIHx8IHt9KTtcbiAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9mZnNldC5vZmZzZXQgPSB0aGlzLl9jb25maWcub2Zmc2V0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2Zmc2V0O1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldFBvcHBlckNvbmZpZyA9IGZ1bmN0aW9uIF9nZXRQb3BwZXJDb25maWcoKSB7XG4gICAgICB2YXIgcG9wcGVyQ29uZmlnID0ge1xuICAgICAgICBwbGFjZW1lbnQ6IHRoaXMuX2dldFBsYWNlbWVudCgpLFxuICAgICAgICBtb2RpZmllcnM6IHtcbiAgICAgICAgICBvZmZzZXQ6IHRoaXMuX2dldE9mZnNldCgpLFxuICAgICAgICAgIGZsaXA6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IHRoaXMuX2NvbmZpZy5mbGlwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBwcmV2ZW50T3ZlcmZsb3c6IHtcbiAgICAgICAgICAgIGJvdW5kYXJpZXNFbGVtZW50OiB0aGlzLl9jb25maWcuYm91bmRhcnlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07IC8vIERpc2FibGUgUG9wcGVyLmpzIGlmIHdlIGhhdmUgYSBzdGF0aWMgZGlzcGxheVxuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmRpc3BsYXkgPT09ICdzdGF0aWMnKSB7XG4gICAgICAgIHBvcHBlckNvbmZpZy5tb2RpZmllcnMuYXBwbHlTdHlsZSA9IHtcbiAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZDIoe30sIHBvcHBlckNvbmZpZywge30sIHRoaXMuX2NvbmZpZy5wb3BwZXJDb25maWcpO1xuICAgIH0gLy8gU3RhdGljXG4gICAgO1xuXG4gICAgRHJvcGRvd24uX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSAkKHRoaXMpLmRhdGEoREFUQV9LRVkpO1xuXG4gICAgICAgIHZhciBfY29uZmlnID0gdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgPyBjb25maWcgOiBudWxsO1xuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgRHJvcGRvd24odGhpcywgX2NvbmZpZyk7XG4gICAgICAgICAgJCh0aGlzKS5kYXRhKERBVEFfS0VZLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vIG1ldGhvZCBuYW1lZCBcXFwiXCIgKyBjb25maWcgKyBcIlxcXCJcIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBEcm9wZG93bi5fY2xlYXJNZW51cyA9IGZ1bmN0aW9uIF9jbGVhck1lbnVzKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQgJiYgKGV2ZW50LndoaWNoID09PSBSSUdIVF9NT1VTRV9CVVRUT05fV0hJQ0ggfHwgZXZlbnQudHlwZSA9PT0gJ2tleXVwJyAmJiBldmVudC53aGljaCAhPT0gVEFCX0tFWUNPREUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHRvZ2dsZXMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IuREFUQV9UT0dHTEUpKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRvZ2dsZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdmFyIHBhcmVudCA9IERyb3Bkb3duLl9nZXRQYXJlbnRGcm9tRWxlbWVudCh0b2dnbGVzW2ldKTtcblxuICAgICAgICB2YXIgY29udGV4dCA9ICQodG9nZ2xlc1tpXSkuZGF0YShEQVRBX0tFWSk7XG4gICAgICAgIHZhciByZWxhdGVkVGFyZ2V0ID0ge1xuICAgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRvZ2dsZXNbaV1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoZXZlbnQgJiYgZXZlbnQudHlwZSA9PT0gJ2NsaWNrJykge1xuICAgICAgICAgIHJlbGF0ZWRUYXJnZXQuY2xpY2tFdmVudCA9IGV2ZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFjb250ZXh0KSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZHJvcGRvd25NZW51ID0gY29udGV4dC5fbWVudTtcblxuICAgICAgICBpZiAoISQocGFyZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2NsaWNrJyAmJiAvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGV2ZW50LnRhcmdldC50YWdOYW1lKSB8fCBldmVudC50eXBlID09PSAna2V5dXAnICYmIGV2ZW50LndoaWNoID09PSBUQUJfS0VZQ09ERSkgJiYgJC5jb250YWlucyhwYXJlbnQsIGV2ZW50LnRhcmdldCkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBoaWRlRXZlbnQgPSAkLkV2ZW50KEV2ZW50LkhJREUsIHJlbGF0ZWRUYXJnZXQpO1xuICAgICAgICAkKHBhcmVudCkudHJpZ2dlcihoaWRlRXZlbnQpO1xuXG4gICAgICAgIGlmIChoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgcmVtb3ZlIHRoZSBleHRyYVxuICAgICAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHdlIGFkZGVkIGZvciBpT1Mgc3VwcG9ydFxuXG5cbiAgICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgICAgICQoZG9jdW1lbnQuYm9keSkuY2hpbGRyZW4oKS5vZmYoJ21vdXNlb3ZlcicsIG51bGwsICQubm9vcCk7XG4gICAgICAgIH1cblxuICAgICAgICB0b2dnbGVzW2ldLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICdmYWxzZScpO1xuXG4gICAgICAgIGlmIChjb250ZXh0Ll9wb3BwZXIpIHtcbiAgICAgICAgICBjb250ZXh0Ll9wb3BwZXIuZGVzdHJveSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgJChkcm9wZG93bk1lbnUpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKTtcbiAgICAgICAgJChwYXJlbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5TSE9XKS50cmlnZ2VyKCQuRXZlbnQoRXZlbnQuSElEREVOLCByZWxhdGVkVGFyZ2V0KSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIERyb3Bkb3duLl9nZXRQYXJlbnRGcm9tRWxlbWVudCA9IGZ1bmN0aW9uIF9nZXRQYXJlbnRGcm9tRWxlbWVudChlbGVtZW50KSB7XG4gICAgICB2YXIgcGFyZW50O1xuICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpO1xuXG4gICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgcGFyZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwYXJlbnQgfHwgZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbiAgICA7XG5cbiAgICBEcm9wZG93bi5fZGF0YUFwaUtleWRvd25IYW5kbGVyID0gZnVuY3Rpb24gX2RhdGFBcGlLZXlkb3duSGFuZGxlcihldmVudCkge1xuICAgICAgLy8gSWYgbm90IGlucHV0L3RleHRhcmVhOlxuICAgICAgLy8gIC0gQW5kIG5vdCBhIGtleSBpbiBSRUdFWFBfS0VZRE9XTiA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgICAvLyBJZiBpbnB1dC90ZXh0YXJlYTpcbiAgICAgIC8vICAtIElmIHNwYWNlIGtleSA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgICAvLyAgLSBJZiBrZXkgaXMgb3RoZXIgdGhhbiBlc2NhcGVcbiAgICAgIC8vICAgIC0gSWYga2V5IGlzIG5vdCB1cCBvciBkb3duID0+IG5vdCBhIGRyb3Bkb3duIGNvbW1hbmRcbiAgICAgIC8vICAgIC0gSWYgdHJpZ2dlciBpbnNpZGUgdGhlIG1lbnUgPT4gbm90IGEgZHJvcGRvd24gY29tbWFuZFxuICAgICAgaWYgKC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZXZlbnQudGFyZ2V0LnRhZ05hbWUpID8gZXZlbnQud2hpY2ggPT09IFNQQUNFX0tFWUNPREUgfHwgZXZlbnQud2hpY2ggIT09IEVTQ0FQRV9LRVlDT0RFICYmIChldmVudC53aGljaCAhPT0gQVJST1dfRE9XTl9LRVlDT0RFICYmIGV2ZW50LndoaWNoICE9PSBBUlJPV19VUF9LRVlDT0RFIHx8ICQoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KFNlbGVjdG9yLk1FTlUpLmxlbmd0aCkgOiAhUkVHRVhQX0tFWURPV04udGVzdChldmVudC53aGljaCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgIGlmICh0aGlzLmRpc2FibGVkIHx8ICQodGhpcykuaGFzQ2xhc3MoQ2xhc3NOYW1lLkRJU0FCTEVEKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcyk7XG5cbiAgICAgIHZhciBpc0FjdGl2ZSA9ICQocGFyZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cbiAgICAgIGlmICghaXNBY3RpdmUgJiYgZXZlbnQud2hpY2ggPT09IEVTQ0FQRV9LRVlDT0RFKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc0FjdGl2ZSB8fCBpc0FjdGl2ZSAmJiAoZXZlbnQud2hpY2ggPT09IEVTQ0FQRV9LRVlDT0RFIHx8IGV2ZW50LndoaWNoID09PSBTUEFDRV9LRVlDT0RFKSkge1xuICAgICAgICBpZiAoZXZlbnQud2hpY2ggPT09IEVTQ0FQRV9LRVlDT0RFKSB7XG4gICAgICAgICAgdmFyIHRvZ2dsZSA9IHBhcmVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLkRBVEFfVE9HR0xFKTtcbiAgICAgICAgICAkKHRvZ2dsZSkudHJpZ2dlcignZm9jdXMnKTtcbiAgICAgICAgfVxuXG4gICAgICAgICQodGhpcykudHJpZ2dlcignY2xpY2snKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgaXRlbXMgPSBbXS5zbGljZS5jYWxsKHBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLlZJU0lCTEVfSVRFTVMpKS5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuICQoaXRlbSkuaXMoJzp2aXNpYmxlJyk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBpbmRleCA9IGl0ZW1zLmluZGV4T2YoZXZlbnQudGFyZ2V0KTtcblxuICAgICAgaWYgKGV2ZW50LndoaWNoID09PSBBUlJPV19VUF9LRVlDT0RFICYmIGluZGV4ID4gMCkge1xuICAgICAgICAvLyBVcFxuICAgICAgICBpbmRleC0tO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnQud2hpY2ggPT09IEFSUk9XX0RPV05fS0VZQ09ERSAmJiBpbmRleCA8IGl0ZW1zLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgLy8gRG93blxuICAgICAgICBpbmRleCsrO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGluZGV4ID0gMDtcbiAgICAgIH1cblxuICAgICAgaXRlbXNbaW5kZXhdLmZvY3VzKCk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhEcm9wZG93biwgbnVsbCwgW3tcbiAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT047XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRGVmYXVsdFR5cGVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdFR5cGU7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIERyb3Bkb3duO1xuICB9KCk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG5cbiAgJChkb2N1bWVudCkub24oRXZlbnQuS0VZRE9XTl9EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEUsIERyb3Bkb3duLl9kYXRhQXBpS2V5ZG93bkhhbmRsZXIpLm9uKEV2ZW50LktFWURPV05fREFUQV9BUEksIFNlbGVjdG9yLk1FTlUsIERyb3Bkb3duLl9kYXRhQXBpS2V5ZG93bkhhbmRsZXIpLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJICsgXCIgXCIgKyBFdmVudC5LRVlVUF9EQVRBX0FQSSwgRHJvcGRvd24uX2NsZWFyTWVudXMpLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgIERyb3Bkb3duLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkKHRoaXMpLCAndG9nZ2xlJyk7XG4gIH0pLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5GT1JNX0NISUxELCBmdW5jdGlvbiAoZSkge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH0pO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIGpRdWVyeVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJC5mbltOQU1FXSA9IERyb3Bkb3duLl9qUXVlcnlJbnRlcmZhY2U7XG4gICQuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBEcm9wZG93bjtcblxuICAkLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVDtcbiAgICByZXR1cm4gRHJvcGRvd24uX2pRdWVyeUludGVyZmFjZTtcbiAgfTtcblxuICByZXR1cm4gRHJvcGRvd247XG5cbn0pKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kcm9wZG93bi5qcy5tYXBcbiIsIi8qIVxuICAqIEJvb3RzdHJhcCBtb2RhbC5qcyB2NC40LjEgKGh0dHBzOi8vZ2V0Ym9vdHN0cmFwLmNvbS8pXG4gICogQ29weXJpZ2h0IDIwMTEtMjAxOSBUaGUgQm9vdHN0cmFwIEF1dGhvcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ncmFwaHMvY29udHJpYnV0b3JzKVxuICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gICovXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZSgnanF1ZXJ5JyksIHJlcXVpcmUoJy4vdXRpbC5qcycpKSA6XG4gIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJ2pxdWVyeScsICcuL3V0aWwuanMnXSwgZmFjdG9yeSkgOlxuICAoZ2xvYmFsID0gZ2xvYmFsIHx8IHNlbGYsIGdsb2JhbC5Nb2RhbCA9IGZhY3RvcnkoZ2xvYmFsLmpRdWVyeSwgZ2xvYmFsLlV0aWwpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgkLCBVdGlsKSB7ICd1c2Ugc3RyaWN0JztcblxuICAkID0gJCAmJiAkLmhhc093blByb3BlcnR5KCdkZWZhdWx0JykgPyAkWydkZWZhdWx0J10gOiAkO1xuICBVdGlsID0gVXRpbCAmJiBVdGlsLmhhc093blByb3BlcnR5KCdkZWZhdWx0JykgPyBVdGlsWydkZWZhdWx0J10gOiBVdGlsO1xuXG4gIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBpZiAoa2V5IGluIG9iaikge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ialtrZXldID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIGZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcbiAgICAgIGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgICB9KTtcbiAgICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTtcbiAgICB9XG5cbiAgICByZXR1cm4ga2V5cztcbiAgfVxuXG4gIGZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcblxuICAgICAgaWYgKGkgJSAyKSB7XG4gICAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBOQU1FID0gJ21vZGFsJztcbiAgdmFyIFZFUlNJT04gPSAnNC40LjEnO1xuICB2YXIgREFUQV9LRVkgPSAnYnMubW9kYWwnO1xuICB2YXIgRVZFTlRfS0VZID0gXCIuXCIgKyBEQVRBX0tFWTtcbiAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJC5mbltOQU1FXTtcbiAgdmFyIEVTQ0FQRV9LRVlDT0RFID0gMjc7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIEVzY2FwZSAoRXNjKSBrZXlcblxuICB2YXIgRGVmYXVsdCA9IHtcbiAgICBiYWNrZHJvcDogdHJ1ZSxcbiAgICBrZXlib2FyZDogdHJ1ZSxcbiAgICBmb2N1czogdHJ1ZSxcbiAgICBzaG93OiB0cnVlXG4gIH07XG4gIHZhciBEZWZhdWx0VHlwZSA9IHtcbiAgICBiYWNrZHJvcDogJyhib29sZWFufHN0cmluZyknLFxuICAgIGtleWJvYXJkOiAnYm9vbGVhbicsXG4gICAgZm9jdXM6ICdib29sZWFuJyxcbiAgICBzaG93OiAnYm9vbGVhbidcbiAgfTtcbiAgdmFyIEV2ZW50ID0ge1xuICAgIEhJREU6IFwiaGlkZVwiICsgRVZFTlRfS0VZLFxuICAgIEhJREVfUFJFVkVOVEVEOiBcImhpZGVQcmV2ZW50ZWRcIiArIEVWRU5UX0tFWSxcbiAgICBISURERU46IFwiaGlkZGVuXCIgKyBFVkVOVF9LRVksXG4gICAgU0hPVzogXCJzaG93XCIgKyBFVkVOVF9LRVksXG4gICAgU0hPV046IFwic2hvd25cIiArIEVWRU5UX0tFWSxcbiAgICBGT0NVU0lOOiBcImZvY3VzaW5cIiArIEVWRU5UX0tFWSxcbiAgICBSRVNJWkU6IFwicmVzaXplXCIgKyBFVkVOVF9LRVksXG4gICAgQ0xJQ0tfRElTTUlTUzogXCJjbGljay5kaXNtaXNzXCIgKyBFVkVOVF9LRVksXG4gICAgS0VZRE9XTl9ESVNNSVNTOiBcImtleWRvd24uZGlzbWlzc1wiICsgRVZFTlRfS0VZLFxuICAgIE1PVVNFVVBfRElTTUlTUzogXCJtb3VzZXVwLmRpc21pc3NcIiArIEVWRU5UX0tFWSxcbiAgICBNT1VTRURPV05fRElTTUlTUzogXCJtb3VzZWRvd24uZGlzbWlzc1wiICsgRVZFTlRfS0VZLFxuICAgIENMSUNLX0RBVEFfQVBJOiBcImNsaWNrXCIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVlcbiAgfTtcbiAgdmFyIENsYXNzTmFtZSA9IHtcbiAgICBTQ1JPTExBQkxFOiAnbW9kYWwtZGlhbG9nLXNjcm9sbGFibGUnLFxuICAgIFNDUk9MTEJBUl9NRUFTVVJFUjogJ21vZGFsLXNjcm9sbGJhci1tZWFzdXJlJyxcbiAgICBCQUNLRFJPUDogJ21vZGFsLWJhY2tkcm9wJyxcbiAgICBPUEVOOiAnbW9kYWwtb3BlbicsXG4gICAgRkFERTogJ2ZhZGUnLFxuICAgIFNIT1c6ICdzaG93JyxcbiAgICBTVEFUSUM6ICdtb2RhbC1zdGF0aWMnXG4gIH07XG4gIHZhciBTZWxlY3RvciA9IHtcbiAgICBESUFMT0c6ICcubW9kYWwtZGlhbG9nJyxcbiAgICBNT0RBTF9CT0RZOiAnLm1vZGFsLWJvZHknLFxuICAgIERBVEFfVE9HR0xFOiAnW2RhdGEtdG9nZ2xlPVwibW9kYWxcIl0nLFxuICAgIERBVEFfRElTTUlTUzogJ1tkYXRhLWRpc21pc3M9XCJtb2RhbFwiXScsXG4gICAgRklYRURfQ09OVEVOVDogJy5maXhlZC10b3AsIC5maXhlZC1ib3R0b20sIC5pcy1maXhlZCwgLnN0aWNreS10b3AnLFxuICAgIFNUSUNLWV9DT05URU5UOiAnLnN0aWNreS10b3AnXG4gIH07XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIE1vZGFsID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTW9kYWwoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5fZGlhbG9nID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLkRJQUxPRyk7XG4gICAgICB0aGlzLl9iYWNrZHJvcCA9IG51bGw7XG4gICAgICB0aGlzLl9pc1Nob3duID0gZmFsc2U7XG4gICAgICB0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyA9IGZhbHNlO1xuICAgICAgdGhpcy5faWdub3JlQmFja2Ryb3BDbGljayA9IGZhbHNlO1xuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG4gICAgICB0aGlzLl9zY3JvbGxiYXJXaWR0aCA9IDA7XG4gICAgfSAvLyBHZXR0ZXJzXG5cblxuICAgIHZhciBfcHJvdG8gPSBNb2RhbC5wcm90b3R5cGU7XG5cbiAgICAvLyBQdWJsaWNcbiAgICBfcHJvdG8udG9nZ2xlID0gZnVuY3Rpb24gdG9nZ2xlKHJlbGF0ZWRUYXJnZXQpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pc1Nob3duID8gdGhpcy5oaWRlKCkgOiB0aGlzLnNob3cocmVsYXRlZFRhcmdldCk7XG4gICAgfTtcblxuICAgIF9wcm90by5zaG93ID0gZnVuY3Rpb24gc2hvdyhyZWxhdGVkVGFyZ2V0KSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5faXNTaG93biB8fCB0aGlzLl9pc1RyYW5zaXRpb25pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkpIHtcbiAgICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNob3dFdmVudCA9ICQuRXZlbnQoRXZlbnQuU0hPVywge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiByZWxhdGVkVGFyZ2V0XG4gICAgICB9KTtcbiAgICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzaG93RXZlbnQpO1xuXG4gICAgICBpZiAodGhpcy5faXNTaG93biB8fCBzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pc1Nob3duID0gdHJ1ZTtcblxuICAgICAgdGhpcy5fY2hlY2tTY3JvbGxiYXIoKTtcblxuICAgICAgdGhpcy5fc2V0U2Nyb2xsYmFyKCk7XG5cbiAgICAgIHRoaXMuX2FkanVzdERpYWxvZygpO1xuXG4gICAgICB0aGlzLl9zZXRFc2NhcGVFdmVudCgpO1xuXG4gICAgICB0aGlzLl9zZXRSZXNpemVFdmVudCgpO1xuXG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50LkNMSUNLX0RJU01JU1MsIFNlbGVjdG9yLkRBVEFfRElTTUlTUywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5oaWRlKGV2ZW50KTtcbiAgICAgIH0pO1xuICAgICAgJCh0aGlzLl9kaWFsb2cpLm9uKEV2ZW50Lk1PVVNFRE9XTl9ESVNNSVNTLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICQoX3RoaXMuX2VsZW1lbnQpLm9uZShFdmVudC5NT1VTRVVQX0RJU01JU1MsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGlmICgkKGV2ZW50LnRhcmdldCkuaXMoX3RoaXMuX2VsZW1lbnQpKSB7XG4gICAgICAgICAgICBfdGhpcy5faWdub3JlQmFja2Ryb3BDbGljayA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLl9zaG93QmFja2Ryb3AoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuX3Nob3dFbGVtZW50KHJlbGF0ZWRUYXJnZXQpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9wcm90by5oaWRlID0gZnVuY3Rpb24gaGlkZShldmVudCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIGlmIChldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuX2lzU2hvd24gfHwgdGhpcy5faXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGhpZGVFdmVudCA9ICQuRXZlbnQoRXZlbnQuSElERSk7XG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoaGlkZUV2ZW50KTtcblxuICAgICAgaWYgKCF0aGlzLl9pc1Nob3duIHx8IGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2lzU2hvd24gPSBmYWxzZTtcbiAgICAgIHZhciB0cmFuc2l0aW9uID0gJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSk7XG5cbiAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3NldEVzY2FwZUV2ZW50KCk7XG5cbiAgICAgIHRoaXMuX3NldFJlc2l6ZUV2ZW50KCk7XG5cbiAgICAgICQoZG9jdW1lbnQpLm9mZihFdmVudC5GT0NVU0lOKTtcbiAgICAgICQodGhpcy5fZWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuICAgICAgJCh0aGlzLl9lbGVtZW50KS5vZmYoRXZlbnQuQ0xJQ0tfRElTTUlTUyk7XG4gICAgICAkKHRoaXMuX2RpYWxvZykub2ZmKEV2ZW50Lk1PVVNFRE9XTl9ESVNNSVNTKTtcblxuICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG4gICAgICAgICQodGhpcy5fZWxlbWVudCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczIuX2hpZGVNb2RhbChldmVudCk7XG4gICAgICAgIH0pLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9oaWRlTW9kYWwoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgW3dpbmRvdywgdGhpcy5fZWxlbWVudCwgdGhpcy5fZGlhbG9nXS5mb3JFYWNoKGZ1bmN0aW9uIChodG1sRWxlbWVudCkge1xuICAgICAgICByZXR1cm4gJChodG1sRWxlbWVudCkub2ZmKEVWRU5UX0tFWSk7XG4gICAgICB9KTtcbiAgICAgIC8qKlxuICAgICAgICogYGRvY3VtZW50YCBoYXMgMiBldmVudHMgYEV2ZW50LkZPQ1VTSU5gIGFuZCBgRXZlbnQuQ0xJQ0tfREFUQV9BUElgXG4gICAgICAgKiBEbyBub3QgbW92ZSBgZG9jdW1lbnRgIGluIGBodG1sRWxlbWVudHNgIGFycmF5XG4gICAgICAgKiBJdCB3aWxsIHJlbW92ZSBgRXZlbnQuQ0xJQ0tfREFUQV9BUElgIGV2ZW50IHRoYXQgc2hvdWxkIHJlbWFpblxuICAgICAgICovXG5cbiAgICAgICQoZG9jdW1lbnQpLm9mZihFdmVudC5GT0NVU0lOKTtcbiAgICAgICQucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSk7XG4gICAgICB0aGlzLl9jb25maWcgPSBudWxsO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLl9kaWFsb2cgPSBudWxsO1xuICAgICAgdGhpcy5fYmFja2Ryb3AgPSBudWxsO1xuICAgICAgdGhpcy5faXNTaG93biA9IG51bGw7XG4gICAgICB0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyA9IG51bGw7XG4gICAgICB0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gbnVsbDtcbiAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IG51bGw7XG4gICAgICB0aGlzLl9zY3JvbGxiYXJXaWR0aCA9IG51bGw7XG4gICAgfTtcblxuICAgIF9wcm90by5oYW5kbGVVcGRhdGUgPSBmdW5jdGlvbiBoYW5kbGVVcGRhdGUoKSB7XG4gICAgICB0aGlzLl9hZGp1c3REaWFsb2coKTtcbiAgICB9IC8vIFByaXZhdGVcbiAgICA7XG5cbiAgICBfcHJvdG8uX2dldENvbmZpZyA9IGZ1bmN0aW9uIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgICBjb25maWcgPSBfb2JqZWN0U3ByZWFkMih7fSwgRGVmYXVsdCwge30sIGNvbmZpZyk7XG4gICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FLCBjb25maWcsIERlZmF1bHRUeXBlKTtcbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfTtcblxuICAgIF9wcm90by5fdHJpZ2dlckJhY2tkcm9wVHJhbnNpdGlvbiA9IGZ1bmN0aW9uIF90cmlnZ2VyQmFja2Ryb3BUcmFuc2l0aW9uKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcuYmFja2Ryb3AgPT09ICdzdGF0aWMnKSB7XG4gICAgICAgIHZhciBoaWRlRXZlbnRQcmV2ZW50ZWQgPSAkLkV2ZW50KEV2ZW50LkhJREVfUFJFVkVOVEVEKTtcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKGhpZGVFdmVudFByZXZlbnRlZCk7XG5cbiAgICAgICAgaWYgKGhpZGVFdmVudFByZXZlbnRlZC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENsYXNzTmFtZS5TVEFUSUMpO1xuXG4gICAgICAgIHZhciBtb2RhbFRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG4gICAgICAgICQodGhpcy5fZWxlbWVudCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDbGFzc05hbWUuU1RBVElDKTtcbiAgICAgICAgfSkuZW11bGF0ZVRyYW5zaXRpb25FbmQobW9kYWxUcmFuc2l0aW9uRHVyYXRpb24pO1xuXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuZm9jdXMoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX3Nob3dFbGVtZW50ID0gZnVuY3Rpb24gX3Nob3dFbGVtZW50KHJlbGF0ZWRUYXJnZXQpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICB2YXIgdHJhbnNpdGlvbiA9ICQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkZBREUpO1xuICAgICAgdmFyIG1vZGFsQm9keSA9IHRoaXMuX2RpYWxvZyA/IHRoaXMuX2RpYWxvZy5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLk1PREFMX0JPRFkpIDogbnVsbDtcblxuICAgICAgaWYgKCF0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUgfHwgdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlLm5vZGVUeXBlICE9PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgICAvLyBEb24ndCBtb3ZlIG1vZGFsJ3MgRE9NIHBvc2l0aW9uXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5fZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1tb2RhbCcsIHRydWUpO1xuXG4gICAgICBpZiAoJCh0aGlzLl9kaWFsb2cpLmhhc0NsYXNzKENsYXNzTmFtZS5TQ1JPTExBQkxFKSAmJiBtb2RhbEJvZHkpIHtcbiAgICAgICAgbW9kYWxCb2R5LnNjcm9sbFRvcCA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9lbGVtZW50LnNjcm9sbFRvcCA9IDA7XG4gICAgICB9XG5cbiAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAgIFV0aWwucmVmbG93KHRoaXMuX2VsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICAkKHRoaXMuX2VsZW1lbnQpLmFkZENsYXNzKENsYXNzTmFtZS5TSE9XKTtcblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5mb2N1cykge1xuICAgICAgICB0aGlzLl9lbmZvcmNlRm9jdXMoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNob3duRXZlbnQgPSAkLkV2ZW50KEV2ZW50LlNIT1dOLCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHJlbGF0ZWRUYXJnZXRcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgdHJhbnNpdGlvbkNvbXBsZXRlID0gZnVuY3Rpb24gdHJhbnNpdGlvbkNvbXBsZXRlKCkge1xuICAgICAgICBpZiAoX3RoaXM0Ll9jb25maWcuZm9jdXMpIHtcbiAgICAgICAgICBfdGhpczQuX2VsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzNC5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG4gICAgICAgICQoX3RoaXM0Ll9lbGVtZW50KS50cmlnZ2VyKHNob3duRXZlbnQpO1xuICAgICAgfTtcblxuICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fZGlhbG9nKTtcbiAgICAgICAgJCh0aGlzLl9kaWFsb2cpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCB0cmFuc2l0aW9uQ29tcGxldGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFuc2l0aW9uQ29tcGxldGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9lbmZvcmNlRm9jdXMgPSBmdW5jdGlvbiBfZW5mb3JjZUZvY3VzKCkge1xuICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICAgICQoZG9jdW1lbnQpLm9mZihFdmVudC5GT0NVU0lOKSAvLyBHdWFyZCBhZ2FpbnN0IGluZmluaXRlIGZvY3VzIGxvb3BcbiAgICAgIC5vbihFdmVudC5GT0NVU0lOLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGRvY3VtZW50ICE9PSBldmVudC50YXJnZXQgJiYgX3RoaXM1Ll9lbGVtZW50ICE9PSBldmVudC50YXJnZXQgJiYgJChfdGhpczUuX2VsZW1lbnQpLmhhcyhldmVudC50YXJnZXQpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIF90aGlzNS5fZWxlbWVudC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9zZXRFc2NhcGVFdmVudCA9IGZ1bmN0aW9uIF9zZXRFc2NhcGVFdmVudCgpIHtcbiAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5faXNTaG93biAmJiB0aGlzLl9jb25maWcua2V5Ym9hcmQpIHtcbiAgICAgICAgJCh0aGlzLl9lbGVtZW50KS5vbihFdmVudC5LRVlET1dOX0RJU01JU1MsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGlmIChldmVudC53aGljaCA9PT0gRVNDQVBFX0tFWUNPREUpIHtcbiAgICAgICAgICAgIF90aGlzNi5fdHJpZ2dlckJhY2tkcm9wVHJhbnNpdGlvbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLl9pc1Nob3duKSB7XG4gICAgICAgICQodGhpcy5fZWxlbWVudCkub2ZmKEV2ZW50LktFWURPV05fRElTTUlTUyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fc2V0UmVzaXplRXZlbnQgPSBmdW5jdGlvbiBfc2V0UmVzaXplRXZlbnQoKSB7XG4gICAgICB2YXIgX3RoaXM3ID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuX2lzU2hvd24pIHtcbiAgICAgICAgJCh3aW5kb3cpLm9uKEV2ZW50LlJFU0laRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzNy5oYW5kbGVVcGRhdGUoZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQod2luZG93KS5vZmYoRXZlbnQuUkVTSVpFKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9oaWRlTW9kYWwgPSBmdW5jdGlvbiBfaGlkZU1vZGFsKCkge1xuICAgICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgdHJ1ZSk7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLW1vZGFsJyk7XG5cbiAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlO1xuXG4gICAgICB0aGlzLl9zaG93QmFja2Ryb3AoZnVuY3Rpb24gKCkge1xuICAgICAgICAkKGRvY3VtZW50LmJvZHkpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5PUEVOKTtcblxuICAgICAgICBfdGhpczguX3Jlc2V0QWRqdXN0bWVudHMoKTtcblxuICAgICAgICBfdGhpczguX3Jlc2V0U2Nyb2xsYmFyKCk7XG5cbiAgICAgICAgJChfdGhpczguX2VsZW1lbnQpLnRyaWdnZXIoRXZlbnQuSElEREVOKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3JlbW92ZUJhY2tkcm9wID0gZnVuY3Rpb24gX3JlbW92ZUJhY2tkcm9wKCkge1xuICAgICAgaWYgKHRoaXMuX2JhY2tkcm9wKSB7XG4gICAgICAgICQodGhpcy5fYmFja2Ryb3ApLnJlbW92ZSgpO1xuICAgICAgICB0aGlzLl9iYWNrZHJvcCA9IG51bGw7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fc2hvd0JhY2tkcm9wID0gZnVuY3Rpb24gX3Nob3dCYWNrZHJvcChjYWxsYmFjaykge1xuICAgICAgdmFyIF90aGlzOSA9IHRoaXM7XG5cbiAgICAgIHZhciBhbmltYXRlID0gJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkgPyBDbGFzc05hbWUuRkFERSA6ICcnO1xuXG4gICAgICBpZiAodGhpcy5faXNTaG93biAmJiB0aGlzLl9jb25maWcuYmFja2Ryb3ApIHtcbiAgICAgICAgdGhpcy5fYmFja2Ryb3AgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5fYmFja2Ryb3AuY2xhc3NOYW1lID0gQ2xhc3NOYW1lLkJBQ0tEUk9QO1xuXG4gICAgICAgIGlmIChhbmltYXRlKSB7XG4gICAgICAgICAgdGhpcy5fYmFja2Ryb3AuY2xhc3NMaXN0LmFkZChhbmltYXRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgICQodGhpcy5fYmFja2Ryb3ApLmFwcGVuZFRvKGRvY3VtZW50LmJvZHkpO1xuICAgICAgICAkKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50LkNMSUNLX0RJU01JU1MsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGlmIChfdGhpczkuX2lnbm9yZUJhY2tkcm9wQ2xpY2spIHtcbiAgICAgICAgICAgIF90aGlzOS5faWdub3JlQmFja2Ryb3BDbGljayA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChldmVudC50YXJnZXQgIT09IGV2ZW50LmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfdGhpczkuX3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24oKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGFuaW1hdGUpIHtcbiAgICAgICAgICBVdGlsLnJlZmxvdyh0aGlzLl9iYWNrZHJvcCk7XG4gICAgICAgIH1cblxuICAgICAgICAkKHRoaXMuX2JhY2tkcm9wKS5hZGRDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cbiAgICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghYW5pbWF0ZSkge1xuICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGJhY2tkcm9wVHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9iYWNrZHJvcCk7XG4gICAgICAgICQodGhpcy5fYmFja2Ryb3ApLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjYWxsYmFjaykuZW11bGF0ZVRyYW5zaXRpb25FbmQoYmFja2Ryb3BUcmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgfSBlbHNlIGlmICghdGhpcy5faXNTaG93biAmJiB0aGlzLl9iYWNrZHJvcCkge1xuICAgICAgICAkKHRoaXMuX2JhY2tkcm9wKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cbiAgICAgICAgdmFyIGNhbGxiYWNrUmVtb3ZlID0gZnVuY3Rpb24gY2FsbGJhY2tSZW1vdmUoKSB7XG4gICAgICAgICAgX3RoaXM5Ll9yZW1vdmVCYWNrZHJvcCgpO1xuXG4gICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkpIHtcbiAgICAgICAgICB2YXIgX2JhY2tkcm9wVHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9iYWNrZHJvcCk7XG5cbiAgICAgICAgICAkKHRoaXMuX2JhY2tkcm9wKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY2FsbGJhY2tSZW1vdmUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKF9iYWNrZHJvcFRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FsbGJhY2tSZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH0gLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIHRoZSBmb2xsb3dpbmcgbWV0aG9kcyBhcmUgdXNlZCB0byBoYW5kbGUgb3ZlcmZsb3dpbmcgbW9kYWxzXG4gICAgLy8gdG9kbyAoZmF0KTogdGhlc2Ugc2hvdWxkIHByb2JhYmx5IGJlIHJlZmFjdG9yZWQgb3V0IG9mIG1vZGFsLmpzXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIDtcblxuICAgIF9wcm90by5fYWRqdXN0RGlhbG9nID0gZnVuY3Rpb24gX2FkanVzdERpYWxvZygpIHtcbiAgICAgIHZhciBpc01vZGFsT3ZlcmZsb3dpbmcgPSB0aGlzLl9lbGVtZW50LnNjcm9sbEhlaWdodCA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XG5cbiAgICAgIGlmICghdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcgJiYgaXNNb2RhbE92ZXJmbG93aW5nKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQgPSB0aGlzLl9zY3JvbGxiYXJXaWR0aCArIFwicHhcIjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2lzQm9keU92ZXJmbG93aW5nICYmICFpc01vZGFsT3ZlcmZsb3dpbmcpIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSB0aGlzLl9zY3JvbGxiYXJXaWR0aCArIFwicHhcIjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9yZXNldEFkanVzdG1lbnRzID0gZnVuY3Rpb24gX3Jlc2V0QWRqdXN0bWVudHMoKSB7XG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0ID0gJyc7XG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9ICcnO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2NoZWNrU2Nyb2xsYmFyID0gZnVuY3Rpb24gX2NoZWNrU2Nyb2xsYmFyKCkge1xuICAgICAgdmFyIHJlY3QgPSBkb2N1bWVudC5ib2R5LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcgPSByZWN0LmxlZnQgKyByZWN0LnJpZ2h0IDwgd2luZG93LmlubmVyV2lkdGg7XG4gICAgICB0aGlzLl9zY3JvbGxiYXJXaWR0aCA9IHRoaXMuX2dldFNjcm9sbGJhcldpZHRoKCk7XG4gICAgfTtcblxuICAgIF9wcm90by5fc2V0U2Nyb2xsYmFyID0gZnVuY3Rpb24gX3NldFNjcm9sbGJhcigpIHtcbiAgICAgIHZhciBfdGhpczEwID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuX2lzQm9keU92ZXJmbG93aW5nKSB7XG4gICAgICAgIC8vIE5vdGU6IERPTU5vZGUuc3R5bGUucGFkZGluZ1JpZ2h0IHJldHVybnMgdGhlIGFjdHVhbCB2YWx1ZSBvciAnJyBpZiBub3Qgc2V0XG4gICAgICAgIC8vICAgd2hpbGUgJChET01Ob2RlKS5jc3MoJ3BhZGRpbmctcmlnaHQnKSByZXR1cm5zIHRoZSBjYWxjdWxhdGVkIHZhbHVlIG9yIDAgaWYgbm90IHNldFxuICAgICAgICB2YXIgZml4ZWRDb250ZW50ID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLkZJWEVEX0NPTlRFTlQpKTtcbiAgICAgICAgdmFyIHN0aWNreUNvbnRlbnQgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IuU1RJQ0tZX0NPTlRFTlQpKTsgLy8gQWRqdXN0IGZpeGVkIGNvbnRlbnQgcGFkZGluZ1xuXG4gICAgICAgICQoZml4ZWRDb250ZW50KS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgIHZhciBhY3R1YWxQYWRkaW5nID0gZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQ7XG4gICAgICAgICAgdmFyIGNhbGN1bGF0ZWRQYWRkaW5nID0gJChlbGVtZW50KS5jc3MoJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgICAgICAkKGVsZW1lbnQpLmRhdGEoJ3BhZGRpbmctcmlnaHQnLCBhY3R1YWxQYWRkaW5nKS5jc3MoJ3BhZGRpbmctcmlnaHQnLCBwYXJzZUZsb2F0KGNhbGN1bGF0ZWRQYWRkaW5nKSArIF90aGlzMTAuX3Njcm9sbGJhcldpZHRoICsgXCJweFwiKTtcbiAgICAgICAgfSk7IC8vIEFkanVzdCBzdGlja3kgY29udGVudCBtYXJnaW5cblxuICAgICAgICAkKHN0aWNreUNvbnRlbnQpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgICAgdmFyIGFjdHVhbE1hcmdpbiA9IGVsZW1lbnQuc3R5bGUubWFyZ2luUmlnaHQ7XG4gICAgICAgICAgdmFyIGNhbGN1bGF0ZWRNYXJnaW4gPSAkKGVsZW1lbnQpLmNzcygnbWFyZ2luLXJpZ2h0Jyk7XG4gICAgICAgICAgJChlbGVtZW50KS5kYXRhKCdtYXJnaW4tcmlnaHQnLCBhY3R1YWxNYXJnaW4pLmNzcygnbWFyZ2luLXJpZ2h0JywgcGFyc2VGbG9hdChjYWxjdWxhdGVkTWFyZ2luKSAtIF90aGlzMTAuX3Njcm9sbGJhcldpZHRoICsgXCJweFwiKTtcbiAgICAgICAgfSk7IC8vIEFkanVzdCBib2R5IHBhZGRpbmdcblxuICAgICAgICB2YXIgYWN0dWFsUGFkZGluZyA9IGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0O1xuICAgICAgICB2YXIgY2FsY3VsYXRlZFBhZGRpbmcgPSAkKGRvY3VtZW50LmJvZHkpLmNzcygncGFkZGluZy1yaWdodCcpO1xuICAgICAgICAkKGRvY3VtZW50LmJvZHkpLmRhdGEoJ3BhZGRpbmctcmlnaHQnLCBhY3R1YWxQYWRkaW5nKS5jc3MoJ3BhZGRpbmctcmlnaHQnLCBwYXJzZUZsb2F0KGNhbGN1bGF0ZWRQYWRkaW5nKSArIHRoaXMuX3Njcm9sbGJhcldpZHRoICsgXCJweFwiKTtcbiAgICAgIH1cblxuICAgICAgJChkb2N1bWVudC5ib2R5KS5hZGRDbGFzcyhDbGFzc05hbWUuT1BFTik7XG4gICAgfTtcblxuICAgIF9wcm90by5fcmVzZXRTY3JvbGxiYXIgPSBmdW5jdGlvbiBfcmVzZXRTY3JvbGxiYXIoKSB7XG4gICAgICAvLyBSZXN0b3JlIGZpeGVkIGNvbnRlbnQgcGFkZGluZ1xuICAgICAgdmFyIGZpeGVkQ29udGVudCA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5GSVhFRF9DT05URU5UKSk7XG4gICAgICAkKGZpeGVkQ29udGVudCkuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHBhZGRpbmcgPSAkKGVsZW1lbnQpLmRhdGEoJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgICAgJChlbGVtZW50KS5yZW1vdmVEYXRhKCdwYWRkaW5nLXJpZ2h0Jyk7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gcGFkZGluZyA/IHBhZGRpbmcgOiAnJztcbiAgICAgIH0pOyAvLyBSZXN0b3JlIHN0aWNreSBjb250ZW50XG5cbiAgICAgIHZhciBlbGVtZW50cyA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIlwiICsgU2VsZWN0b3IuU1RJQ0tZX0NPTlRFTlQpKTtcbiAgICAgICQoZWxlbWVudHMpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgIHZhciBtYXJnaW4gPSAkKGVsZW1lbnQpLmRhdGEoJ21hcmdpbi1yaWdodCcpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgbWFyZ2luICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICQoZWxlbWVudCkuY3NzKCdtYXJnaW4tcmlnaHQnLCBtYXJnaW4pLnJlbW92ZURhdGEoJ21hcmdpbi1yaWdodCcpO1xuICAgICAgICB9XG4gICAgICB9KTsgLy8gUmVzdG9yZSBib2R5IHBhZGRpbmdcblxuICAgICAgdmFyIHBhZGRpbmcgPSAkKGRvY3VtZW50LmJvZHkpLmRhdGEoJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgICQoZG9jdW1lbnQuYm9keSkucmVtb3ZlRGF0YSgncGFkZGluZy1yaWdodCcpO1xuICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQgPSBwYWRkaW5nID8gcGFkZGluZyA6ICcnO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldFNjcm9sbGJhcldpZHRoID0gZnVuY3Rpb24gX2dldFNjcm9sbGJhcldpZHRoKCkge1xuICAgICAgLy8gdGh4IGQud2Fsc2hcbiAgICAgIHZhciBzY3JvbGxEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHNjcm9sbERpdi5jbGFzc05hbWUgPSBDbGFzc05hbWUuU0NST0xMQkFSX01FQVNVUkVSO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JvbGxEaXYpO1xuICAgICAgdmFyIHNjcm9sbGJhcldpZHRoID0gc2Nyb2xsRGl2LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIC0gc2Nyb2xsRGl2LmNsaWVudFdpZHRoO1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzY3JvbGxEaXYpO1xuICAgICAgcmV0dXJuIHNjcm9sbGJhcldpZHRoO1xuICAgIH0gLy8gU3RhdGljXG4gICAgO1xuXG4gICAgTW9kYWwuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnLCByZWxhdGVkVGFyZ2V0KSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSAkKHRoaXMpLmRhdGEoREFUQV9LRVkpO1xuXG4gICAgICAgIHZhciBfY29uZmlnID0gX29iamVjdFNwcmVhZDIoe30sIERlZmF1bHQsIHt9LCAkKHRoaXMpLmRhdGEoKSwge30sIHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZyA/IGNvbmZpZyA6IHt9KTtcblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IE1vZGFsKHRoaXMsIF9jb25maWcpO1xuICAgICAgICAgICQodGhpcykuZGF0YShEQVRBX0tFWSwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiICsgY29uZmlnICsgXCJcXFwiXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRhdGFbY29uZmlnXShyZWxhdGVkVGFyZ2V0KTtcbiAgICAgICAgfSBlbHNlIGlmIChfY29uZmlnLnNob3cpIHtcbiAgICAgICAgICBkYXRhLnNob3cocmVsYXRlZFRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoTW9kYWwsIG51bGwsIFt7XG4gICAgICBrZXk6IFwiVkVSU0lPTlwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEZWZhdWx0XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHQ7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIE1vZGFsO1xuICB9KCk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG5cbiAgJChkb2N1bWVudCkub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkRBVEFfVE9HR0xFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgX3RoaXMxMSA9IHRoaXM7XG5cbiAgICB2YXIgdGFyZ2V0O1xuICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzKTtcblxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgdGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgfVxuXG4gICAgdmFyIGNvbmZpZyA9ICQodGFyZ2V0KS5kYXRhKERBVEFfS0VZKSA/ICd0b2dnbGUnIDogX29iamVjdFNwcmVhZDIoe30sICQodGFyZ2V0KS5kYXRhKCksIHt9LCAkKHRoaXMpLmRhdGEoKSk7XG5cbiAgICBpZiAodGhpcy50YWdOYW1lID09PSAnQScgfHwgdGhpcy50YWdOYW1lID09PSAnQVJFQScpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgdmFyICR0YXJnZXQgPSAkKHRhcmdldCkub25lKEV2ZW50LlNIT1csIGZ1bmN0aW9uIChzaG93RXZlbnQpIHtcbiAgICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgLy8gT25seSByZWdpc3RlciBmb2N1cyByZXN0b3JlciBpZiBtb2RhbCB3aWxsIGFjdHVhbGx5IGdldCBzaG93blxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICR0YXJnZXQub25lKEV2ZW50LkhJRERFTiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoJChfdGhpczExKS5pcygnOnZpc2libGUnKSkge1xuICAgICAgICAgIF90aGlzMTEuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBNb2RhbC5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJCh0YXJnZXQpLCBjb25maWcsIHRoaXMpO1xuICB9KTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQuZm5bTkFNRV0gPSBNb2RhbC5falF1ZXJ5SW50ZXJmYWNlO1xuICAkLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gTW9kYWw7XG5cbiAgJC5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgcmV0dXJuIE1vZGFsLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgcmV0dXJuIE1vZGFsO1xuXG59KSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kYWwuanMubWFwXG4iLCIvKiFcbiAgKiBCb290c3RyYXAgdGFiLmpzIHY0LjQuMSAoaHR0cHM6Ly9nZXRib290c3RyYXAuY29tLylcbiAgKiBDb3B5cmlnaHQgMjAxMS0yMDE5IFRoZSBCb290c3RyYXAgQXV0aG9ycyAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2dyYXBocy9jb250cmlidXRvcnMpXG4gICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAgKi9cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSwgcmVxdWlyZSgnLi91dGlsLmpzJykpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnanF1ZXJ5JywgJy4vdXRpbC5qcyddLCBmYWN0b3J5KSA6XG4gIChnbG9iYWwgPSBnbG9iYWwgfHwgc2VsZiwgZ2xvYmFsLlRhYiA9IGZhY3RvcnkoZ2xvYmFsLmpRdWVyeSwgZ2xvYmFsLlV0aWwpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgkLCBVdGlsKSB7ICd1c2Ugc3RyaWN0JztcblxuICAkID0gJCAmJiAkLmhhc093blByb3BlcnR5KCdkZWZhdWx0JykgPyAkWydkZWZhdWx0J10gOiAkO1xuICBVdGlsID0gVXRpbCAmJiBVdGlsLmhhc093blByb3BlcnR5KCdkZWZhdWx0JykgPyBVdGlsWydkZWZhdWx0J10gOiBVdGlsO1xuXG4gIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29uc3RhbnRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgTkFNRSA9ICd0YWInO1xuICB2YXIgVkVSU0lPTiA9ICc0LjQuMSc7XG4gIHZhciBEQVRBX0tFWSA9ICdicy50YWInO1xuICB2YXIgRVZFTlRfS0VZID0gXCIuXCIgKyBEQVRBX0tFWTtcbiAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJC5mbltOQU1FXTtcbiAgdmFyIEV2ZW50ID0ge1xuICAgIEhJREU6IFwiaGlkZVwiICsgRVZFTlRfS0VZLFxuICAgIEhJRERFTjogXCJoaWRkZW5cIiArIEVWRU5UX0tFWSxcbiAgICBTSE9XOiBcInNob3dcIiArIEVWRU5UX0tFWSxcbiAgICBTSE9XTjogXCJzaG93blwiICsgRVZFTlRfS0VZLFxuICAgIENMSUNLX0RBVEFfQVBJOiBcImNsaWNrXCIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVlcbiAgfTtcbiAgdmFyIENsYXNzTmFtZSA9IHtcbiAgICBEUk9QRE9XTl9NRU5VOiAnZHJvcGRvd24tbWVudScsXG4gICAgQUNUSVZFOiAnYWN0aXZlJyxcbiAgICBESVNBQkxFRDogJ2Rpc2FibGVkJyxcbiAgICBGQURFOiAnZmFkZScsXG4gICAgU0hPVzogJ3Nob3cnXG4gIH07XG4gIHZhciBTZWxlY3RvciA9IHtcbiAgICBEUk9QRE9XTjogJy5kcm9wZG93bicsXG4gICAgTkFWX0xJU1RfR1JPVVA6ICcubmF2LCAubGlzdC1ncm91cCcsXG4gICAgQUNUSVZFOiAnLmFjdGl2ZScsXG4gICAgQUNUSVZFX1VMOiAnPiBsaSA+IC5hY3RpdmUnLFxuICAgIERBVEFfVE9HR0xFOiAnW2RhdGEtdG9nZ2xlPVwidGFiXCJdLCBbZGF0YS10b2dnbGU9XCJwaWxsXCJdLCBbZGF0YS10b2dnbGU9XCJsaXN0XCJdJyxcbiAgICBEUk9QRE9XTl9UT0dHTEU6ICcuZHJvcGRvd24tdG9nZ2xlJyxcbiAgICBEUk9QRE9XTl9BQ1RJVkVfQ0hJTEQ6ICc+IC5kcm9wZG93bi1tZW51IC5hY3RpdmUnXG4gIH07XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIFRhYiA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRhYihlbGVtZW50KSB7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICB9IC8vIEdldHRlcnNcblxuXG4gICAgdmFyIF9wcm90byA9IFRhYi5wcm90b3R5cGU7XG5cbiAgICAvLyBQdWJsaWNcbiAgICBfcHJvdG8uc2hvdyA9IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5fZWxlbWVudC5wYXJlbnROb2RlICYmIHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUgJiYgJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuQUNUSVZFKSB8fCAkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5ESVNBQkxFRCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGFyZ2V0O1xuICAgICAgdmFyIHByZXZpb3VzO1xuICAgICAgdmFyIGxpc3RFbGVtZW50ID0gJCh0aGlzLl9lbGVtZW50KS5jbG9zZXN0KFNlbGVjdG9yLk5BVl9MSVNUX0dST1VQKVswXTtcbiAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtcblxuICAgICAgaWYgKGxpc3RFbGVtZW50KSB7XG4gICAgICAgIHZhciBpdGVtU2VsZWN0b3IgPSBsaXN0RWxlbWVudC5ub2RlTmFtZSA9PT0gJ1VMJyB8fCBsaXN0RWxlbWVudC5ub2RlTmFtZSA9PT0gJ09MJyA/IFNlbGVjdG9yLkFDVElWRV9VTCA6IFNlbGVjdG9yLkFDVElWRTtcbiAgICAgICAgcHJldmlvdXMgPSAkLm1ha2VBcnJheSgkKGxpc3RFbGVtZW50KS5maW5kKGl0ZW1TZWxlY3RvcikpO1xuICAgICAgICBwcmV2aW91cyA9IHByZXZpb3VzW3ByZXZpb3VzLmxlbmd0aCAtIDFdO1xuICAgICAgfVxuXG4gICAgICB2YXIgaGlkZUV2ZW50ID0gJC5FdmVudChFdmVudC5ISURFLCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRoaXMuX2VsZW1lbnRcbiAgICAgIH0pO1xuICAgICAgdmFyIHNob3dFdmVudCA9ICQuRXZlbnQoRXZlbnQuU0hPVywge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiBwcmV2aW91c1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChwcmV2aW91cykge1xuICAgICAgICAkKHByZXZpb3VzKS50cmlnZ2VyKGhpZGVFdmVudCk7XG4gICAgICB9XG5cbiAgICAgICQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzaG93RXZlbnQpO1xuXG4gICAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8IGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICB0YXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fYWN0aXZhdGUodGhpcy5fZWxlbWVudCwgbGlzdEVsZW1lbnQpO1xuXG4gICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgdmFyIGhpZGRlbkV2ZW50ID0gJC5FdmVudChFdmVudC5ISURERU4sIHtcbiAgICAgICAgICByZWxhdGVkVGFyZ2V0OiBfdGhpcy5fZWxlbWVudFxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHNob3duRXZlbnQgPSAkLkV2ZW50KEV2ZW50LlNIT1dOLCB7XG4gICAgICAgICAgcmVsYXRlZFRhcmdldDogcHJldmlvdXNcbiAgICAgICAgfSk7XG4gICAgICAgICQocHJldmlvdXMpLnRyaWdnZXIoaGlkZGVuRXZlbnQpO1xuICAgICAgICAkKF90aGlzLl9lbGVtZW50KS50cmlnZ2VyKHNob3duRXZlbnQpO1xuICAgICAgfTtcblxuICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICB0aGlzLl9hY3RpdmF0ZSh0YXJnZXQsIHRhcmdldC5wYXJlbnROb2RlLCBjb21wbGV0ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAkLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgfSAvLyBQcml2YXRlXG4gICAgO1xuXG4gICAgX3Byb3RvLl9hY3RpdmF0ZSA9IGZ1bmN0aW9uIF9hY3RpdmF0ZShlbGVtZW50LCBjb250YWluZXIsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIGFjdGl2ZUVsZW1lbnRzID0gY29udGFpbmVyICYmIChjb250YWluZXIubm9kZU5hbWUgPT09ICdVTCcgfHwgY29udGFpbmVyLm5vZGVOYW1lID09PSAnT0wnKSA/ICQoY29udGFpbmVyKS5maW5kKFNlbGVjdG9yLkFDVElWRV9VTCkgOiAkKGNvbnRhaW5lcikuY2hpbGRyZW4oU2VsZWN0b3IuQUNUSVZFKTtcbiAgICAgIHZhciBhY3RpdmUgPSBhY3RpdmVFbGVtZW50c1swXTtcbiAgICAgIHZhciBpc1RyYW5zaXRpb25pbmcgPSBjYWxsYmFjayAmJiBhY3RpdmUgJiYgJChhY3RpdmUpLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKTtcblxuICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczIuX3RyYW5zaXRpb25Db21wbGV0ZShlbGVtZW50LCBhY3RpdmUsIGNhbGxiYWNrKTtcbiAgICAgIH07XG5cbiAgICAgIGlmIChhY3RpdmUgJiYgaXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KGFjdGl2ZSk7XG4gICAgICAgICQoYWN0aXZlKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVykub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29tcGxldGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl90cmFuc2l0aW9uQ29tcGxldGUgPSBmdW5jdGlvbiBfdHJhbnNpdGlvbkNvbXBsZXRlKGVsZW1lbnQsIGFjdGl2ZSwgY2FsbGJhY2spIHtcbiAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgJChhY3RpdmUpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgICB2YXIgZHJvcGRvd25DaGlsZCA9ICQoYWN0aXZlLnBhcmVudE5vZGUpLmZpbmQoU2VsZWN0b3IuRFJPUERPV05fQUNUSVZFX0NISUxEKVswXTtcblxuICAgICAgICBpZiAoZHJvcGRvd25DaGlsZCkge1xuICAgICAgICAgICQoZHJvcGRvd25DaGlsZCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWN0aXZlLmdldEF0dHJpYnV0ZSgncm9sZScpID09PSAndGFiJykge1xuICAgICAgICAgIGFjdGl2ZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJChlbGVtZW50KS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcblxuICAgICAgaWYgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdyb2xlJykgPT09ICd0YWInKSB7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJywgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIFV0aWwucmVmbG93KGVsZW1lbnQpO1xuXG4gICAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ2xhc3NOYW1lLkZBREUpKSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChDbGFzc05hbWUuU0hPVyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbGVtZW50LnBhcmVudE5vZGUgJiYgJChlbGVtZW50LnBhcmVudE5vZGUpLmhhc0NsYXNzKENsYXNzTmFtZS5EUk9QRE9XTl9NRU5VKSkge1xuICAgICAgICB2YXIgZHJvcGRvd25FbGVtZW50ID0gJChlbGVtZW50KS5jbG9zZXN0KFNlbGVjdG9yLkRST1BET1dOKVswXTtcblxuICAgICAgICBpZiAoZHJvcGRvd25FbGVtZW50KSB7XG4gICAgICAgICAgdmFyIGRyb3Bkb3duVG9nZ2xlTGlzdCA9IFtdLnNsaWNlLmNhbGwoZHJvcGRvd25FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IuRFJPUERPV05fVE9HR0xFKSk7XG4gICAgICAgICAgJChkcm9wZG93blRvZ2dsZUxpc3QpLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfSAvLyBTdGF0aWNcbiAgICA7XG5cbiAgICBUYWIuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTtcbiAgICAgICAgdmFyIGRhdGEgPSAkdGhpcy5kYXRhKERBVEFfS0VZKTtcblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IFRhYih0aGlzKTtcbiAgICAgICAgICAkdGhpcy5kYXRhKERBVEFfS0VZLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vIG1ldGhvZCBuYW1lZCBcXFwiXCIgKyBjb25maWcgKyBcIlxcXCJcIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoVGFiLCBudWxsLCBbe1xuICAgICAga2V5OiBcIlZFUlNJT05cIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gVkVSU0lPTjtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gVGFiO1xuICB9KCk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG5cbiAgJChkb2N1bWVudCkub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkRBVEFfVE9HR0xFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgVGFiLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkKHRoaXMpLCAnc2hvdycpO1xuICB9KTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICQuZm5bTkFNRV0gPSBUYWIuX2pRdWVyeUludGVyZmFjZTtcbiAgJC5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IFRhYjtcblxuICAkLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVDtcbiAgICByZXR1cm4gVGFiLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgcmV0dXJuIFRhYjtcblxufSkpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRhYi5qcy5tYXBcbiJdfQ==
