@use 'sass:map';
@use 'sass:math';
@use 'variables' as *;
@use 'functions' as *;

/* -----------------------------------------------------------------------------
 * LAYOUT
 * -------------------------------------------------------------------------- */
// #region

@mixin grid-base($gap: $size-2) {
  display: grid;
  gap: var(--grid-gap, $gap);
  grid-template-columns: var(--grid-columns, 1fr);
  grid-template-rows: var(--grid-rows, auto);

  // HACK for grid and flex direct children in overflow
  // https://stackoverflow.com/questions/36247140/why-dont-flex-items-shrink-past-content-size
  & > * {
    min-width: 0;
    min-height: 0;
  }
}

// 12-column grid settings
@mixin grid-12($columns: 12, $gap: $size-3) {
  --grid-columns: repeat(#{$columns}, minmax(0, 1fr));
  --grid-gap: #{$gap};
}

// Adaptive grid with automatic switching to 12 columns
@mixin grid($mobile-columns: 1fr, $desktop-columns: 12, $mobile-gap: $size-2, $desktop-gap: $size-3) {
  @include grid-base($mobile-gap);

  // Phone
  --grid-columns: #{$mobile-columns};

  // Tablet and up
  @media (--tablet) {
    @include grid-12($desktop-columns, $desktop-gap);
  }
}

@mixin grid-columns($columns: 12, $screens: $mq-breakpoints-lg) {
  @each $screen in $screens {
    @media (--#{$screen}) {
      $class-base: null;

      // Classes aliases
      @if $screen != all {
        @for $i from 1 through $columns {
          // Create aliases for halves, thirds and fourths
          @if math.div($columns, $i) == 4 {
            $class-base: 1\/4;
          } @else if math.div($columns, $i) == 3 {
            $class-base: 1\/3;
          } @else if math.div($columns, $i) == 2 {
            $class-base: 1\/2;
          } @else if $i == 8 {
            $class-base: 2\/3;
          } @else if $i == 9 {
            $class-base: 3\/4;
          } @else {
            $class-base: $i;
          }

          // Prefixed classes
          @if $class-base != $i {
            .#{$screen}\:col-#{$class-base},
            .#{$screen}\:col-#{$i} {
              grid-column: auto / span $i;
            }
          } @else {
            .#{$screen}\:col-#{$class-base} {
              grid-column: auto / span $i;
            }
          }
        }

        /* Offsets / Start position
        Start with `1` because `0` is an invalid value.
        Ends with `$columns - 1` because offsetting by the width of an entire row isn't possible. */
        @for $i from 1 through ($columns - 1) {
          .#{$screen}\:col-start-#{$i} {
            grid-column-start: $i;
          }
        }
      }
    }
  }
}

@mixin container($width: $width-container) {
  margin-inline: auto;
  position: relative;
  width: min(
    calc(100% - var(--padding-x-container) * 2),
    var(--width-container, #{$width})
  );
}

@mixin flex-base {
  // Change items
  --items: 1;
  --gap: #{$size-2};

  display: flex;
  flex-direction: column;
  gap: var(--gap);
}

// Use this one within media query. Change --items value to 2, 3 etc to define
// columns
@mixin flex-row($items: 2, $gap: $size-4, $let-flex: false) {
  --gap: #{$gap};
  --items: #{$items};

  @if $let-flex {
    display: flex;
  }

  flex-direction: row;
  flex-wrap: wrap;

  .flex__item {
    width: calc(
      100% / var(--items) - var(--gap) * (var(--items) - 1) / var(--items)
    );
  }
}
// #endregion

/* -----------------------------------------------------------------------------
 * TYPOGRAPHY
 * -------------------------------------------------------------------------- */
// #region

@mixin heading-base {
  color: var(--color-ink-base);

  // OpenType kerning
  font-family: $font-family-title;
  font-feature-settings: 'kern' 1, 'liga' 1;
}

@mixin text-format($level) {
  font-size: var(--font-size-#{$level});
  line-height: var(--line-height-#{$level});
  padding-top: var(--padding-top-#{$level});
  padding-bottom: var(--padding-bottom-#{$level});
}

@mixin label($uppercase: true) {
  font-family: $font-family-base;
  font-size: var(--font-size-small);
  font-weight: 500;
  letter-spacing: 0.2px;
  line-height: var(--line-height, var(--line-height-small));

  @if $uppercase {
    text-transform: uppercase;
  }
}

@mixin text-inline-block {
  display: inline-block;
  margin-block: -1 * rem(1);
  padding: rem(1) $size-1;
  vertical-align: baseline;
  white-space: nowrap;
}

@mixin hint {
  display: block;
  padding-top: var(--padding-top-small);
  padding-bottom: var(--padding-bottom-small);
}

@mixin text-truncate {
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
}

// Multiline truncate

@mixin multiline-truncate(
  $lines: 4,
  $line-height: $size-line,
  $padding-top: 0
) {
  --line-height: #{$line-height};
  --max-lines: #{$lines};
  --padding-top: #{$padding-top};

  // All old stuff is required
  -webkit-line-clamp: var(--max-lines);
  -webkit-box-orient: vertical;
  // stylelint-disable-next-line value-no-vendor-prefix
  display: -webkit-box;

  line-clamp: var(--max-lines);
  overflow: hidden;
  max-height: calc(var(--max-lines) * var(--line-height) + var(--padding-top));
}

@mixin multiline-truncate-reset {
  -webkit-box-orient: auto;
  -webkit-line-clamp: none;
  display: block;
  line-clamp: none;
  overflow: visible;
  max-height: none;
}
// #endregion

/* -----------------------------------------------------------------------------
 * GRAPHICS
 * -------------------------------------------------------------------------- */
// #region

@mixin border {
  border-radius: $border-radius-base;

  display: flex;
  position: relative;
  overflow: hidden;
  max-width: max-content;

  // Border
  &::after {
    border-radius: $border-radius-sm;
    box-shadow: inset 0 0 0 1px var(--color-ink-neutral-border);
    content: '';
    display: block;
    pointer-events: none;
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
  }

  &:empty {
    display: none;
  }
}

@mixin chevron-down {
  background-color: transparent;
  background-image: var(--icon-chevron-down);
  background-position: center;
  background-repeat: no-repeat;
  background-size: var(--icon-size, #{$size-icon-xy});
  content: '';
  display: block;
  position: absolute;
  top: var(--chevron-top, #{$size-2});
  inset-inline-end: var(--chevron-end, #{$size-2});
  transition: transform $duration-xxs $easing-base;
  width: var(--icon-size, #{$size-icon-xy});
  height: var(--icon-size, #{$size-icon-xy});
}
// #endregion

/* -----------------------------------------------------------------------------
 * UTILITIES / HELPERS
 * -------------------------------------------------------------------------- */
// #region

@mixin utility-classes($props) {
  @each $property, $property-map in $props {
    $class-base: map.get($property-map, class-base);
    $values: map.get($property-map, values);

    // Classes for all breakpoints
    @each $key, $value in $values {
      .#{$class-base}-#{$key} {
        #{$property}: $value;
      }
    }

    // Adaptive classes
    @each $screen in $mq-breakpoints {
      @media (--#{$screen}) {
        @each $key, $value in $values {
          .#{$screen}\:#{$class-base}-#{$key} {
            #{$property}: $value;
          }
        }
      }
    }
  }
}

@mixin visually-hidden {
  border: 0;
  clip: rect(0, 0, 0, 0);
  margin: -1px;
  padding: 0;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
  height: 1px;
}

@mixin focus-ring {
  outline: var(--size-half) solid var(--box-shadow-focus-outline);
}

@mixin scrollbar(
  $size: $size-2,
  $thumb-bg: var(--color-ink-border),
  $track-bg: transparent
) {
  // The emerging W3C standard that is currently Firefox-only
  scrollbar-color: $thumb-bg $track-bg;
  scrollbar-width: thin;

  // Chrome/Edge/Safari
  &::-webkit-scrollbar {
    background-color: $track-bg;
    width: $size;
    height: $size;
  }

  &::-webkit-scrollbar-track {
    background: $track-bg;
  }

  // Handle
  &::-webkit-scrollbar-thumb {
    background-clip: content-box;
    background-color: $thumb-bg;
    border-radius: $border-radius-pill;
    border: $size-half solid transparent;
  }
}

@mixin centering-max-width($width, $margin: $size-2p5) {
  margin-inline: max($margin, 50% - $width / 2);
}

// #endregion

/* -----------------------------------------------------------------------------
 * ELEMENTS
 * -------------------------------------------------------------------------- */
// #region

@mixin menu-item {
  --btn-height: auto;
  border-radius: $border-radius-sm;
  background-color: transparent;
  color: var(--menu-color, var(--color-ink-2ry));
  display: flex;
  align-items: center;
  gap: $size-1;
  justify-content: flex-start;
  font-size: inherit;
  font-weight: inherit;
  text-align: left;
  text-decoration: none;
  text-transform: none;
  padding: var(--menu-item-padding, #{$size-1 $size-2});
  position: relative;
  outline: 0;
  user-select: none;
  transition: background $duration-xxs, color $duration-xxs;
  width: 100%;

  &:is(:active, :focus-visible) {
    background-color: var(--color-ink-min);
    text-decoration: none;
  }

  &:focus-visible {
    box-shadow: var(--box-shadow-focus-outline);
  }

  @media (any-hover: hover) and (pointer: fine) {
    &:hover {
      background: var(--color-ink-min);
    }
  }
}

// BUTTONS
/* Mixins were created in order to quickly styles the buttons of plugins, like
woocommerce */
@mixin button-base {
  appearance: button;
  cursor: pointer;
  display: inline-flex;
  align-items: center;
  flex-shrink: 0;
  justify-content: center;
  font-family: inherit;
  text-align: center;
  text-decoration: none;
  outline: 0;
  position: relative;
  // Disable gestures like ‘double-tap to zoom’.
  touch-action: manipulation;
  transition: background $duration-xxs $easing-base,
    box-shadow $duration-xxs $easing-base;
  user-select: none;
  vertical-align: middle;
  // HACK: By default, flex items won’t shrink below their minimum content size
  min-width: 0;

  &:focus-visible {
    @include focus-ring();
  }
}

@mixin button(
  $btn-background-hover: var(--color-brand-background-light),
  $btn-background: var(--color-ink-min),
  $btn-border-radius: $border-radius-pill,
  $btn-border: 0,
  $btn-box-shadow-hover: none,
  $btn-box-shadow: none,
  $btn-color: var(--color-brand-text)
) {
  background: $btn-background;
  border-radius: $btn-border-radius;
  border: $btn-border;
  box-shadow: $btn-box-shadow;
  color: $btn-color;
  font-weight: bolder;
  // Hanging characters are cropping by `overflow: hidden` and `line-height: 1`
  line-height: var(--btn-height);
  white-space: nowrap;
  // Show the overflow in Edge
  overflow: visible;
  padding-block: var(--padding-y-btn);
  padding-inline: var(--padding-x-btn);
  // Disable gestures like ‘double-tap to zoom’
  transition: background $duration-xxs $easing-base,
    box-shadow $duration-xxs $easing-base;
  max-width: 100%;
  height: var(--btn-height);

  @include label;
  @include button-base;

  // Use child span for text truncating with ellipsis
  > span {
    @include text-truncate;
  }

  @media (any-hover: hover) and (pointer: fine) {
    &:hover {
      background: $btn-background-hover;
      box-shadow: $btn-box-shadow-hover;
      text-decoration: none;
    }
  }
}

@mixin button-primary {
  text-shadow: 0 1px 0 var(--color-ink-min);
  transition:
    filter $duration-xxs $easing-base,
    box-shadow $duration-xxs $easing-base;

  @include button(
    $btn-background: var(--color-brand-gradient-dark),
    $btn-background-hover: var(--color-brand-gradient-dark),
    $btn-color: var(--color-ink-inverse-base),
    $btn-box-shadow: (
      0 1px 1px hsl(var(--color-ink-shadow) / 0.24),
      inset 0 0 0 1px hsl(var(--color-ink-shadow) / 0.24),
      inset 0 2px 0 hsl($h $s-neutral var(--l-bg-base) / 0.16),
    )
  );

  .icon {
    --icon-fill: var(--color-brand-background-light);
    --icon-stroke: var(--color-brand-background-light);
  }

  @media (any-hover: hover) and (pointer: fine) {
    &:hover {
      filter: $color-brightness-up;
    }
  }
}
// #endregion
